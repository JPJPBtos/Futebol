#include <a_samp>
#include <a_mysql>
#include <zcmd>
#include <sscanf>
#include <foreach>
#include <DOF2>
#include <GZ_ShapesALS>
#include <streamer>

main( ) { }

#define DIALOG_REGISTRO     1
#define DIALOG_LOGIN        2
#define MAX_INVENTORY_SLOTS 	15 // Não mecher
#define MAX_ITENS_WORLD   2014
#define TIMER_ITEM_WORLD        60*10

//===== CONEXÃO COM BANCO DE DADOS =====
#define HOST      "192.168.0.6" // IP de acesso ao phpmyadmin no caso se voce estiver hospedando no pc deixei localhost
#define USUARIO   "professor" // Usuario por padrão é root
#define DATABASE  "samp" // nome da database que voce criou..
#define SENHA "etec#prof" // não possue senha caso tenha usado o wamp

//===== CONTADOR =====
//Exemplo: SetTimer("Teste", segundos(10), true);
#define minutos(%0) (1000 * %0 * 60)
#define horas(%0) (1000 * %0 * 60 * 60)
#define segundos(%0) (1000 * %0)
#define dias(%0) (1000 * %0 * 60 * 60  * 24)
#define semanas(%0) (1000 * %0 * 60 * 60  * 24 * 7)
#define meses(%0) (1000 * %0 * 60 * 60  * 24 * 30)
#define anos(%0) (1000 * %0 * 60 * 60  * 24 * 30 * 12)
#define decadas(%0) (1000 * %0 * 60 * 60  * 24 * 30 * 12 * 10)
#define seculos(%0) (1000 * %0 * 60 * 60  * 24 * 30 * 12 * 10 * 10)

//===== COLORS =====
#define COLOR_ADMIN 		     0xFF00FFFF
#define COLOR_MODERADOR			 0x0000FFFF
#define COLOR_AJUDANTE  		 0x00FF80FF
#define COLOR_LIGHTRED 	         0xFF6347AA
#define COLOR_LIGHTBLUE          0x33CCFFAA
#define COLOR_LIGHTGREEN         0x9ACD32AA
#define COLOR_GRAD1              0xB4B5B7FF
#define COLOR_GRAD2              0xBFC0C2FF
#define COLOR_PURPLE             0xC2A2DAAA
#define COR_VERMELHO 			 0xFF0000FF
#define COR_AMARELO 			 0xFFFF00FF
#define COR_VERDE 				 0x00FF00FF
forward Fina(playerid);
forward Dano(playerid);
forward CompletarGZ4(playerid);
forward CompletarGZ3(playerid);
forward CompletarGZ2(playerid);
forward Finalizar(playerid);
forward Iniciar(playerid);
forward MsgIniciar(playerid);
forward SpawnarItens(playerid);
new g = 0;
new h = 0;
new hj = 0;
new kk = 0;
new jh = 0;
new jj = 0;
new ji = 0;
new ll = 0;
new ff = 0;
new fina[MAX_PLAYERS];
new jogoini = 0;
new f = 0;
new spawnaritens[MAX_PLAYERS];
new spawn[MAX_PLAYERS];
new dano[MAX_PLAYERS];
new GZS1;
new GZS2;
new Float:health;
new tempodano = 0;
new mododejogo = 0;
new tempo;
new finalizarjogo;
new js;
new gz[MAX_PLAYERS];
new finalizar[MAX_PLAYERS];
new iniciar[MAX_PLAYERS];
new msginiciar[MAX_PLAYERS];
enum pInfo // enumerador com variaveis necessarias para nosso salvamento.
{
    pID,
    pNome[24],
    pIP[26],
    pSenha[20],
    pLevel,
    pDinheiro,
    pSkin,
    pMatou,
    pMorreu,
    pVitorias,
    pStaff,
    pCargo[64],
    pBanido,
    pMotivo[64],
    pRankPartida,
    bool:pLogado,
    bool:pJogando
};
enum e_votacao
{
	bool:iniciada,
	sim,
	nao,
}
enum enum_Itens
{
	item_id,
 	item_tipo,
  	item_modelo,
 	item_nome[24],
	item_limite,
	bool:item_canbedropped,
	Float:item_previewrot[4],
	item_description[200]
}
enum
{
	ITEM_TYPE_WEAPON,
	ITEM_TYPE_HELMET,
	ITEM_TYPE_NORMAL,
	ITEM_TYPE_BODY,
	ITEM_TYPE_AMMO,
	ITEM_TYPE_BACKPACK,
	ITEM_TYPE_MELEEWEAPON
}
enum enum_pInventory
{
	invSlot[MAX_INVENTORY_SLOTS],
	invSelectedSlot,
	invSlotAmount[MAX_INVENTORY_SLOTS],
	Float:invArmourStatus[MAX_INVENTORY_SLOTS]
}
enum enum_pCharacter
{
	charSlot[7],
	charSelectedSlot,
	Float:charArmourStatus
}
enum enum_Player
{
	bool:inInventory,
	bool:MessageInventory,
	MessageInventoryTimer
}
enum enum_ItensWorld
{
	bool:world_active,
	world_itemid,
	world_model,
	world_amount,
	world_object,
	world_timer,
	Text3D:world_3dtext,
	Float:world_armourstatus,
	Float:world_position[3],
}
new Float:SpawnItem [] [3] =
{
   {164.0614,-1762.4165,6.7969},
   {165.1442,-1760.7628,6.7969},
   {168.1129,-1769.4430,4.4709},
   {170.6908,-1770.0986,4.4267},
   {191.8503,-1770.0287,4.3138},
   {194.5053,-1770.6709,4.2970},
   {206.5921,-1769.9788,4.3499},
   {230.8941,-1766.5703,4.7702},
   {219.4088,-1767.0406,4.7083},
   {249.5139,-1766.3820,4.7550},
   {263.2924,-1765.7976,4.7561},
   {281.2451,-1767.4056,4.5477},
   {295.2262,-1765.8789,4.5459},
   {295.6957,-1767.8215,4.5430},
   {281.1226,-1769.2194,4.5009},
   {295.3711,-1765.8110,4.5460},
   {295.6949,-1768.1477,4.5426},
   {305.1906,-1770.6031,4.5380},
   {305.9406,-1772.1418,4.5614},
   {314.0060,-1772.1315,4.6507},
   {319.0840,-1772.3890,4.7461},
   {165.3228,-1952.8232,3.7734},
   {162.9916,-1956.6364,3.7734},
   {158.9835,-1960.1171,3.7734},
   {154.6409,-1961.0410,3.7734},
   {147.8847,-1960.6611,3.7734},
   {144.9111,-1955.6351,3.7734},
   {145.3338,-1946.8929,3.7734},
   {149.4024,-1941.9407,3.7734},
   {155.5497,-1939.8412,3.7734},
   {159.8855,-1941.8125,3.7734},
   {163.4164,-1945.7246,3.7734},
   {385.6576,-1817.8087,7.8409},
   {384.5106,-1819.4700,7.8414},
   {385.4251,-1846.4686,7.8359},
   {385.7704,-1851.9076,7.8359},
   {385.4954,-1862.9346,7.8359},
   {386.5385,-1870.2402,7.8359},
   {389.6767,-1875.3691,7.8359},
   {388.8215,-1878.3323,7.8359},
   {389.5878,-1881.9386,7.8301},
   {389.2738,-1885.6166,7.8301},
   {388.7799,-1889.2996,7.8301},
   {386.7449,-1895.6885,7.8359},
   {386.7017,-1899.8358,7.8359},
   {379.5719,-1910.7476,7.8301},
   {378.0753,-1920.7494,7.8301},
   {360.9551,-2030.3483,7.8359},
   {361.3402,-2034.5828,7.8359},
   {384.2558,-2029.1642,7.8359},
   {358.0750,-2072.2166,10.6953},
   {361.1692,-2072.6582,10.6953},
   {354.4515,-2069.0786,10.6953},
   {401.0489,-2070.4531,10.7433},
   {400.8212,-2065.6064,10.7488},
   {403.6474,-2061.6121,10.7537},
   {397.3359,-2059.1648,7.8359},
   {390.4112,-1758.1660,8.1921},
   {396.1419,-1759.0635,8.1409},
   {404.0128,-1757.9619,8.2123},
   {408.4604,-1758.7428,8.1792},
   {415.4449,-1758.6376,8.1851},
   {421.1704,-1758.1223,8.2139},
   {427.0762,-1758.5026,8.1941},
   {482.2356,-1754.2726,14.0761},
   {491.7921,-1756.1323,14.1322},
   {498.4381,-1756.7307,14.1660},
   {504.3430,-1757.3529,14.1877},
   {511.0341,-1757.5829,14.2123},
   {518.7986,-1759.0081,14.2411},
   {526.6201,-1760.7462,14.2702},
   {530.8140,-1761.6204,14.2857},
   {537.5839,-1762.8274,14.3168},
   {545.6145,-1764.0955,14.3397},
   {552.3600,-1763.8374,14.3462},
   {559.4026,-1765.8484,14.3607},
   {566.6838,-1766.6506,14.3784},
   {574.9538,-1767.4099,14.3947},
   {581.1731,-1767.9921,14.3975},
   {590.0085,-1769.5940,14.3978},
   {598.0505,-1771.2831,14.4024},
   {607.9674,-1773.3646,14.3620},
   {618.1833,-1775.5095,14.2600},
   {628.7836,-1777.4012,14.1502},
   {637.5668,-1779.7177,14.0630},
   {661.8502,-1789.1644,12.4751},
   {680.1234,-1793.5417,12.4688},
   {679.1719,-1794.2837,12.4688},
   {662.8463,-1789.7760,12.4751},
   {696.2463,-1798.6357,12.4688},
   {696.3855,-1799.8920,12.4713},
   {710.1464,-1803.0216,12.4688},
   {712.9714,-1803.1274,12.4688},
   {743.6852,-1807.0792,13.0234},
   {749.5743,-1808.5626,13.0234},
   {760.4119,-1810.1555,13.0234},
   {769.6696,-1811.0653,13.0234},
   {775.0575,-1811.6418,13.0234},
   {793.0237,-1812.3320,13.0234},
   {797.3182,-1812.5927,13.0234},
   {801.8493,-1812.7646,13.0234},
   {806.0041,-1812.6818,13.0234},
   {847.5338,-1818.0046,12.1941},
   {848.3490,-1818.8911,12.1970},
   {854.2159,-1819.1770,12.1965},
   {856.9567,-1819.3698,12.1965},
   {877.5669,-1820.9053,12.1406},
   {879.7085,-1821.0470,12.1419},
   {895.2957,-1823.0349,12.1167},
   {897.8862,-1823.1573,12.1379},
   {902.8329,-1817.1039,13.2973},
   {905.0128,-1816.9578,13.2962},
   {908.2013,-1817.0791,13.2996},
   {910.9500,-1817.2559,13.2971},
   {913.7278,-1818.2583,13.2633},
   {916.5505,-1818.1722,13.3053},
   {920.2383,-1818.5697,13.3039},
   {922.3647,-1819.0311,13.3055},
   {925.5001,-1819.7111,13.2256},
   {928.0847,-1819.6228,13.3192},
   {931.3826,-1819.2559,13.3220},
   {933.4429,-1820.2866,13.3210},
   {949.0466,-1822.4005,13.3228},
	{951.1555,-1822.7244,13.3207},
	{954.7293,-1822.8511,13.3178},
	{957.0269,-1823.5599,13.3173},
	{960.2054,-1825.2013,13.3262},
	{962.8588,-1825.7319,13.3195},
	{966.3090,-1826.8457,13.3220},
	{968.3000,-1827.1334,13.3235},
	{971.4688,-1828.3882,13.3309},
	{973.7148,-1828.0530,13.3291},
	{977.4362,-1829.2675,13.3256},
	{980.0457,-1830.3030,13.3321},
	{982.6556,-1831.0559,13.2575},
	{985.1483,-1831.1418,13.3345},
	{988.1650,-1831.9331,13.3403},
	{991.0925,-1832.3187,13.3359},
	{1020.9199,-1879.5051,12.7415},
	{1021.0497,-1881.5743,12.7370},
	{1021.1994,-1882.8098,12.7362},
	{1021.4580,-1884.6110,12.7362},
	{1021.3912,-1891.0275,12.7233},
	{1021.5157,-1892.5940,12.7253},
	{1020.6843,-1899.8370,12.6816},
	{1021.0396,-1901.3169,12.6925},
	{1020.8944,-1905.5239,12.6798},
	{1020.9772,-1907.1791,12.6801},
	{1021.1274,-1911.8623,12.6777},
	{1021.2479,-1913.1010,12.6801},
	{1020.6947,-1915.2717,12.6556},
	{1020.8082,-1916.7506,12.6574},
	{1020.8137,-1921.1353,12.6501},
	{1021.1094,-1923.2177,12.6576},
	{275.1122,-1608.8562,33.1557},
	{275.5313,-1603.2455,33.1066},
	{279.9714,-1598.1567,33.0022},
	{284.2201,-1599.3495,32.8770},
	{288.7010,-1600.4581,32.7581},
	{294.0765,-1601.8705,32.8228},
{299.3185,-1603.4132,32.9761},
{301.0219,-1608.2012,33.0910},
{300.2058,-1612.7400,33.1326},
{296.3077,-1617.9330,33.1696},
{290.9097,-1617.7145,33.1601},
{286.2760,-1617.2880,33.0544},
{288.5252,-1542.8013,36.0391},
{290.7328,-1537.9495,36.0391},
{293.4088,-1530.9653,36.0391},
{296.2126,-1525.6536,36.0391},
{299.1644,-1519.6563,36.0391},
{302.4207,-1514.9250,36.0391},
{305.4654,-1510.4187,36.0391},
{309.2923,-1504.9420,36.0391},
{313.2182,-1499.9624,36.0391},
{317.3312,-1494.9446,36.0391},
{321.1277,-1490.5603,36.0391},
{325.1347,-1486.6604,36.0391},
{331.8995,-1480.0753,36.0391},
{321.4882,-1452.8463,34.4174},
{317.4298,-1455.1022,34.3955},
{313.5888,-1458.0231,34.1934},
{309.5407,-1462.0182,33.9653},
{305.3703,-1465.4022,33.7488},
{301.5149,-1468.4989,33.5567},
{297.7030,-1471.9390,33.3468},
{293.2792,-1476.0670,33.1003},
{327.4476,-1451.9552,34.4430},
{333.2522,-1447.4358,34.4616},
{339.6703,-1441.8877,34.4906},
{345.2159,-1437.5042,34.5190},
{351.9559,-1431.6971,34.4921},
{356.9634,-1427.8461,34.4447},
{364.4234,-1422.2107,34.3736},
{371.2966,-1417.0271,34.3132},
{377.2256,-1412.2552,34.2669},
{409.6443,-1419.5859,33.5956},
{410.9805,-1420.9515,33.4366},
{414.7553,-1427.1736,32.8242},
{417.5225,-1429.8344,32.5038},
{421.1091,-1503.4521,31.2191},
{420.0107,-1501.7217,31.2163},
{412.6228,-1501.5153,31.3968},
{411.3499,-1503.4398,31.4770},
{347.7777,-1494.2601,36.0391},
{342.8391,-1498.2670,36.0391},
{337.4593,-1503.7716,36.0391},
{332.5625,-1508.5837,36.0391},
{328.0362,-1514.1385,36.0391},
{324.4630,-1519.7134,36.0391},
{319.4621,-1526.3677,36.0391},
{315.7493,-1532.7679,36.0391},
{311.8141,-1540.3427,36.0325},
{309.8356,-1545.7631,36.0391},
{361.4587,-1600.1790,32.1348},
{363.7845,-1600.1213,31.9969},
{367.5175,-1600.1295,31.7735},
{370.2654,-1600.2583,31.6068},
{373.7092,-1600.5339,31.3979},
{376.1934,-1600.9286,31.1412},
{461.7104,-1571.5348,25.5174},
{461.7141,-1570.0232,25.6842},
{459.5319,-1506.0220,31.0045},
{458.8246,-1501.9824,31.0336},
{453.8808,-1482.2737,30.9325},
{452.5115,-1478.3230,30.8075},
{275.2610,-1435.6545,13.8972},
{278.9829,-1434.3586,13.9455},
{335.4608,-1359.8324,17.9560},
{331.8174,-1353.0851,17.9531},
{327.8706,-1346.4498,17.9531},
{325.7740,-1337.9344,17.9531},
{334.1646,-1334.0732,17.9531},
{344.2189,-1334.5754,17.9580},
{347.6186,-1340.9952,17.9580},
{352.1004,-1348.5197,17.9588},
{133.3781,-1491.6254,18.7656},
{130.4721,-1490.4120,18.7371},
{143.2576,-1470.0223,25.2036},
{146.9858,-1472.6838,25.2109},
{162.2170,-1456.7474,32.8450},
{160.6287,-1457.6411,32.8450},
{228.5786,-1404.5126,51.6117},
{177.9778,-1330.6442,70.0692},
{185.6677,-1328.1567,70.0970},
{250.8267,-1360.0577,53.1094},
{247.9212,-1356.9535,53.1094},
{297.8620,-1337.3785,53.4415},
{296.1553,-1335.2587,53.4415},
{266.2022,-1288.5232,74.6325},
{266.7549,-1291.4014,74.6325},
{227.2561,-1246.1921,78.2928},
{229.1747,-1243.3810,78.2852},
{251.5752,-1223.2773,75.3125},
{253.3467,-1221.9915,75.3125},
{282.2113,-1162.1459,80.9141},
{286.1700,-1158.3394,80.9099},
{349.0292,-1196.9287,76.5156},
{348.0836,-1199.8094,76.5156},
{353.6086,-1280.1642,53.7036},
{405.6417,-1267.2361,50.0198},
{408.3470,-1265.1831,50.0198},
{431.7485,-1252.7803,51.5809},
{415.3315,-1155.6171,76.6876},
{558.8038,-1160.7762,54.4223},
{578.9915,-1147.9712,53.1801},
{568.5335,-1130.7303,50.6797},
{618.3547,-1101.2223,46.7746},
{637.7607,-1123.7969,44.2070},
{689.8448,-1076.2223,49.4217},
{699.4958,-1059.9402,49.4217},
{717.4499,-1006.3099,52.5418},
{794.8155,-839.1652,60.6424},
{831.6509,-890.7845,68.7734},
{839.2227,-896.4680,68.7734},
{828.3379,-859.2618,69.9219},
{859.1545,-847.5098,77.3750},
{873.9420,-876.0799,77.7270},
{912.4998,-830.6977,92.0340},
{925.9594,-852.6385,93.4565},
{937.8284,-847.4603,93.7423},
{964.5690,-845.2520,95.5518},
{980.7821,-832.1993,95.4686},
{1022.2899,-776.1144,103.0970},
{1030.1719,-811.8284,101.8516},
{1110.7004,-743.1454,100.1329},
{1110.5352,-744.7837,100.1329},
{1093.1478,-804.4673,107.4215},
{1254.4675,-785.5518,92.0302},
{1302.0779,-800.7459,84.1406},
{365.0086,-1638.3314,32.8906},
{369.7073,-1638.8889,32.8906},
{375.9331,-1640.0142,32.8906},
{504.1466,-1606.9291,16.4693},
{507.8323,-1607.5210,16.4323},
{480.8380,-1539.3397,19.2801},
{479.3162,-1535.3103,19.5987},
{476.2360,-1507.8114,20.5813},
{476.1053,-1502.3875,20.5556},
{477.0559,-1497.3124,20.4484},
{476.6627,-1491.3301,20.2952},
{475.5761,-1485.9169,20.0938},
{683.0444,-1436.9559,14.8594},
{662.8561,-1466.6764,14.8516},
{664.2894,-1487.2657,14.8516},
{663.8719,-1512.8246,14.8516},
{663.7147,-1533.5642,14.8516},
{722.9609,-1473.6128,17.6953},
{723.4670,-1449.4825,17.6953},
{738.4448,-1431.5630,13.5234},
{759.8861,-1506.1318,13.5469},
{748.2133,-1567.2378,13.5469},
{695.9146,-1567.4121,14.2422},
{691.7246,-1567.8688,14.2422},
{688.2335,-1567.4203,14.2422},
{748.4155,-1378.3265,25.6922},
{742.3774,-1377.7998,25.6922},
{747.6750,-1370.5354,25.6922},
{748.7526,-1366.2073,25.6922},
{728.4163,-1278.7755,13.6484},
{727.8143,-1275.6638,13.6484},
{728.8866,-1276.8641,13.5674},
{848.6780,-1289.0018,13.8328},
{847.9638,-1294.3093,13.6616},
{862.1061,-1257.2550,14.7555},
{861.7864,-1246.5337,14.7853},
{833.3442,-1206.3732,16.9766},
{832.8460,-1203.5121,16.9766},
{862.3073,-1205.2084,16.9766},
{867.5656,-1204.7820,16.9766},
{896.1898,-1204.3513,16.9766},
{904.2110,-1202.9996,16.9832},
{918.9666,-1252.4480,16.2109},
{919.5314,-1265.7469,15.1719},
{921.0627,-1288.2076,14.4063},
{921.4326,-1299.1998,14.0938},
{886.4296,-1298.4135,13.7813},
{816.7682,-1094.7686,25.7915},
{813.2133,-1096.3492,25.7872},
{812.3885,-1100.7367,25.7862},
{812.6160,-1105.5596,25.7865},
{817.6730,-1106.1582,25.7926},
{898.0471,-1069.4342,24.4485},
{931.4259,-1062.8972,24.2891},
{931.9343,-1066.6499,24.2891},
{931.6572,-1069.8215,24.2962},
{932.0920,-1074.1816,24.2891},
{931.8320,-1077.4866,24.2891},
{931.6568,-1081.3088,24.2891},
{1000.7675,-940.5518,42.1797},
{1006.3172,-939.5639,42.1797},
{1030.8221,-979.7129,42.7969},
{1026.1230,-979.8911,42.6941},
{1020.5032,-980.7264,42.5673},
{1087.4078,-924.1865,43.3906},
{1102.5356,-924.5362,43.3906},
{1114.5699,-926.3002,43.1797},
{1128.8849,-924.3731,43.3906},
{1195.8555,-919.4742,43.1530},
{1207.2926,-918.2827,43.0656},
{1253.1198,-907.4192,46.6016},
{1247.2892,-908.7588,46.6016},
{1247.1788,-902.5808,46.6016},
{1251.7120,-902.2741,46.6016},
{1242.1465,-878.1703,46.6406},
{1248.0215,-877.9323,46.6406},
{1290.9216,-896.7910,46.6251},
{1284.0178,-897.5737,46.6251},
{1288.3743,-874.0366,46.8438},
{1281.2493,-874.9515,46.8438},
{1312.6179,-899.9656,39.5781},
{1316.4757,-899.7820,39.5781},
{1320.1790,-1076.1978,29.1797},
{1322.1157,-1082.5507,25.5967},
{1326.6075,-1067.2292,31.5547},
{1327.3651,-1058.9971,28.9809},
{1326.6210,-1090.8618,27.9766},
{1327.4520,-1098.3201,25.2890},
{1284.6655,-1067.1212,31.6719},
{1284.6335,-1059.1096,29.3079},
{1283.3052,-1098.3782,25.9429},
{1284.5276,-1090.1178,28.2578},
{1243.9636,-1074.8225,31.5515},
{1243.9712,-1067.7577,29.1680},
{1242.2614,-1099.1064,27.9766},
{1244.6354,-1106.9120,25.6106},
{1183.4437,-1074.6125,31.6789},
{1180.7806,-1067.4824,29.1073},
{1145.9966,-1061.5194,29.6521},
{1141.8097,-1070.0762,31.7656},
{1142.1604,-1092.8599,28.1875},
{1143.5212,-1101.2421,25.8137},
{1124.1431,-1330.6779,13.1009},
{1110.8995,-1331.5222,13.0382},
{1096.1750,-1332.8191,12.9220},
{1173.5288,-1321.2185,15.1953},
{1172.9836,-1324.7877,15.3980},
{1096.3259,-1435.7244,22.7637},
{1096.5858,-1456.5310,22.7402},
{1088.7251,-1500.6035,22.7531},
{1101.8285,-1524.3308,22.7549},
{1146.9330,-1528.7288,22.7500},
{1165.8479,-1508.8549,22.7505},
{1163.5892,-1471.0187,22.7607},
{1161.1031,-1435.2782,22.7811},
{1030.0835,-1452.5500,13.5546},
{1030.8164,-1443.2620,13.5546},
{1004.8335,-1432.0876,13.5469},
{998.6706,-1431.8384,13.5469},
{983.3597,-1431.5636,13.5469},
{994.9754,-1459.7874,13.5469},
{956.8585,-1448.4941,13.5128},
{968.8215,-1357.0212,13.3502},
{967.5598,-1365.5120,13.3438},
{968.1790,-1380.8895,13.3438},
{812.7454,-1448.5338,12.7493},
{811.4784,-1464.5813,12.8172},
{821.3614,-1472.8180,12.8809},
{825.7473,-1472.8154,12.8458},
{849.2836,-1474.3547,12.8965},
{815.1730,-1500.9701,13.0622},
{837.1968,-1503.6250,12.8491},
{840.8458,-1504.0874,12.8197},
{850.7543,-1520.0745,13.8993},
{872.8340,-1512.6434,13.5538},
{824.9150,-1552.2511,13.5117},
{814.3502,-1616.6981,13.5469},
{692.8320,-1602.7703,15.0469},
{697.2809,-1627.0941,3.7492},
{694.4434,-1645.8009,4.0938},
{694.7144,-1689.9084,4.3461},
{693.5486,-1705.7123,3.8195},
{769.1550,-1745.8279,13.0773},
{769.1311,-1696.6481,5.1554},
{768.0734,-1655.9114,5.6094},
{766.8846,-1605.8628,13.8039},
{865.4178,-1636.5836,14.9297},
{891.5667,-1638.3622,14.9535},
{850.6646,-1686.6781,14.9384},
{852.4985,-1719.0848,14.9669},
{936.8680,-1612.7206,14.9375},
{964.3235,-1613.1149,14.9505},
{987.4239,-1625.2172,14.9297},
{982.4661,-1703.5972,14.9570},
{1109.6198,-1798.2906,16.5938},
{1109.8564,-1795.3370,16.5938},
{1156.4819,-1772.0637,16.5992},
{1153.7754,-1771.1427,16.5992},
{1203.3580,-1758.1345,13.5869},
{1205.6666,-1753.6605,13.5880},
{1209.6936,-1749.8064,13.5937},
{1214.5691,-1746.8900,13.5949},
{1274.7920,-1663.7495,19.7344},
{1272.6268,-1668.4210,19.7344},
{1219.1385,-1692.6455,19.7344},
{1349.4851,-1755.8086,13.3513},
{1353.0956,-1756.2531,13.5078},
{1411.6462,-1702.5483,13.5395},
{1414.1251,-1699.3291,13.5395},
{1474.6501,-1767.2161,18.7958},
{1484.3484,-1767.0360,18.7958},
{1544.7319,-1677.8060,13.5590},
{1545.3850,-1674.9384,13.5603},
{1579.4086,-1634.4292,13.5624},
{1607.8218,-1668.8455,6.2188},
{1582.5641,-1668.5903,5.8943},
{1608.1952,-1715.0166,6.2188},
{1568.4630,-1693.0111,5.8906},
{1532.1620,-1705.7670,6.2252},
{1525.7284,-1678.0941,5.8906},
{1527.6890,-1644.2242,5.8906},
{1551.7196,-1638.6285,6.2188},
{1553.3527,-1669.7023,6.2188},
{1543.8433,-1713.6655,6.2188},
{1563.0323,-1720.5411,6.2188},
{1125.3055,-2034.1984,69.8830},
{1125.3054,-2036.4575,69.8819},
{1125.4535,-2037.9785,69.8807},
{1125.6978,-2040.4927,69.8788},
{1113.8163,-2062.5227,74.4297},
{1116.3441,-2062.3218,74.4297},
{1117.1138,-2011.4688,74.4297},
{1114.7896,-2011.0555,74.4297},
{1216.2428,-1813.4272,16.5938},
{1220.1664,-1813.1655,16.5938},
{1564.3364,-1895.6757,13.5603},
{1568.1647,-1896.6942,13.5606},
{1570.9658,-1897.0063,13.5606},
{1731.5427,-1893.3391,13.5625},
{1732.3782,-1902.5234,13.5623},
{1732.6178,-1911.3071,13.5623},
{1732.4335,-1920.3440,13.5666},
{1732.7345,-1928.8749,13.5708},
{1754.5045,-1930.1138,13.5767},
{1753.7340,-1922.0281,13.5726},
{1753.4469,-1913.1986,13.5682},
{1753.5852,-1904.0179,13.5638},
{1752.9771,-1895.0248,13.5573},
{1687.3140,-1968.0375,14.1172},
{1686.0074,-1979.0267,14.1172},
{1685.9174,-1990.0240,14.1217},
{1685.3718,-2000.9053,14.1248},
{1817.5292,-2006.7126,13.5544},
{1812.4738,-1995.4850,13.5544},
{1816.5640,-1985.8066,13.5544},
{1815.7705,-1978.2517,13.5469},
{1826.0336,-1982.1832,13.5469},
{1822.1246,-1993.4353,13.5469},
{1829.3549,-1994.5306,13.5469},
{1835.0999,-2007.9113,13.5544},
{1840.4049,-1995.8862,13.5469},
{1844.3842,-1992.0977,13.5469},
{1848.9861,-2003.0955,13.5469},
{1849.5883,-2007.7080,13.5469},
{1857.4124,-2032.2576,13.5469},
{1862.8698,-2021.8456,13.5469},
{1865.8566,-2005.2251,13.5469},
{1879.1044,-2002.2893,13.5544},
{1886.9384,-1983.2810,13.5469},
{1898.4138,-1988.1633,13.5469},
{1911.4926,-1991.8759,13.5469},
{1909.6864,-2000.8622,13.5469},
{1916.4639,-2008.9814,13.5469},
{1903.1447,-2019.6224,13.5469},
{1907.9602,-2032.8546,13.5469},
{1892.5924,-2021.4319,13.5469},
{1870.3048,-2037.3667,13.5469},
{1935.7742,-2013.4023,13.5469},
{1935.9124,-2022.1182,13.5469},
{1939.4580,-2032.6622,13.5547},
{1895.2032,-2067.9199,15.6689},
{1873.3644,-2070.4133,15.4971},
{1851.6935,-2069.8044,15.4812},
{1846.8318,-2102.3118,13.5469},
{1867.3082,-2103.4751,13.5489},
{1875.9347,-2098.2793,13.5324},
{1897.4425,-2099.1255,13.5116},
{1897.8586,-2103.3770,13.5709},
{1770.8241,-2022.2489,14.1373},
{1765.8322,-2031.5717,13.9548},
{1765.8553,-2047.3149,13.9636},
{1751.7089,-2056.8037,13.7791},
{1802.1573,-2099.1799,14.0210},
{1803.8683,-2123.9370,13.9424},
{1782.1615,-2101.7769,14.0566},
{1782.1218,-2126.2024,14.0679},
{1762.0972,-2102.3318,13.8570},
{1761.2335,-2125.4414,14.0566},
{1733.3765,-2098.1169,14.0366},
{1734.8962,-2130.3589,14.0210},
{1711.6139,-2101.3247,14.0210},
{1715.2545,-2124.9648,14.0566},
{1687.8453,-2099.6357,13.8343},
{1696.0864,-2125.2432,13.8101},
{1673.8483,-2122.4426,14.1460},
{1640.7004,-2239.5503,13.4982},
{1684.0055,-2240.0215,13.5469},
{1729.4803,-2239.0884,13.5415},
{1729.9497,-2333.1606,13.5469},
{1688.3939,-2332.1873,13.5469},
{1641.7637,-2334.0422,13.5469},
{1731.5126,-2239.4878,-2.7100},
{1688.8617,-2239.0837,-2.7113},
{1644.3011,-2239.9436,-2.7007},
{1757.1412,-2279.8225,-2.6133},
{1764.4625,-2278.2488,-2.5885},
{1768.1832,-2292.8232,-2.5808},
{1761.9309,-2295.7009,-2.6005},
{1728.9683,-2332.9087,-2.6797},
{1686.9487,-2332.5525,-2.6797},
{1644.1344,-2332.2151,-2.6797},
{1935.1194,-1884.7217,13.5340},
{1909.0962,-1885.9406,13.5086},
{1898.5541,-1886.4930,13.4983},
{1866.4672,-1886.5856,13.4513},
{1845.8464,-1886.6200,13.4311},
{1845.9540,-1871.1552,13.5781},
{1852.3846,-1854.6715,13.3828},
{1852.6250,-1857.7523,13.3828},
{1930.2853,-1777.9403,13.5469},
{1981.1567,-1719.1083,17.0305},
{1974.2452,-1706.6541,15.9688},
{1981.6183,-1682.7897,17.0537},
{1974.3765,-1656.7211,15.9688},
{1970.7933,-1656.8060,15.9688},
{2015.9570,-1629.8499,13.5469},
{2011.4392,-1655.7445,13.5469},
{2015.1475,-1641.4430,13.7824},
{2017.0313,-1704.0101,14.1899},
{2014.9012,-1717.0593,13.5547},
{2068.2856,-1731.5671,13.8762},
{2014.3185,-1733.5131,14.2161},
{2067.7959,-1717.2585,13.5547},
{2066.4390,-1703.8645,14.1484},
{2068.5786,-1656.9498,13.5469},
{2069.0059,-1643.5947,13.5469},
{2068.6445,-1629.3689,13.8762},
{2128.5002,-1686.0271,15.0859},
{2144.4624,-1686.3733,15.0859},
{2144.9868,-1666.0088,15.0859},
{2149.5186,-1669.6254,15.0859},
{2162.1719,-1660.3734,15.0859},
{2157.1985,-1654.0995,15.0859},
{2273.5964,-1785.7246,13.5469},
{2249.1743,-1795.0027,13.5469},
{2291.7827,-1795.6466,13.5469},
{2305.7971,-1785.9716,13.5568},
{2324.6472,-1795.7356,13.5469},
{2343.5684,-1786.3840,13.5469},
{2379.5688,-1785.8156,13.5469},
{2362.8850,-1794.6177,13.5469},
{2459.3506,-1689.6769,13.5459},
{2494.9414,-1686.9161,13.5142},
{2503.3381,-1694.1930,13.5564},
{2506.9333,-1694.5524,13.5565},
{2513.1221,-1689.9531,13.5440},
{2522.5530,-1679.4557,15.4970},
{2518.1516,-1673.2037,14.2067},
{2523.1541,-1659.0424,15.4935},
{2512.1001,-1651.6162,13.9264},
{2498.3250,-1643.2198,13.7826},
{2486.7881,-1646.4083,14.0703},
{2469.8384,-1648.2092,13.4723},
{2452.1040,-1642.6179,13.7357},
{2692.9534,-1707.9377,11.8478},
{2687.5840,-1713.4932,11.8438},
{2669.1501,-1755.8710,11.8438},
{2669.4055,-1764.6852,11.8478},
{2677.9109,-1793.5032,11.8438},
{2688.7568,-1807.0348,11.8438},
{2719.2959,-1826.2764,11.8438},
{2726.4514,-1827.4514,11.8438},
{2749.5139,-1826.9941,11.8478},
{2771.6882,-1820.2375,11.8438},
{2786.7246,-1807.9351,11.8478},
{2799.4150,-1787.2281,11.8438},
{2805.7556,-1766.7837,11.8438},
{2806.2368,-1757.9403,11.8478},
{2797.2815,-1726.9364,11.8438},
{2792.2634,-1719.2262,11.8438},
{2775.9939,-1703.7805,11.8438},
{2756.3501,-1694.0082,11.8338},
{2750.4333,-1693.0581,11.8488},
{2726.3027,-1693.0707,11.8438},
{2704.2935,-1700.4844,11.8438},
{2754.9800,-1913.3392,13.5469},
{2754.3638,-1919.5934,13.5469},
{2754.7029,-1935.4883,13.5459},
{2754.3438,-1957.7367,13.5454},
{2754.0876,-1966.5438,13.5451},
{2783.7690,-1967.7408,13.5469},
{2783.3203,-1955.3451,13.5469},
{2783.8000,-1929.0558,13.5469},
{2784.4155,-1921.3687,13.5469},
{2761.4126,-2002.7223,13.5547},
{2752.1113,-2002.2527,13.5547},
{2741.9194,-2002.6996,13.5547},
{2732.7427,-2001.7471,13.5472},
{2696.4907,-1990.3693,14.2229},
{2695.5361,-2020.5477,14.0223},
{2673.6279,-2017.7631,13.5490},
{2648.0745,-2021.4741,13.5469},
{2636.5327,-2012.3788,13.8139},
{2638.2532,-1992.7134,13.9935},
{2652.6860,-1989.9402,13.9988},
{2672.5256,-1990.2809,13.9935},
{2437.6428,-2019.4702,13.5469},
{2465.5469,-2020.5649,14.1242},
{2485.5564,-2020.3304,13.5540},
{2508.4043,-2020.9005,14.2101},
{2521.5703,-2017.5443,13.5469},
{2523.9026,-1999.2172,13.7826},
{2508.6375,-1998.4797,13.9025},
{2489.2690,-1997.3807,13.8343},
{2464.8467,-1997.3036,13.6889},
{2554.4312,-2409.9482,13.6331},
{2546.0681,-2399.8474,13.6374},
{2562.7734,-2418.8467,13.6330},
{2640.0627,-2385.6594,13.6328},
{2670.4431,-2386.5327,13.6328},
{2697.7959,-2385.9114,13.6328},
{2714.9478,-2414.3550,13.6328},
{2694.0334,-2436.0027,13.6318},
{2695.4631,-2449.6169,13.6388},
{2696.0703,-2466.3845,13.6472},
{2736.9592,-2465.8667,13.6484},
{2776.3608,-2408.2642,13.6472},
{2778.0898,-2425.9641,13.6360},
{2776.4827,-2464.6797,13.6364},
{2777.7571,-2446.5627,13.6361},
{2776.3889,-2501.9133,13.6538},
{2777.7200,-2486.9836,13.6617},
{2736.6758,-2511.8655,13.6641},
{2715.9531,-2490.7715,13.6511},
{2694.4309,-2469.7681,13.6484},
{2695.0500,-2455.2439,13.6415},
{2695.6672,-2436.0146,13.6322},
{2484.5168,-2484.2148,13.6489},
{2450.7168,-2566.5989,13.6567},
{2449.1965,-2598.6804,14.2131},
{2448.7969,-2627.0266,14.2131},
{2221.6404,-2684.7415,13.5409},
{2247.8564,-2403.4685,13.5469},
{2318.4495,-2307.8672,13.5469},
{2348.2537,-2303.7632,13.5469},
{2237.6858,-1929.4867,12.6524},
{2259.8164,-1929.4175,12.6506},
{2246.9580,-1941.9122,13.5495},
{2261.7551,-1941.5468,13.5395},
{2277.5662,-1941.4041,13.5469},
{2283.6929,-1930.1639,12.8021},
{2172.3992,-1818.7124,16.1406},
{2165.1123,-1818.9197,16.1406},
{2159.0469,-1819.2238,16.1406},
{2152.6287,-1819.1489,16.1406},
{2147.4597,-1815.5858,16.1406},
{2147.6804,-1809.1145,16.1406},
{2145.5156,-1802.6964,16.1406},
{1115.5876,-1604.9778,20.5477},
{1098.5682,-1604.5997,20.5292},
{1058.3729,-1604.5259,20.4957},
{1077.5300,-1604.8840,20.4911},
{1056.4302,-1631.6804,20.4882},
{1079.4480,-1634.1610,20.4913},
{1103.8206,-1633.5148,20.5631},
{1117.2162,-1632.8380,20.5466},
{2024.3641,-1403.5831,17.2014},
{2026.0681,-1403.5896,17.2176},
{2032.1760,-1403.0214,17.2758},
{2034.2682,-1402.7000,17.2957},
{2036.9543,-1403.9158,17.2726},
{2036.4626,-1405.9919,17.2199},
{1886.5106,-1116.9017,25.2734},
{1905.3085,-1116.8024,25.6641},
{1921.9796,-1118.6146,26.0859},
{1939.0797,-1117.9724,26.4455},
{1955.1586,-1118.9854,26.8359},
{1892.9149,-1069.9781,23.9375},
{1895.2715,-1066.2902,23.9375},
{1914.2596,-1072.1484,24.2621},
{1915.1185,-1065.4851,24.1247},
{1937.6174,-1066.8499,24.4170},
{1935.2225,-1070.5022,24.4164},
{1955.4681,-1075.2295,24.7967},
{1958.3066,-1070.6130,24.7967},
{1999.8334,-1114.9260,27.1318},
{2023.0725,-1120.5833,26.4210},
{2045.5851,-1115.3182,26.3617},
{2024.1558,-1053.6893,25.5961},
{2037.1183,-1059.9414,25.6508},
{2051.2290,-1065.8721,25.7836},
{2000.8629,-992.6099,31.4093},
{2008.2433,-985.6708,33.9219},
{2015.8259,-979.0577,36.4717},
{2043.9084,-965.8796,43.7994},
{2044.5089,-990.3030,43.1866},
{2048.8662,-986.0645,44.4971},
{2072.6917,-966.7148,48.7171},
{2066.2002,-992.5225,48.7995},
{2090.5471,-973.8928,51.8972},
{2089.6091,-995.0759,52.4970},
{2122.1785,-970.2204,58.2074},
{2131.7502,-973.8472,59.7856},
{2109.0620,-1000.1406,60.5078},
{2139.7986,-1008.1021,61.7092},
{2142.9690,-978.9559,61.3793},
{2153.4136,-979.6675,63.2934},
{2152.5415,-1013.8476,62.8475},
{2186.3887,-997.3067,66.4688},
{2202.4312,-1023.8345,61.3960},
{2207.9580,-1025.6820,60.9217},
{2193.7937,-1000.7067,62.6111},
{2219.0115,-1030.7517,59.9857},
{2259.3462,-1019.8831,59.2920},
{2249.4504,-1060.1216,55.9688},
{2279.0381,-1076.9962,47.7411},
{2287.8083,-1080.3020,47.5714},
{2284.2012,-1046.5428,49.8871},
{2297.7478,-1053.1121,49.9340},
{2329.9709,-1059.8435,52.3516},
{2319.5208,-1054.3153,52.3582},
{2335.5051,-1045.2389,52.3582},
{2347.3765,-1047.1581,53.7691},
{2351.1802,-1040.7104,54.0662},
{2356.4514,-1059.1893,53.9601},
{2362.8625,-1047.4332,54.1484},
{2370.3030,-1034.8829,54.4106},
{2373.5032,-1051.9064,54.1263},
{2389.5012,-1038.7843,53.5835},
{2220.4958,-1083.1105,41.7734},
{2207.4055,-1100.7584,31.5547},
{2145.4631,-1085.7194,24.7185},
{2140.9246,-1083.3591,24.4967},
{2109.3357,-1081.9839,24.8893},
{2102.0684,-1075.4980,25.7884},
{2135.5225,-1072.8362,27.3167},
{2105.5530,-1056.7963,27.0608},
{2099.9282,-1052.8722,28.2668},
{2094.0889,-1048.1097,29.6332},
{2082.8000,-1040.5320,31.7906},
{2154.6367,-1070.9220,39.1645},
{2188.9626,-1081.5895,43.8327},
{2093.9285,-1122.8882,27.6899},
{2094.9021,-1145.0352,26.5929},
{2091.8853,-1166.2972,26.5859},
{2091.5254,-1185.0768,27.0571},
{2091.0056,-1234.2344,25.4775},
{2110.9624,-1244.3993,25.8516},
{2133.5081,-1232.9583,24.4219},
{2153.9902,-1243.4674,25.3672},
{2209.6799,-1240.1494,24.4801},
{2192.0969,-1239.0763,24.4879},
{2229.5911,-1241.6091,25.6563},
{2249.1462,-1238.4746,25.8984},
{2251.1108,-1281.0406,25.4766},
{2229.8552,-1280.0692,25.6285},
{2207.4700,-1280.8221,25.1207},
{2191.8760,-1275.6024,25.1563},
{2150.2009,-1285.0421,24.5269},
{2132.4556,-1280.7003,25.8906},
{2111.4897,-1280.7864,25.6875},
{2092.2498,-1278.7106,26.1847},
{2100.4487,-1321.1367,25.9531},
{2127.1797,-1320.4170,26.6247},
{2148.3687,-1320.0743,26.0738},
{2202.5027,-1363.7223,26.1910},
{2185.6221,-1363.8649,26.1598},
{2148.2815,-1366.1348,25.9723},
{2129.7009,-1361.8267,26.1363},
{2150.0391,-1399.9178,25.7980},
{2150.9163,-1418.6345,25.9219},
{2148.5142,-1432.6052,25.5391},
{2151.1455,-1446.4401,25.7746},
{2146.0457,-1470.2224,25.5467},
{2148.3936,-1484.8153,26.6241},
{2191.0938,-1470.4491,25.9141},
{2195.2673,-1443.0706,25.5391},
{2192.4487,-1456.0082,25.5391},
{2190.0950,-1418.8384,26.0621},
{2230.4666,-1408.2581,24.0000},
{2196.8398,-1403.9972,25.6183},
{2244.2710,-1408.1962,24.0000},
{2256.5884,-1407.7983,24.0000},
{2263.3481,-1457.4063,24.0070},
{2247.8835,-1458.5284,24.0216},
{2415.9902,-1548.1371,24.1641},
{2232.6504,-1458.4994,24.0169},
{2411.2178,-1548.2263,24.1641},
{2403.1917,-1548.2887,24.1641},
{2396.8933,-1548.3792,24.1641},
{2388.2346,-1548.5487,24.1641},
{2383.9492,-1545.9674,24.1641},
{2383.8352,-1541.3837,24.1641},
{2481.6802,-1536.3917,24.1025},
{2472.7151,-1528.9712,24.1732},
{2473.2690,-1523.4069,24.1843},
{2468.1245,-1432.4557,28.8438},
{2473.0625,-1432.8043,28.8438},
{2476.5242,-1432.7244,28.8438},
{2487.1541,-1432.5292,28.8438},
{2491.4717,-1432.3389,28.8438},
{2495.0408,-1432.7007,28.8438},
{2496.2476,-1423.3169,28.8438},
{2494.8191,-1418.0403,28.8377},
{2490.7896,-1418.3149,28.8378},
{2491.3220,-1422.1152,28.8438},
{2486.8943,-1423.4362,28.8438},
{2486.2510,-1418.3433,28.8378},
{2476.6313,-1423.8762,28.8405},
{2476.5049,-1418.4518,28.8379},
{2473.3071,-1418.6294,28.8380},
{2472.4031,-1423.2247,28.8402},
{2467.7622,-1424.0959,28.8406},
{2468.0105,-1419.0062,28.8382},
{2468.3640,-1409.6221,28.8336},
{2473.2664,-1409.4637,28.8335},
{2476.1194,-1409.4312,28.8335},
{2488.0461,-1409.5242,28.8376},
{2492.7144,-1409.6421,28.8388},
{2495.5471,-1409.9182,28.8395},
{2495.4836,-1399.2114,28.8394},
{2491.9866,-1399.7323,28.8386},
{2486.7881,-1399.2451,28.8373},
{2477.0776,-1399.6239,28.8349},
{2472.5955,-1399.4918,28.8338},
{2468.2246,-1399.5560,28.8281},
{2467.7925,-1391.1414,28.8281},
{2472.9053,-1390.8746,28.8339},
{2476.1057,-1390.9985,28.8347},
{2486.9929,-1390.7382,28.8374},
{2491.7871,-1391.0348,28.8385},
{2495.5059,-1391.0160,28.8394},
{2495.7104,-1384.3149,28.8395},
{2492.2275,-1384.2931,28.8386},
{2487.2856,-1383.8616,28.8374},
{2476.2920,-1384.1116,28.8347},
{2472.6409,-1383.9735,28.8339},
{2468.2119,-1384.0585,28.8281},
{2468.2578,-1375.7610,28.8281},
{2472.8406,-1375.6228,28.8339},
{2476.2039,-1375.5868,28.8347},
{2486.7354,-1375.5952,28.8373},
{2491.9846,-1375.5763,28.8386},
{2495.5732,-1375.6489,28.8395},
{2495.4683,-1366.8827,28.8394},
{2491.8083,-1366.6360,28.8385},
{2486.7517,-1366.6324,28.8373},
{2477.1663,-1366.8119,28.8350},
{2472.4370,-1366.7841,28.8279},
{2467.6846,-1366.8516,28.8278},
{2439.7947,-1357.2438,24.1009},
{2439.9536,-1339.0063,24.1016},
{2434.5100,-1321.0225,24.9300},
{2434.2332,-1303.2382,24.9723},
{2435.3374,-1289.4485,25.3479},
{2433.7998,-1274.9723,24.7567},
{2388.1812,-1279.2147,25.1291},
{2387.5664,-1328.4708,25.1242},
{2383.3157,-1366.0577,24.4914},
{2389.6868,-1345.9506,25.0770},
{2333.5012,-1264.8905,27.9693},
{2339.2783,-1265.0714,27.9693},
{2347.5986,-1264.8422,27.9766},
{2347.6411,-1252.4369,27.9693},
{2339.0498,-1250.0739,27.9766},
{2330.0305,-1250.0044,27.9766},
{2328.4277,-1233.9554,27.9766},
{2333.7932,-1234.1803,27.9766},
{2346.1719,-1234.2865,27.9693},
{2346.5330,-1218.8749,27.9766},
{2339.9844,-1220.1554,27.9766},
{2324.2068,-1219.4347,27.9766},
{2468.8755,-1278.9673,30.3664},
{2470.3186,-1296.1990,30.2332},
{2472.7539,-1239.7493,32.2269},
{2492.6860,-1239.0134,37.9054},
{2514.6343,-1241.2513,39.0223},
{2529.9058,-1243.6757,43.6563},
{2551.4844,-1233.8207,49.3318},
{2550.4395,-1197.1332,60.8186},
{2520.6929,-1197.5800,56.5703},
{2467.5476,-1200.2738,36.8117},
{2598.9548,-1233.2467,49.8203},
{2596.3850,-1237.9540,48.4219},
{2596.4546,-1229.3232,51.0469},
{2599.2334,-1224.9578,52.3507},
{2596.5110,-1220.8601,53.6607},
{2599.2593,-1216.5028,54.9766},
{2596.1067,-1212.3531,56.3750},
{2600.2280,-1207.5636,57.5078},
{2596.2698,-1204.0099,58.4126},
{2599.6685,-1199.9631,59.2188},
{2613.7419,-1199.0551,60.8167},
{2609.2644,-1203.3293,60.0000},
{2614.0615,-1208.1653,59.0703},
{2609.4954,-1211.7793,57.9375},
{2613.8853,-1216.1000,56.5391},
{2609.9341,-1220.0450,55.1875},
{2613.6379,-1224.8252,53.8984},
{2609.9590,-1228.6610,52.6094},
{2614.3152,-1233.4802,51.3828},
{2614.3152,-1233.4802,51.3828},
{2609.4695,-1237.9918,49.9844},
{2546.7224,-1291.5343,41.1717},
{2534.6709,-1315.3505,38.8480},
{2548.9216,-1333.0157,34.0248},
{2536.9978,-1372.5769,29.1762},
{2542.0930,-1359.3170,30.9987},
{2708.6509,-1238.5891,59.5469},
{2708.3967,-1229.3143,62.1719},
{2708.1982,-1233.8651,60.9375},
{2707.9570,-1224.8921,63.4531},
{2708.2351,-1220.8889,64.7422},
{2707.9580,-1216.7592,66.0938},
{2707.8533,-1211.7258,67.4922},
{2708.4253,-1208.4305,68.6328},
{2708.2988,-1203.4229,69.5547},
{2708.1514,-1200.5571,70.3359},
{2699.4021,-1199.7139,68.7934},
{2692.2229,-1203.3320,67.5725},
{2698.3835,-1207.2111,67.0200},
{2692.4082,-1211.2577,65.5280},
{2698.3054,-1215.5653,64.4773},
{2692.7324,-1220.0354,62.7997},
{2699.0398,-1224.6779,61.8830},
{2691.4329,-1228.9254,60.1516},
{2699.3218,-1233.9054,59.3949},
{2691.4441,-1237.3414,57.5255},
{2681.7905,-1233.9672,57.3123},
{2671.3103,-1238.7902,55.6880},
{2671.2629,-1229.2537,58.3750},
{2682.1121,-1225.1888,59.8335},
{2670.9558,-1220.7961,60.9115},
{2681.6548,-1216.3995,62.4590},
{2670.8840,-1212.1232,63.6488},
{2670.8254,-1202.9915,65.7485},
{2682.1570,-1208.0031,64.9988},
{2682.7280,-1200.0162,66.7120},
{2611.5083,-1200.0719,60.7813},
{2611.7202,-1203.4008,60.0000},
{2611.8071,-1207.7474,59.0703},
{2611.8740,-1212.3715,57.9375},
{2611.9407,-1216.9476,56.5391},
{2611.9968,-1220.7561,55.1875},
{2612.0532,-1224.6199,53.8984},
{2612.1094,-1228.5476,52.6094},
{2612.1689,-1232.6211,51.4141},
{2612.2405,-1237.5710,49.9844}
};
new Itens[][enum_Itens] =
{
	{0,	 ITEM_TYPE_NORMAL,		19382,	"Nada",				0,	false,	{0.0,0.0,0.0,0.0},	"N/A"},

	{1,	 ITEM_TYPE_HELMET, 		18645,	"Capacete NV.1",	1,	true,	{0.000000, 0.000000, 0.000000, 0.500000},	"Baixa proteção contra tiros"},
	{2,	 ITEM_TYPE_HELMET,		19514,	"Capacete NV.2",	1,	true,	{0.000000, -90.000000, 0.000000, 0.500000},	"Média proteção contra tiros"},
	{3,	 ITEM_TYPE_HELMET,		19101,	"Capacete NV.3",	1,	true,	{0.000000, -90.000000, 0.000000, 0.500000},	"Alta proteção contra tiros"},

	{4,  ITEM_TYPE_BODY,		19904,	"Colete NV.1", 		1, 	true,   {0.000000, 90.000000, 0.000000, 0.800000},   "Baixa proteção contra tiros"},
	{5,  ITEM_TYPE_BODY,		373, 	"Colete NV.2", 		1,	true,	{0.000000, 90.000000, 0.000000, 0.800000},	"Media proteção contra tiros"},
	{6,  ITEM_TYPE_BODY,		19142,	"Colete NV.3", 		1,  true,   {0.000000, -90.000000, 0.000000, 0.800000},   "Alta proteção contra tiros"},

	{7,  ITEM_TYPE_BACKPACK,	19559,	"Mochila NV.1", 	1,  true,   {0.000000, 0.000000, 0.000000, 1.000000}, 	"Mochila Pequena"},
	{8,  ITEM_TYPE_BACKPACK,	3026, 	"Mochila NV.2",		1,	true,	{0.000000, 0.000000, 0.000000, 1.000000}, 	"Mochila Media"},
	{9,  ITEM_TYPE_BACKPACK,	371, 	"Mochila NV.3",		1,	true,	{0.000000, 0.000000, 0.000000, 1.000000}, 	"Mochila Grande"},

	{10, ITEM_TYPE_WEAPON, 		348, 	"Desert Eagle", 	1, 	true,	{0.000000, -30.00000, 0.000000, 1.200000}, 	"Pistola 50mm"},
    {11, ITEM_TYPE_WEAPON, 		346, 	"Colt M1911", 		1, 	true,	{0.000000, -30.00000, 0.000000, 1.200000}, 	"Pistola 9mm"},
	{12, ITEM_TYPE_WEAPON, 		356, 	"M4A1", 			1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Fuzil calibre 5.56"},
	{13, ITEM_TYPE_WEAPON,		355, 	"AK47", 			1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Fuzil calibre 7.62"},
	{14, ITEM_TYPE_WEAPON, 		358, 	"Remington", 		1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Rifle calibre 7.62"},
	{15, ITEM_TYPE_WEAPON, 		349, 	"Escopeta", 		1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Escopeta de Caça"},
	{16, ITEM_TYPE_WEAPON,		351,	"Spas", 			1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Escopeta Automatica"},
	{17, ITEM_TYPE_WEAPON, 		352, 	"UZI", 				1, 	true,	{0.000000, -30.00000, 0.000000, 1.200000}, 	"Sub Metralhadora dupla 9mm"},
	{18, ITEM_TYPE_WEAPON, 		353, 	"MP5", 				1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Sub Metralhadora 9mm"},
	{19, ITEM_TYPE_WEAPON, 		342, 	"Granada", 			5,	true,	{0.000000, 0.000000, 0.000000, 1.000000}, 	"Dispositivo Explosivo"},
	{20, ITEM_TYPE_WEAPON, 		344, 	"Molotov", 			5,	true,	{0.000000, 0.000000, 0.000000, 1.000000}, 	"Dispositivo Incendiario"},

	{21, ITEM_TYPE_MELEEWEAPON,	335, 	"Faca", 			1, 	true,	{0.000000, -30.00000, 0.000000, 2.200000}, 	"Arma branca cortante"},
	{22, ITEM_TYPE_MELEEWEAPON,	334, 	"Cacetete", 		1, 	true,	{0.000000, -30.00000, 0.000000, 1.500000}, 	"Arma branca "},

	{23, ITEM_TYPE_NORMAL, 		11738, 	"Kit Médico", 		5,	true,	{0.000000, 0.000000, 0.000000, 1.000000}, 	"Kit de primeiro socorros"},
	{24, ITEM_TYPE_AMMO, 		2061, 	"Munição", 		   200,	true,	{0.000000, 0.000000, 0.000000, 2.000000},	"Munição para qualquer calibre"}
};

new pInventory[MAX_PLAYERS][enum_pInventory];
new pCharacter[MAX_PLAYERS][enum_pCharacter];
new Player[MAX_PLAYERS][enum_Player];
new ItensWorld[MAX_ITENS_WORLD][enum_ItensWorld];
new LastItemID;

//===== CARGOS =====
#define JOGADOR 			0
#define TESTADOR			1
#define AJUDANTE   			2
#define MODERADOR 			3
#define ADMINISTRADOR    	4
#define FUNDADOR            5

#define MAX_ADMINS 20

#define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
#define Ban(%0) SetTimerEx("Bana", 100, false, "i", %0)

#define SR::%0(%1) 		forward %0(%1);\
							public %0(%1)

forward ZerarAntiFlood(playerid);
forward @TimerOneSecond();
forward HideMessageInventory(playerid);
forward Float:GetPlayerArmourEx(playerid);
forward Relogio(playerid);

new AntiFlood[MAX_PLAYERS];
new bool:votou[MAX_PLAYERS];
new votacao[e_votacao];

//new Flood[MAX_PLAYERS];
new MEGAString[2500];
new MySQL:IDConexao; // Variavel responsavel pela ID da conexão com o host

new PlayerInfo[MAX_PLAYERS][pInfo];
//new giveplayer[MAX_PLAYER_NAME];
new sendername[MAX_PLAYER_NAME];
//new giveplayerid;

//===== ARRAYS =====
/*new Float:SpawnAleatorio[2][3] =
{
	{0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0}
};*/
//new rand = random(sizeof(SpawnAleatorio));
//SetPlayerPos(playerid, RandomSpawns[rand][0], RandomSpawns[rand][1], RandomSpawns[rand][2]);

//===== VARIAVEIS =====
//Relogio
new Text:Data;
new Text:Hora;
//TelaDeLoad
new Text:CARREGANDO1;
new Text:CARREGANDO2;
//Inventario
new String[256];
//NPC
new Aviao;
//Partida
new bool:ComecouPartida;
new TimerPartida[MAX_PLAYERS];
new TimerLoading[MAX_PLAYERS];
new TimerCarregar[MAX_PLAYERS];
new TimerCarregado[MAX_PLAYERS];
//new JogadoresDaPartida[2];
//new bool:PartidaIniciada[MAX_PLAYERS];
//Actor
//new PolicialBatida1;
new PlayerText:inventario_index[MAX_PLAYERS][15];
new PlayerText:inventario_skin[MAX_PLAYERS];
new PlayerText:inventario_textos[MAX_PLAYERS][11];
new PlayerText:inventario_description[MAX_PLAYERS][4];
new PlayerText:inventario_personagemindex[MAX_PLAYERS][7];
new PlayerText:inventario_mensagem[MAX_PLAYERS];

new Text:inventario_usar;
new Text:inventario_split[2];
new Text:inventario_drop[2];
new Text:inventario_close[2];
new Text:inventario_backgrounds[5];
new Text:inventario_remover;

//Tela De Fundo
new Text:ImagemEntrada;

//Players Vivos
new Text:VIVOS;

//Mapa
new Text:MAPA;
new Text:FECHARMAPA;

//Menu Principal
new Text:FUNDO1;
new Text:FUNDO2;
new Text:FUNDO3;
new Text:FUNDOPLAY1;
new Text:FUNDOPLAY2;
new Text:PLAYSOLO;
new Text:FUNDOSKIN1;
new Text:FUNDOSKIN2;
new Text:SKIN;
new Text:TXTNOME;
new Text:TXTNIVEL;
new Text:TXTKILLS;
new Text:TXTDEATHS;
new Text:TXTWINS;
new Text:FUNDODUO1;
new Text:FUNDODUO2;
new Text:PLAYDUO;
new Text:FUNDOSQUAD1;
new Text:FUNDOSQUAD2;
new Text:PLAYSQUAD;
new Text:GTA;
new Text:SANROYALE;
new Text:TXTVERSION;
new Text:TCCPROJECT;
new Text:TXTDINHEIRO;
new Text:FUNDOLOJA1;
new Text:FUNDOLOJA2;
new Text:BTNLOJA;
new Text:TXTLOJA;

//Loja
new Text:FUNDOMERCADO1;
new Text:FUNDOMERCADO2;
new Text:FUNDOMERCADO3;
new Text:FUNDOTITULO1;
new Text:FUNDOTITULO2;
new Text:FUNDOTITULO3;
new Text:TXTMERCADO;
new Text:FUNDOFECHAR;
new Text:BTNFECHAR;

//TelaDeBan
new Text:FUNDOBAN1;
new Text:FUNDOBAN2;
new Text:FUNDOBAN3;
new Text:FUNDOBAN4;
new Text:FUNDOBAN5;
new Text:FUNDOBAN6;
new Text:TXTBANIDO;
new Text:TXTNOMEBAN;
new Text:TXTMOTIVO;
new Text:DIV1;
new Text:DIV2;
new Text:TXTJUST;
new Text:TXTSITE;
new Text:TXTASS;
new Text:NOMEBAN;
new Text:MOTIVOBAN;

//TelaDeVotacao
new Text:FUNDOVOTE1;
new Text:FUNDOVOTE2;
new Text:FUNDOVOTE3;
new Text:TXTVOTACAO1;
new Text:TXTVOTACAO2;
new Text:TXTVOTACAO3;
new Text:NICKVOTE;

//TelaDeDerrota
new Text:FUNDODERROTA1;
new Text:FUNDODERROTA2;
new Text:FUNDODERROTA3;
new Text:MSGDERROTA1;
new Text:MSGDERROTA2;
new Text:TXTRANKDERROTA;
new Text:TXTQUEMMATOU;
new Text:SKINGALINHA;
new Text:FUNDOBTNMENUDER1;
new Text:FUNDOBTNMENUDER2;
new Text:BTNMENUDER;

//TelaDeVitoria
new Text:FUNDOVITORIA1;
new Text:FUNDOVITORIA2;
new Text:FUNDOVITORIA3;
new Text:MSGVITORIA1;
new Text:MSGVITORIA2;
new Text:TXTRANKVITORIA;
new Text:SKINGALINHA2;
new Text:FUNDOBTNMENUVIT1;
new Text:FUNDOBTNMENUVIT2;
new Text:BTNMENUVIT;

new bool:bloquear_chat;
new MensagemDesligou = 0;
new BigEar[MAX_PLAYERS];


//===== FUNÇÕES =====
//Partida
/*stock SetPlayerMatch(playerid)
{
    SetPlayerHealth(playerid, 100);
    ResetPlayerWeapons(playerid);
    SetPlayerVirtualWorld(playerid, 0);
}
stock matchPlayerWin(playerid)
{
	new string[128];

	format(string, sizeof string, "WINNER WINNER!!! %s VENCEU A BATALHA!", PlayerInfo[playerid][pNome]);
 	SendClientMessageToAll(COR_VERDE, string);
	return 1;
}*/

//ConversorDeDinheiro
stock ConvertMoney(number)
{
    new real,mil,milhao,milhaor,bilhao,bilhaor,string[100];
    if(number > 999999999)
    {
        bilhao = number / 1000000000;
        bilhaor = number % 1000000000;
        milhao =  bilhaor / 1000000;
        milhaor = bilhaor % 1000000;
        mil = milhaor / 1000;
        real = milhaor % 1000;
    }
    else if(number > 999999)
    {
        milhao = number / 1000000;
        milhaor = number % 1000000;
        mil = milhaor / 1000;
        real = milhaor % 1000;
    }
    else if(number > 999)
    {
        mil = number / 1000;
        real = number % 1000;
    }
    if(number > 999999999)
    {
        format(string, 100, "%d.%03d.%03d.%03d", bilhao, milhao, mil, real);
    }
    else if(number > 999999)
    {
        format(string, 100, "%d.%03d.%03d", milhao, mil, real);
    }
    else if(number > 999)
    {
        format(string, 100, "%d.%03d", mil, real);
    }
    else
    {
        format(string, 100, "%d", number);
    }
    return string;
}
//MESAGES
stock MessageToPlayers(cor, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pStaff] >= 0)
	        {
	        	SendClientMessage(i, cor, string);
        	}
     	}
	}
	return 1;
}
stock MessageToAdmins(cor, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pStaff] >= 3)
            {
                SendClientMessage(i, cor, string);
            }
        }
    }
    return 1;
}
stock MessageToHelpers(cor, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pStaff] == 2)
	        {
				SendClientMessage(i, cor, string);
	        }
		}
	}
	return 1;
}
stock SendClientMessageInRange(Float:_r, playerid, _s[],c1,c2,c3,c4,c5)
{
	new Float:_x, Float:_y, Float:_z;
	GetPlayerPos(playerid, _x, _y, _z);
	foreach(Player, i)
	{
		if(!BigEar[i])
		{
		    if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))continue;
			if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/16)
				SendClientMessage(i, c1, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/8)
				SendClientMessage(i, c2, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/4)
				SendClientMessage(i, c3, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/2)
				SendClientMessage(i, c4, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r)
				SendClientMessage(i, c5, _s);
		}
		else
		{
			SendClientMessage(i, c1, _s);
		}
	}
	return true;
}
//MySQL
	stock RegistrarDados(playerid)
	{  //Aqui adicionaremos os valores das variaveis que o player ira inicio no servidor
	    PlayerInfo[playerid][pDinheiro] = 1000; // ou seja começara com 1000 reais
	    PlayerInfo[playerid][pStaff] = 0; // sem nivel de admin
	    PlayerInfo[playerid][pLevel] = 1; // 1 level
	    PlayerInfo[playerid][pSkin] = 0; // skin 0 CJ
	    PlayerInfo[playerid][pMorreu] = 0; // ....
	    PlayerInfo[playerid][pMatou] = 0; // ....
	    PlayerInfo[playerid][pVitorias] = 0;
	    PlayerInfo[playerid][pBanido] = 0;
	    CarregarDados(playerid); //chamamos a função CarregarDados
	    return 1;
	}
	stock CarregarDados(playerid)
	{ // aqui carregaremos os ultimos dados das variaveis
		if(PlayerInfo[playerid][pStaff] == 5)
		{
			SetPlayerColor(playerid, 0xFF0000FF);
		}
		else if(PlayerInfo[playerid][pStaff] == 4)
		{
			SetPlayerColor(playerid, COLOR_ADMIN);
		}
		else if(PlayerInfo[playerid][pStaff] == 3)
		{
			SetPlayerColor(playerid, COLOR_MODERADOR);
		}
		else if(PlayerInfo[playerid][pStaff] == 2)
		{
			SetPlayerColor(playerid, COLOR_AJUDANTE);
		}
		else if(PlayerInfo[playerid][pStaff] <= 1)
		{
			SetPlayerColor(playerid, 0xFFFFFFFF);
		}

		if(PlayerInfo[playerid][pBanido] >= 1)
	    {
	        new Str1[128], Str2[128];
	        SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Sua conta esta banida e não podes logar!");
         	TextDrawShowForPlayer(playerid, FUNDOBAN1);
			TextDrawShowForPlayer(playerid, FUNDOBAN2);
			TextDrawShowForPlayer(playerid, FUNDOBAN3);
			TextDrawShowForPlayer(playerid, FUNDOBAN4);
			TextDrawShowForPlayer(playerid, FUNDOBAN5);
			TextDrawShowForPlayer(playerid, FUNDOBAN6);
			TextDrawShowForPlayer(playerid, TXTBANIDO);
			TextDrawShowForPlayer(playerid, TXTNOMEBAN);
			TextDrawShowForPlayer(playerid, TXTMOTIVO);
			TextDrawShowForPlayer(playerid, DIV1);
			TextDrawShowForPlayer(playerid, DIV2);
			TextDrawShowForPlayer(playerid, TXTJUST);
			TextDrawShowForPlayer(playerid, TXTSITE);
			TextDrawShowForPlayer(playerid, TXTASS);
			TextDrawShowForPlayer(playerid, NOMEBAN);
			TextDrawShowForPlayer(playerid, MOTIVOBAN);
         	format(Str1,sizeof(Str1),"%s",PlayerInfo[playerid][pNome]);
         	format(Str2,sizeof(Str2),"%s",PlayerInfo[playerid][pMotivo]);
			TextDrawSetString(NOMEBAN,Str1);
			TextDrawSetString(MOTIVOBAN,Str2);
		 	Kick(playerid);
	    }
	    else{
	    	PlayerInfo[playerid][pLogado] = true;
	    	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]); // setamos o level
	    	GivePlayerMoney(playerid, PlayerInfo[playerid][pDinheiro]); // o dinheiro
	    	TextDrawShowForPlayer(playerid, CARREGANDO1);
	    	new rand = random(14), str[30];
			format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
			TextDrawSetString(CARREGANDO2, str);
			TextDrawShowForPlayer(playerid, CARREGANDO2);
			TimerLoading[playerid] = SetTimerEx("Loading",segundos(5),false, "i",playerid);
	    	//SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0.0,0,0,0,0,0,0);
	    	//SpawnPlayer(playerid); // forçamos o player a spawnar nas cordenas acima com as infos setadas nas variaveis
	    }
	    return 1;
	}
	stock SalvarInfos(playerid)
	{
	    if(PlayerInfo[playerid][pLogado] == false) return 1; // se o player nao estiver logado não ira salvar nada
	    PlayerInfo[playerid][pDinheiro] = GetPlayerMoney(playerid);
	    new Query[350]; // variavel com 350 celulas para salvamento
	    mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Nome`='%s',`Level`=%d,`Vitorias`=%d,`Staff`=%d,`Cargo`='%s',`Skin`=%d,`Matou`=%d,`Morreu`=%d,`Dinheiro`=%d,`Banido`=%d,`Motivo`='%s' WHERE `ID`=%d",
	    PlayerInfo[playerid][pNome],
	    PlayerInfo[playerid][pLevel],
	    PlayerInfo[playerid][pVitorias],
	    PlayerInfo[playerid][pStaff],
	    PlayerInfo[playerid][pCargo],
	    PlayerInfo[playerid][pSkin],
	    PlayerInfo[playerid][pMatou],
	    PlayerInfo[playerid][pMorreu],
	    PlayerInfo[playerid][pDinheiro],
	    PlayerInfo[playerid][pBanido],
	    PlayerInfo[playerid][pMotivo],
	    PlayerInfo[playerid][pID]);
	    // formatamos a Query referente a ID da conta (WHERE `ID`=%d) e realizaremos a consulta para atualizar os dados no banco de dados
	    mysql_tquery(IDConexao, Query, "DadosSalvos","d", playerid); // consulta, e enviamos o resultado para a callback DadosSalvos para um DEBUG

        PlayerInfo[playerid][pLevel] = 0; // resetamos as variaveis.
	    PlayerInfo[playerid][pStaff] = 0;
	    PlayerInfo[playerid][pCargo] = 0;
	    PlayerInfo[playerid][pMatou] = 0;
	    PlayerInfo[playerid][pMorreu] = 0;
	    PlayerInfo[playerid][pDinheiro] = 0;
	    PlayerInfo[playerid][pVitorias] = 0;
	    PlayerInfo[playerid][pBanido] = 0;
	    PlayerInfo[playerid][pMotivo] = 0;
	    PlayerInfo[playerid][pLogado] = false;






		return 1;
	}
	stock SalvarDinheiro(playerid)
	{
	    if(PlayerInfo[playerid][pLogado] == false) return 1; // se o player nao estiver logado não ira salvar nada
	    PlayerInfo[playerid][pDinheiro] = GetPlayerMoney(playerid);
	    new Query[100];
		mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Dinheiro`=%d, WHERE `Nome`='%s'", PlayerInfo[playerid][pDinheiro], PlayerInfo[playerid][pNome]);
	    return 1;
	}
	stock SalvarDados(playerid)
	{
	    if(PlayerInfo[playerid][pLogado] == false) return 1; // se o player nao estiver logado não ira salvar nada
	    PlayerInfo[playerid][pDinheiro] = GetPlayerMoney(playerid);
	    new Query[350]; // variavel com 350 celulas para salvamento
	    mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Nome`='%s',`Level`=%d,`Vitorias`=%d,`Staff`=%d,`Cargo`='%s',`Skin`=%d,`Matou`=%d,`Morreu`=%d,`Dinheiro`=%d,`Banido`=%d,`Motivo`='%s' WHERE `ID`=%d",
	    PlayerInfo[playerid][pNome],
	    PlayerInfo[playerid][pLevel],
	    PlayerInfo[playerid][pVitorias],
	    PlayerInfo[playerid][pStaff],
	    PlayerInfo[playerid][pCargo],
	    PlayerInfo[playerid][pSkin],
	    PlayerInfo[playerid][pMatou],
	    PlayerInfo[playerid][pMorreu],
	    PlayerInfo[playerid][pDinheiro],
	    PlayerInfo[playerid][pBanido],
	    PlayerInfo[playerid][pMotivo],
	    PlayerInfo[playerid][pID]);
	    // formatamos a Query referente a ID da conta (WHERE `ID`=%d) e realizaremos a consulta para atualizar os dados no banco de dados
	    mysql_tquery(IDConexao, Query, "DadosSalvos","d", playerid); // consulta, e enviamos o resultado para a callback DadosSalvos para um DEBUG


		PlayerInfo[playerid][pLevel] = 0; // resetamos as variaveis.
	    PlayerInfo[playerid][pStaff] = 0;
	    PlayerInfo[playerid][pCargo] = 0;
	    PlayerInfo[playerid][pMatou] = 0;
	    PlayerInfo[playerid][pMorreu] = 0;
	    PlayerInfo[playerid][pDinheiro] = 0;
	    PlayerInfo[playerid][pVitorias] = 0;
	    PlayerInfo[playerid][pBanido] = 0;
	    PlayerInfo[playerid][pMotivo] = 0;
	    PlayerInfo[playerid][pLogado] = false;
    	return 1;
	}

public OnGameModeInit()
{
	SetGameModeText("Battle Royale");
    IDConexao = mysql_connect(HOST, USUARIO, SENHA, DATABASE); // faremos a conexão ao host com as informações definidas acima
	mysql_query(IDConexao, "CREATE TABLE IF NOT EXISTS `Contas`(`id`int AUTO_INCREMENT PRIMARY KEY, `nome` varchar(25) NOT NULL DEFAULT ' ',`senha` varchar(20) NOT NULL DEFAULT ' ',`level` int(4) NOT NULL DEFAULT 0,`dinheiro` int(20) NOT NULL DEFAULT 0,`matou` int(5) NOT NULL DEFAULT 0,`morreu` int(5) NOT NULL DEFAULT 0,`skin` int(4) NOT NULL DEFAULT 0,`vitorias` int(5) NOT NULL DEFAULT 0 ,`staff` int(2) NOT NULL DEFAULT 0,`cargo` varchar(50) NOT NULL DEFAULT ' ',`banido` int(2) NOT NULL DEFAULT 0, `motivo` varchar(128) NOT NULL DEFAULT ' ')", false);
	if(mysql_errno(IDConexao) != 0) // Ultilizo essa maneira para saber se a conexão foi bem sucedida ou não
	    {
	        print("[OFF] Falha na conexão ao banco de dados Mysql");
	        } else {
	        print("[ON] Conexão ao banco de dado Mysql efetuada com sucesso");
	    }
//PontosDeOnibus
	CreateDynamicObject(1257, 1797.9, -1826.1, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (1)
	CreateDynamicObject(1257, 1237.6, -1846, 13.7, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (2)
	CreateDynamicObject(1257, 1154.9, -1718.5, 14, 0, 0, 270, -1, -1, -1, 200.0, 0.0); // object (bustopm) (3)
	CreateDynamicObject(1257, 1255.1, -1566, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (4)
	CreateDynamicObject(1257, 1032.3, -1549.2, 13.8, 0, 0, 175, -1, -1, -1, 200.0, 0.0); // object (bustopm) (5)
	CreateDynamicObject(1257, 911.20001, -1549.2, 13.8, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (6)
	CreateDynamicObject(1257, 804.09998, -1744.9, 13.7, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (7)
	CreateDynamicObject(1257, 875, -1791.4, 14, 0, 0, 267, -1, -1, -1, 200.0, 0.0); // object (bustopm) (8)
	CreateDynamicObject(1257, 1201, -930.40002, 43.2, 0, 0, 98.75, -1, -1, -1, 200.0, 0.0); // object (bustopm) (10)
	CreateDynamicObject(1257, 1224.4, -948.79999, 43, 0, 0, 280.25, -1, -1, -1, 200.0, 0.0); // object (bustopm) (11)
	CreateDynamicObject(1257, 1450.8, -1040.2, 24.1, 0, 0, 270, -1, -1, -1, 200.0, 0.0); // object (bustopm) (12)
	CreateDynamicObject(1257, 1641.7, -1167.1, 24.3, 0, 0, 270, -1, -1, -1, 200.0, 0.0); // object (bustopm) (13)
	CreateDynamicObject(1257, 1920.5, -1142, 25.3, 0, 0, 269.75, -1, -1, -1, 200.0, 0.0); // object (bustopm) (14)
	CreateDynamicObject(1257, 2011.2, -1254.7, 24.3, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (15)
	CreateDynamicObject(1257, 1827.2, -1254.7, 13.9, 0, 0, 90.25, -1, -1, -1, 200.0, 0.0); // object (bustopm) (16)
	CreateDynamicObject(1257, 1858.1, -1373.2, 13.8, 0, 0, 0.5, -1, -1, -1, 200.0, 0.0); // object (bustopm) (17)
	CreateDynamicObject(1257, 1840.6, -1403.8, 13.8, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (18)
	CreateDynamicObject(1257, 2008, -1472.1, 13.8, 0, 0, 270, -1, -1, -1, 200.0, 0.0); // object (bustopm) (19)
	CreateDynamicObject(1257, 2106.6001, -1378.1, 24.2, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (20)
	CreateDynamicObject(1257, 2218.8, -1469.2, 24.3, 0, 0, 0, -1, -1, -1, 200.0, 0.0); // object (bustopm) (21)
	CreateDynamicObject(1257, 2264.7, -1321.5, 24.3, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (22)
	CreateDynamicObject(1257, 2231.8999, -1127.4, 26.1, 0, 0, 62, -1, -1, -1, 200.0, 0.0); // object (bustopm) (23)
	CreateDynamicObject(1257, 2691.3999, -1161.9, 54, 0, 0, 270.25, -1, -1, -1, 200.0, 0.0); // object (bustopm) (24)
	CreateDynamicObject(1257, 2894.3, -1116.1, 11.3, 0, 0, 0, -1, -1, -1, 200.0, 0.0); // object (bustopm) (25)
	CreateDynamicObject(1257, 2835.3, -1651.4, 11.3, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (26)
	CreateDynamicObject(1257, 2844.3, -1142.9, 25.2, 0, 0, 2, -1, -1, -1, 200.0, 0.0); // object (bustopm) (28)
	CreateDynamicObject(1257, 2636.5, -1093.6, 69.9, 0, 0, 180.75, -1, -1, -1, 200.0, 0.0); // object (bustopm) (29)
	CreateDynamicObject(1257, 2636.8, -1411.9, 30.5, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (30)
	CreateDynamicObject(1257, 2637, -1639.6, 11.1, 0, 0, 180, -1, -1, -1, 200.0, 0.0); // object (bustopm) (31)
	CreateDynamicObject(1257, 2729.2, -1988.2, 13.7, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (32)
	CreateDynamicObject(1257, 2242.3, -1726.4, 13.7, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (33)
	CreateDynamicObject(1257, 2127.5, -1746.1, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (34)
	CreateDynamicObject(1257, 2087.8999, -1807, 13.8, 0, 0, 0, -1, -1, -1, 200.0, 0.0); // object (bustopm) (35)
	CreateDynamicObject(1257, 1870, -1746, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (36)
	CreateDynamicObject(1257, 1827.9, -1669.5, 13.8, 0, 0, 0, -1, -1, -1, 200.0, 0.0); // object (bustopm) (37)
	CreateDynamicObject(1257, 1470.4, -1726.3, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (38)
	CreateDynamicObject(1257, 1482.4, -1726.3, 13.8, 0, 0, 90, -1, -1, -1, 200.0, 0.0); // object (bustopm) (39)
	CreateDynamicObject(1257, 1502.3, -1878.4, 13.8, 0, 0, 270, -1, -1, -1, 200.0, 0.0); // object (bustopm) (40)

//Actor
//	PolicialBatida1 = CreateActor (280, 2072.6797,-1752.2234,13.3877,144.8090);
//	ApplyActorAnimation(PolicialBatida1, "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);

//Veiculos
//	CreateVehicle(420,1507.2449,-1736.2128,13.1642,270.6060,1,1,0); //

//Relogio
	SetTimer("Relogio", 1000, true);
	//Text Data
	Data = TextDrawCreate(500.000000, 9.000000, "");
	TextDrawBackgroundColor(Data, 255);
	TextDrawFont(Data, 3);
	TextDrawLetterSize(Data, 0.310000, 1.500000);
	TextDrawColor(Data, -1);
	TextDrawSetOutline(Data, 1);
	TextDrawSetProportional(Data, 1);
	TextDrawSetSelectable(Data, 0);
	//Text Hora
	Hora = TextDrawCreate(546.000000, 24.000000, "");
	TextDrawBackgroundColor(Hora, 255);
	TextDrawFont(Hora, 3);
	TextDrawLetterSize(Hora, 0.389999, 2.000000);
	TextDrawColor(Hora, -1);
	TextDrawSetOutline(Hora, 1);
	TextDrawSetProportional(Hora, 1);
	TextDrawSetSelectable(Hora, 0);

//TelaDeLoad
	CARREGANDO1 = TextDrawCreate(322.286773, 413.161376, "CARREGANDO...");
	TextDrawLetterSize(CARREGANDO1, 0.871195, 2.722666);
	TextDrawAlignment(CARREGANDO1, 2);
	TextDrawColor(CARREGANDO1, -1);
	TextDrawSetShadow(CARREGANDO1, 0);
	TextDrawSetOutline(CARREGANDO1, 3);
	TextDrawBackgroundColor(CARREGANDO1, 255);
	TextDrawFont(CARREGANDO1, 1);
	TextDrawSetProportional(CARREGANDO1, 1);
	TextDrawSetShadow(CARREGANDO1, 0);

	CARREGANDO2 = TextDrawCreate(1.000000, -1.000000, "");
    TextDrawBackgroundColor(CARREGANDO2, 255);
    TextDrawFont(CARREGANDO2, 4);
    TextDrawLetterSize(CARREGANDO2, 0.500000, 1.000000);
    TextDrawColor(CARREGANDO2, -1);
    TextDrawSetOutline(CARREGANDO2, 0);
    TextDrawSetProportional(CARREGANDO2, 1);
    TextDrawSetShadow(CARREGANDO2, 1);
    TextDrawUseBox(CARREGANDO2, 1);
    TextDrawBoxColor(CARREGANDO2, 255);
    TextDrawTextSize(CARREGANDO2, 645.000000, 450.000000);
//Inventario
	SetTimer("@TimerOneSecond", 1000, true);
	LoadTextDraws();
	LastItemID = 0;
//FundoPrincipal
 	ImagemEntrada = TextDrawCreate(1.000000, -1.000000, "intro1:intro1");
    TextDrawBackgroundColor(ImagemEntrada, 255);
    TextDrawFont(ImagemEntrada, 4);
    TextDrawLetterSize(ImagemEntrada, 0.500000, 1.000000);
    TextDrawColor(ImagemEntrada, -1);
    TextDrawSetOutline(ImagemEntrada, 0);
    TextDrawSetProportional(ImagemEntrada, 1);
    TextDrawSetShadow(ImagemEntrada, 1);
    TextDrawUseBox(ImagemEntrada, 1);
    TextDrawBoxColor(ImagemEntrada, 255);
    TextDrawTextSize(ImagemEntrada, 645.000000, 450.000000);

//Players Vivos
	VIVOS = TextDrawCreate(556.304687, 98.906692, "vivos:_%s");
	TextDrawLetterSize(VIVOS, 0.400000, 1.600000);
	TextDrawAlignment(VIVOS, 2);
	TextDrawColor(VIVOS, -65281);
	TextDrawSetShadow(VIVOS, 0);
	TextDrawSetOutline(VIVOS, 1);
	TextDrawBackgroundColor(VIVOS, 255);
	TextDrawFont(VIVOS, 1);
	TextDrawSetProportional(VIVOS, 1);
	TextDrawSetShadow(VIVOS, 0);

//MenuPrincipal
    ImagemEntrada = TextDrawCreate(1.000000, -1.000000, "intro1:intro1"); //froten2 Arquivo onde esta o back5 loadsc13:loadsc13
    TextDrawBackgroundColor(ImagemEntrada, 255);
    TextDrawFont(ImagemEntrada, 4);
    TextDrawLetterSize(ImagemEntrada, 0.500000, 1.000000);
    TextDrawColor(ImagemEntrada, -1);
    TextDrawSetOutline(ImagemEntrada, 0);
    TextDrawSetProportional(ImagemEntrada, 1);
    TextDrawSetShadow(ImagemEntrada, 1);
    TextDrawUseBox(ImagemEntrada, 1);
    TextDrawBoxColor(ImagemEntrada, 255);
    TextDrawTextSize(ImagemEntrada, 645.000000, 450.000000);

 	FUNDO1 = TextDrawCreate(12.500000, 12.666743, "box");
	TextDrawLetterSize(FUNDO1, 0.000000, 46.562500);
	TextDrawTextSize(FUNDO1, 624.000000, 0.000000);
	TextDrawAlignment(FUNDO1, 1);
	TextDrawColor(FUNDO1, -1);
	TextDrawUseBox(FUNDO1, 1);
	TextDrawBoxColor(FUNDO1, 255);
	TextDrawSetShadow(FUNDO1, 0);
	TextDrawSetOutline(FUNDO1, 0);
	TextDrawBackgroundColor(FUNDO1, 255);
	TextDrawFont(FUNDO1, 1);
	TextDrawSetProportional(FUNDO1, 1);
	TextDrawSetShadow(FUNDO1, 0);

	FUNDO2 = TextDrawCreate(16.250000, 17.333248, "box");
	TextDrawLetterSize(FUNDO2, 0.000000, 45.562500);
	TextDrawTextSize(FUNDO2, 619.000000, 0.000000);
	TextDrawAlignment(FUNDO2, 1);
	TextDrawColor(FUNDO2, -1);
	TextDrawUseBox(FUNDO2, 1);
	TextDrawBoxColor(FUNDO2, -1523963137);
	TextDrawSetShadow(FUNDO2, 0);
	TextDrawSetOutline(FUNDO2, 0);
	TextDrawBackgroundColor(FUNDO2, 255);
	TextDrawFont(FUNDO2, 1);
	TextDrawSetProportional(FUNDO2, 1);
	TextDrawSetShadow(FUNDO2, 0);

	FUNDO3 = TextDrawCreate(18.700004, 20.083374, "box");
	TextDrawLetterSize(FUNDO3, 0.000000, 44.990608);
	TextDrawTextSize(FUNDO3, 616.668212, 0.000000);
	TextDrawAlignment(FUNDO3, 1);
	TextDrawColor(FUNDO3, -1);
	TextDrawUseBox(FUNDO3, 1);
	TextDrawBoxColor(FUNDO3, 255);
	TextDrawSetShadow(FUNDO3, 0);
	TextDrawSetOutline(FUNDO3, 0);
	TextDrawBackgroundColor(FUNDO3, 255);
	TextDrawFont(FUNDO3, 1);
	TextDrawSetProportional(FUNDO3, 1);
	TextDrawSetShadow(FUNDO3, 0);

	FUNDOPLAY1 = TextDrawCreate(498.750000, 346.916687, "box");
	TextDrawLetterSize(FUNDOPLAY1, 0.000000, 4.000000);
	TextDrawTextSize(FUNDOPLAY1, 611.000000, 0.000000);
	TextDrawAlignment(FUNDOPLAY1, 1);
	TextDrawColor(FUNDOPLAY1, -1);
	TextDrawUseBox(FUNDOPLAY1, 1);
	TextDrawBoxColor(FUNDOPLAY1, 8388863);
	TextDrawSetShadow(FUNDOPLAY1, 0);
	TextDrawSetOutline(FUNDOPLAY1, 0);
	TextDrawBackgroundColor(FUNDOPLAY1, 255);
	TextDrawFont(FUNDOPLAY1, 1);
	TextDrawSetProportional(FUNDOPLAY1, 1);
	TextDrawSetShadow(FUNDOPLAY1, 0);

	FUNDOPLAY2 = TextDrawCreate(501.650024, 350.016693, "box");
	TextDrawLetterSize(FUNDOPLAY2, 0.000000, 3.332498);
	TextDrawTextSize(FUNDOPLAY2, 607.589111, 0.000000);
	TextDrawAlignment(FUNDOPLAY2, 1);
	TextDrawColor(FUNDOPLAY2, -1);
	TextDrawUseBox(FUNDOPLAY2, 1);
	TextDrawBoxColor(FUNDOPLAY2, -1);
	TextDrawSetShadow(FUNDOPLAY2, 0);
	TextDrawSetOutline(FUNDOPLAY2, 0);
	TextDrawBackgroundColor(FUNDOPLAY2, 255);
	TextDrawFont(FUNDOPLAY2, 1);
	TextDrawSetProportional(FUNDOPLAY2, 1);
	TextDrawSetShadow(FUNDOPLAY2, 0);

	PLAYSOLO = TextDrawCreate(548.316223, 349.616760, "JOGAR~n~_____solo");
	TextDrawLetterSize(PLAYSOLO, 0.551873, 1.693333);
	TextDrawAlignment(PLAYSOLO, 2);
	TextDrawColor(PLAYSOLO, 16711935);
	TextDrawSetShadow(PLAYSOLO, 0);
	TextDrawSetOutline(PLAYSOLO, 1);
	TextDrawBackgroundColor(PLAYSOLO, 255);
	TextDrawFont(PLAYSOLO, 1);
	TextDrawSetProportional(PLAYSOLO, 1);
	TextDrawSetShadow(PLAYSOLO, 0);
	TextDrawSetSelectable(PLAYSOLO, true);
	TextDrawTextSize(PLAYSOLO, 40.0, 50.0);

	FUNDOSKIN1 = TextDrawCreate(283.125000, 26.083290, "box");
	TextDrawLetterSize(FUNDOSKIN1, 0.000000, 39.562500);
	TextDrawTextSize(FUNDOSKIN1, 472.000000, 0.000000);
	TextDrawAlignment(FUNDOSKIN1, 1);
	TextDrawColor(FUNDOSKIN1, -1);
	TextDrawUseBox(FUNDOSKIN1, 1);
	TextDrawBoxColor(FUNDOSKIN1, -1523963137);
	TextDrawSetShadow(FUNDOSKIN1, 0);
	TextDrawSetOutline(FUNDOSKIN1, 0);
	TextDrawBackgroundColor(FUNDOSKIN1, 255);
	TextDrawFont(FUNDOSKIN1, 1);
	TextDrawSetProportional(FUNDOSKIN1, 1);
	TextDrawSetShadow(FUNDOSKIN1, 0);

	FUNDOSKIN2 = TextDrawCreate(286.399932, 28.999988, "box");
	TextDrawLetterSize(FUNDOSKIN2, 0.000000, 38.920509);
	TextDrawTextSize(FUNDOSKIN2, 468.081085, 0.000000);
	TextDrawAlignment(FUNDOSKIN2, 1);
	TextDrawColor(FUNDOSKIN2, -1);
	TextDrawUseBox(FUNDOSKIN2, 1);
	TextDrawBoxColor(FUNDOSKIN2, 255);
	TextDrawSetShadow(FUNDOSKIN2, 0);
	TextDrawSetOutline(FUNDOSKIN2, 0);
	TextDrawBackgroundColor(FUNDOSKIN2, 255);
	TextDrawFont(FUNDOSKIN2, 1);
	TextDrawSetProportional(FUNDOSKIN2, 1);
	TextDrawSetShadow(FUNDOSKIN2, 0);

	SKIN = TextDrawCreate(293.125000, 35.416652, "");
	TextDrawLetterSize(SKIN, 0.000000, 0.000000);
	TextDrawTextSize(SKIN, 167.000000, 154.000000);
	TextDrawAlignment(SKIN, 1);
	TextDrawColor(SKIN, -1);
	TextDrawSetShadow(SKIN, 0);
	TextDrawSetOutline(SKIN, 0);
	TextDrawBackgroundColor(SKIN, -2147483393);
	TextDrawFont(SKIN, 5);
	TextDrawSetProportional(SKIN, 0);
	TextDrawSetShadow(SKIN, 0);
	TextDrawSetPreviewModel(SKIN, 0);
	TextDrawSetPreviewRot(SKIN, 0.000000, 0.000000, 0.000000, 1.000000);

	TXTNOME = TextDrawCreate(292.500000, 202.249984, "Nick:______%s");
	TextDrawLetterSize(TXTNOME, 0.400000, 1.600000);
	TextDrawAlignment(TXTNOME, 1);
	TextDrawColor(TXTNOME, -1);
	TextDrawSetShadow(TXTNOME, 0);
	TextDrawSetOutline(TXTNOME, 0);
	TextDrawBackgroundColor(TXTNOME, 255);
	TextDrawFont(TXTNOME, 2);
	TextDrawSetProportional(TXTNOME, 1);
	TextDrawSetShadow(TXTNOME, 0);

	TXTNIVEL = TextDrawCreate(292.500000, 242.499710, "LEVEL:_________________%d");
	TextDrawLetterSize(TXTNIVEL, 0.400000, 1.600000);
	TextDrawAlignment(TXTNIVEL, 1);
	TextDrawColor(TXTNIVEL, -1);
	TextDrawSetShadow(TXTNIVEL, 0);
	TextDrawSetOutline(TXTNIVEL, 0);
	TextDrawBackgroundColor(TXTNIVEL, 255);
	TextDrawFont(TXTNIVEL, 2);
	TextDrawSetProportional(TXTNIVEL, 1);
	TextDrawSetShadow(TXTNIVEL, 0);

	TXTKILLS = TextDrawCreate(292.500000, 280.416656, "Matou:________________%d");
	TextDrawLetterSize(TXTKILLS, 0.400000, 1.600000);
	TextDrawAlignment(TXTKILLS, 1);
	TextDrawColor(TXTKILLS, -1);
	TextDrawSetShadow(TXTKILLS, 0);
	TextDrawSetOutline(TXTKILLS, 0);
	TextDrawBackgroundColor(TXTKILLS, 255);
	TextDrawFont(TXTKILLS, 2);
	TextDrawSetProportional(TXTKILLS, 1);
	TextDrawSetShadow(TXTKILLS, 0);

	TXTDEATHS = TextDrawCreate(292.500000, 318.333251, "Morreu:______________%d");
	TextDrawLetterSize(TXTDEATHS, 0.400000, 1.600000);
	TextDrawAlignment(TXTDEATHS, 1);
	TextDrawColor(TXTDEATHS, -1);
	TextDrawSetShadow(TXTDEATHS, 0);
	TextDrawSetOutline(TXTDEATHS, 0);
	TextDrawBackgroundColor(TXTDEATHS, 255);
	TextDrawFont(TXTDEATHS, 2);
	TextDrawSetProportional(TXTDEATHS, 1);
	TextDrawSetShadow(TXTDEATHS, 0);

	TXTWINS = TextDrawCreate(292.500000, 353.333618, "vitorias:____________%d");
	TextDrawLetterSize(TXTWINS, 0.400000, 1.600000);
	TextDrawAlignment(TXTWINS, 1);
	TextDrawColor(TXTWINS, -1);
	TextDrawSetShadow(TXTWINS, 0);
	TextDrawSetOutline(TXTWINS, 0);
	TextDrawBackgroundColor(TXTWINS, 255);
	TextDrawFont(TXTWINS, 2);
	TextDrawSetProportional(TXTWINS, 1);
	TextDrawSetShadow(TXTWINS, 0);

	FUNDODUO1 = TextDrawCreate(498.750000, 289.749938, "box");
	TextDrawLetterSize(FUNDODUO1, 0.000000, 4.000000);
	TextDrawTextSize(FUNDODUO1, 610.000000, 0.000000);
	TextDrawAlignment(FUNDODUO1, 1);
	TextDrawColor(FUNDODUO1, -1);
	TextDrawUseBox(FUNDODUO1, 1);
	TextDrawBoxColor(FUNDODUO1, -1523963137);
	TextDrawSetShadow(FUNDODUO1, 0);
	TextDrawSetOutline(FUNDODUO1, 0);
	TextDrawBackgroundColor(FUNDODUO1, 255);
	TextDrawFont(FUNDODUO1, 1);
	TextDrawSetProportional(FUNDODUO1, 1);
	TextDrawSetShadow(FUNDODUO1, 0);

	FUNDODUO2 = TextDrawCreate(501.875000, 293.249938, "box");
	TextDrawLetterSize(FUNDODUO2, 0.000000, 3.312500);
	TextDrawTextSize(FUNDODUO2, 607.000000, 0.000000);
	TextDrawAlignment(FUNDODUO2, 1);
	TextDrawColor(FUNDODUO2, -1);
	TextDrawUseBox(FUNDODUO2, 1);
	TextDrawBoxColor(FUNDODUO2, -1);
	TextDrawSetShadow(FUNDODUO2, 0);
	TextDrawSetOutline(FUNDODUO2, 0);
	TextDrawBackgroundColor(FUNDODUO2, 255);
	TextDrawFont(FUNDODUO2, 1);
	TextDrawSetProportional(FUNDODUO2, 1);
	TextDrawSetShadow(FUNDODUO2, 0);

	PLAYDUO = TextDrawCreate(542.492797, 290.632873, "JOGAR~n~_____dupla");
	TextDrawLetterSize(PLAYDUO, 0.551249, 1.779166);
	TextDrawAlignment(PLAYDUO, 2);
	TextDrawColor(PLAYDUO, -16776961);
	TextDrawSetShadow(PLAYDUO, 0);
	TextDrawSetOutline(PLAYDUO, 1);
	TextDrawBackgroundColor(PLAYDUO, 255);
	TextDrawFont(PLAYDUO, 1);
	TextDrawSetProportional(PLAYDUO, 1);
	TextDrawSetShadow(PLAYDUO, 0);
	TextDrawSetSelectable(PLAYDUO, true);
	TextDrawTextSize(PLAYDUO, 40, 50);

	FUNDOSQUAD1 = TextDrawCreate(498.750000, 230.250030, "box");
	TextDrawLetterSize(FUNDOSQUAD1, 0.000000, 4.000000);
	TextDrawTextSize(FUNDOSQUAD1, 610.000000, 0.000000);
	TextDrawAlignment(FUNDOSQUAD1, 1);
	TextDrawColor(FUNDOSQUAD1, -1);
	TextDrawUseBox(FUNDOSQUAD1, 1);
	TextDrawBoxColor(FUNDOSQUAD1, -1523963137);
	TextDrawSetShadow(FUNDOSQUAD1, 0);
	TextDrawSetOutline(FUNDOSQUAD1, 0);
	TextDrawBackgroundColor(FUNDOSQUAD1, 255);
	TextDrawFont(FUNDOSQUAD1, 1);
	TextDrawSetProportional(FUNDOSQUAD1, 1);
	TextDrawSetShadow(FUNDOSQUAD1, 0);

	FUNDOSQUAD2 = TextDrawCreate(501.875000, 233.749954, "box");
	TextDrawLetterSize(FUNDOSQUAD2, 0.000000, 3.312500);
	TextDrawTextSize(FUNDOSQUAD2, 607.000000, 0.000000);
	TextDrawAlignment(FUNDOSQUAD2, 1);
	TextDrawColor(FUNDOSQUAD2, -1);
	TextDrawUseBox(FUNDOSQUAD2, 1);
	TextDrawBoxColor(FUNDOSQUAD2, -1);
	TextDrawSetShadow(FUNDOSQUAD2, 0);
	TextDrawSetOutline(FUNDOSQUAD2, 0);
	TextDrawBackgroundColor(FUNDOSQUAD2, 255);
	TextDrawFont(FUNDOSQUAD2, 1);
	TextDrawSetProportional(FUNDOSQUAD2, 1);
	TextDrawSetShadow(FUNDOSQUAD2, 0);

	PLAYSQUAD = TextDrawCreate(542.124572, 231.332992, "JOGAR~n~_____squad");
	TextDrawLetterSize(PLAYSQUAD, 0.551249, 1.769166);
	TextDrawAlignment(PLAYSQUAD, 2);
	TextDrawColor(PLAYSQUAD, -16776961);
	TextDrawSetShadow(PLAYSQUAD, 0);
	TextDrawSetOutline(PLAYSQUAD, 1);
	TextDrawBackgroundColor(PLAYSQUAD, 255);
	TextDrawFont(PLAYSQUAD, 1);
	TextDrawSetProportional(PLAYSQUAD, 1);
	TextDrawSetShadow(PLAYSQUAD, 0);
	TextDrawSetSelectable(PLAYSQUAD, true);
	TextDrawTextSize(PLAYSQUAD, 40, 50);

	GTA = TextDrawCreate(547.350158, 129.353546, "Grand~n~_theft~n~_auto");
	TextDrawLetterSize(GTA, 0.813801, 2.652560);
	TextDrawAlignment(GTA, 2);
	TextDrawColor(GTA, -1);
	TextDrawSetShadow(GTA, 5);
	TextDrawSetOutline(GTA, 2);
	TextDrawBackgroundColor(GTA, 255);
	TextDrawFont(GTA, 3);
	TextDrawSetProportional(GTA, 1);
	TextDrawSetShadow(GTA, 5);

	SANROYALE = TextDrawCreate(551.625061, 194.036636, "SanRoyale");
	TextDrawLetterSize(SANROYALE, 0.828675, 2.102604);
	TextDrawAlignment(SANROYALE, 2);
	TextDrawColor(SANROYALE, 255);
	TextDrawSetShadow(SANROYALE, 0);
	TextDrawSetOutline(SANROYALE, 1);
	TextDrawBackgroundColor(SANROYALE, -1);
	TextDrawFont(SANROYALE, 0);
	TextDrawSetProportional(SANROYALE, 1);
	TextDrawSetShadow(SANROYALE, 0);

	TXTVERSION = TextDrawCreate(95.625000, 412.833435, "v0.5_________________________________________________________________atualizado_20/05/2018");
	TextDrawLetterSize(TXTVERSION, 0.364374, 1.354997);
	TextDrawAlignment(TXTVERSION, 1);
	TextDrawColor(TXTVERSION, -1061109505);
	TextDrawSetShadow(TXTVERSION, 0);
	TextDrawSetOutline(TXTVERSION, 0);
	TextDrawBackgroundColor(TXTVERSION, 255);
	TextDrawFont(TXTVERSION, 1);
	TextDrawSetProportional(TXTVERSION, 1);
	TextDrawSetShadow(TXTVERSION, 0);

	TCCPROJECT = TextDrawCreate(18.125000, 411.666900, "TCC_Project");
	TextDrawLetterSize(TCCPROJECT, 0.371874, 1.483332);
	TextDrawAlignment(TCCPROJECT, 1);
	TextDrawColor(TCCPROJECT, -1061109505);
	TextDrawSetShadow(TCCPROJECT, 0);
	TextDrawSetOutline(TCCPROJECT, 0);
	TextDrawBackgroundColor(TCCPROJECT, 255);
	TextDrawFont(TCCPROJECT, 1);
	TextDrawSetProportional(TCCPROJECT, 1);
	TextDrawSetShadow(TCCPROJECT, 0);

	TXTDINHEIRO = TextDrawCreate(320.901794, 35.880123, "$%d");
	TextDrawLetterSize(TXTDINHEIRO, 0.400000, 1.600000);
	TextDrawAlignment(TXTDINHEIRO, 2);
	TextDrawColor(TXTDINHEIRO, 8388863);
	TextDrawSetShadow(TXTDINHEIRO, 0);
	TextDrawSetOutline(TXTDINHEIRO, 1);
	TextDrawBackgroundColor(TXTDINHEIRO, 255);
	TextDrawFont(TXTDINHEIRO, 2);
	TextDrawSetProportional(TXTDINHEIRO, 1);
	TextDrawSetShadow(TXTDINHEIRO, 0);

    TXTLOJA = TextDrawCreate(145.999908, 237.040176, "Quer_comprar_uma_skin_maneira~n~ou_algum_acessorio?~n~Acesse_nossa_lojinha_e_pague~n~com_dinheiro_juntado_nas~n~partidas_jogadas.~n~~n~");
	TextDrawLetterSize(TXTLOJA, 0.430999, 2.199999);
	TextDrawAlignment(TXTLOJA, 2);
	TextDrawColor(TXTLOJA, 255);
	TextDrawSetShadow(TXTLOJA, 0);
	TextDrawSetOutline(TXTLOJA, 1);
	TextDrawBackgroundColor(TXTLOJA, -5963521);
	TextDrawFont(TXTLOJA, 1);
	TextDrawSetProportional(TXTLOJA, 1);
	TextDrawSetShadow(TXTLOJA, 0);

	FUNDOLOJA1 = TextDrawCreate(67.899932, 353.527038, "box");
	TextDrawLetterSize(FUNDOLOJA1, 0.000000, 3.119999);
	TextDrawTextSize(FUNDOLOJA1, 226.018890, 0.000000);
	TextDrawAlignment(FUNDOLOJA1, 1);
	TextDrawColor(FUNDOLOJA1, -1);
	TextDrawUseBox(FUNDOLOJA1, 1);
	TextDrawBoxColor(FUNDOLOJA1, -5963521);
	TextDrawSetShadow(FUNDOLOJA1, 0);
	TextDrawSetOutline(FUNDOLOJA1, 0);
	TextDrawBackgroundColor(FUNDOLOJA1, -65281);
	TextDrawFont(FUNDOLOJA1, 1);
	TextDrawSetProportional(FUNDOLOJA1, 1);
	TextDrawSetShadow(FUNDOLOJA1, 0);

	FUNDOLOJA2 = TextDrawCreate(69.099945, 355.566925, "box");
	TextDrawLetterSize(FUNDOLOJA2, 0.000000, 2.693995);
	TextDrawTextSize(FUNDOLOJA2, 224.089950, 0.000000);
	TextDrawAlignment(FUNDOLOJA2, 1);
	TextDrawColor(FUNDOLOJA2, -1);
	TextDrawUseBox(FUNDOLOJA2, 1);
	TextDrawBoxColor(FUNDOLOJA2, 255);
	TextDrawSetShadow(FUNDOLOJA2, 0);
	TextDrawSetOutline(FUNDOLOJA2, 0);
	TextDrawBackgroundColor(FUNDOLOJA2, 255);
	TextDrawFont(FUNDOLOJA2, 1);
	TextDrawSetProportional(FUNDOLOJA2, 1);
	TextDrawSetShadow(FUNDOLOJA2, 0);

	BTNLOJA = TextDrawCreate(143.199996, 355.332855, "LOJA");
	TextDrawLetterSize(BTNLOJA, 1.110997, 2.539999);
	TextDrawAlignment(BTNLOJA, 2);
	TextDrawColor(BTNLOJA, -1);
	TextDrawSetShadow(BTNLOJA, 1);
	TextDrawSetOutline(BTNLOJA, 0);
	TextDrawBackgroundColor(BTNLOJA, -2147483393);
	TextDrawFont(BTNLOJA, 1);
	TextDrawSetProportional(BTNLOJA, 1);
	TextDrawSetShadow(BTNLOJA, 1);
	TextDrawSetSelectable(BTNLOJA, true);
	TextDrawTextSize(BTNLOJA, 40.0, 50.0);

//Loja
	FUNDOMERCADO1 = TextDrawCreate(12.500000, 12.666743, "box");
	TextDrawLetterSize(FUNDOMERCADO1, 0.000000, 46.562500);
	TextDrawTextSize(FUNDOMERCADO1, 624.000000, 0.000000);
	TextDrawAlignment(FUNDOMERCADO1, 1);
	TextDrawColor(FUNDOMERCADO1, -1);
	TextDrawUseBox(FUNDOMERCADO1, 1);
	TextDrawBoxColor(FUNDOMERCADO1, 255);
	TextDrawSetShadow(FUNDOMERCADO1, 0);
	TextDrawSetOutline(FUNDOMERCADO1, 0);
	TextDrawBackgroundColor(FUNDOMERCADO1, 255);
	TextDrawFont(FUNDOMERCADO1, 1);
	TextDrawSetProportional(FUNDOMERCADO1, 1);
	TextDrawSetShadow(FUNDOMERCADO1, 0);

	FUNDOMERCADO2 = TextDrawCreate(16.250000, 17.333248, "box");
	TextDrawLetterSize(FUNDOMERCADO2, 0.000000, 45.562500);
	TextDrawTextSize(FUNDOMERCADO2, 619.000000, 0.000000);
	TextDrawAlignment(FUNDOMERCADO2, 1);
	TextDrawColor(FUNDOMERCADO2, -1);
	TextDrawUseBox(FUNDOMERCADO2, 1);
	TextDrawBoxColor(FUNDOMERCADO2, -2147483393);
	TextDrawSetShadow(FUNDOMERCADO2, 0);
	TextDrawSetOutline(FUNDOMERCADO2, 0);
	TextDrawBackgroundColor(FUNDOMERCADO2, 255);
	TextDrawFont(FUNDOMERCADO2, 1);
	TextDrawSetProportional(FUNDOMERCADO2, 1);
	TextDrawSetShadow(FUNDOMERCADO2, 0);

	FUNDOMERCADO3 = TextDrawCreate(18.200008, 19.083370, "box");
	TextDrawLetterSize(FUNDOMERCADO3, 0.000000, 45.187500);
	TextDrawTextSize(FUNDOMERCADO3, 616.899536, 0.000000);
	TextDrawAlignment(FUNDOMERCADO3, 1);
	TextDrawColor(FUNDOMERCADO3, -1);
	TextDrawUseBox(FUNDOMERCADO3, 1);
	TextDrawBoxColor(FUNDOMERCADO3, 255);
	TextDrawSetShadow(FUNDOMERCADO3, 0);
	TextDrawSetOutline(FUNDOMERCADO3, 0);
	TextDrawBackgroundColor(FUNDOMERCADO3, 255);
	TextDrawFont(FUNDOMERCADO3, 1);
	TextDrawSetProportional(FUNDOMERCADO3, 1);
	TextDrawSetShadow(FUNDOMERCADO3, 0);

	FUNDOTITULO1 = TextDrawCreate(222.000015, 22.746658, "box");
	TextDrawLetterSize(FUNDOTITULO1, 0.000000, 2.400002);
	TextDrawTextSize(FUNDOTITULO1, 416.000000, 0.000000);
	TextDrawAlignment(FUNDOTITULO1, 1);
	TextDrawColor(FUNDOTITULO1, -1);
	TextDrawUseBox(FUNDOTITULO1, 1);
	TextDrawBoxColor(FUNDOTITULO1, -2147483393);
	TextDrawSetShadow(FUNDOTITULO1, 0);
	TextDrawSetOutline(FUNDOTITULO1, 0);
	TextDrawBackgroundColor(FUNDOTITULO1, 255);
	TextDrawFont(FUNDOTITULO1, 1);
	TextDrawSetProportional(FUNDOTITULO1, 1);
	TextDrawSetShadow(FUNDOTITULO1, 0);

	FUNDOTITULO2 = TextDrawCreate(223.599914, 24.239959, "box");
	TextDrawLetterSize(FUNDOTITULO2, 0.000000, 2.000000);
	TextDrawTextSize(FUNDOTITULO2, 414.000000, 0.000000);
	TextDrawAlignment(FUNDOTITULO2, 1);
	TextDrawColor(FUNDOTITULO2, 65535);
	TextDrawUseBox(FUNDOTITULO2, 1);
	TextDrawBoxColor(FUNDOTITULO2, -1523963137);
	TextDrawSetShadow(FUNDOTITULO2, 0);
	TextDrawSetOutline(FUNDOTITULO2, 0);
	TextDrawBackgroundColor(FUNDOTITULO2, 255);
	TextDrawFont(FUNDOTITULO2, 1);
	TextDrawSetProportional(FUNDOTITULO2, 1);
	TextDrawSetShadow(FUNDOTITULO2, 0);

	FUNDOTITULO3 = TextDrawCreate(225.199905, 25.733333, "box");
	TextDrawLetterSize(FUNDOTITULO3, 0.000000, 1.679998);
	TextDrawTextSize(FUNDOTITULO3, 412.789794, 0.000000);
	TextDrawAlignment(FUNDOTITULO3, 1);
	TextDrawColor(FUNDOTITULO3, -1);
	TextDrawUseBox(FUNDOTITULO3, 1);
	TextDrawBoxColor(FUNDOTITULO3, 255);
	TextDrawSetShadow(FUNDOTITULO3, 0);
	TextDrawSetOutline(FUNDOTITULO3, 0);
	TextDrawBackgroundColor(FUNDOTITULO3, 255);
	TextDrawFont(FUNDOTITULO3, 1);
	TextDrawSetProportional(FUNDOTITULO3, 1);
	TextDrawSetShadow(FUNDOTITULO3, 0);

	TXTMERCADO = TextDrawCreate(319.600372, 21.759595, "MERCADO");
	TextDrawLetterSize(TXTMERCADO, 0.871993, 2.329998);
	TextDrawAlignment(TXTMERCADO, 2);
	TextDrawColor(TXTMERCADO, -1);
	TextDrawSetShadow(TXTMERCADO, 2);
	TextDrawSetOutline(TXTMERCADO, 1);
	TextDrawBackgroundColor(TXTMERCADO, 255);
	TextDrawFont(TXTMERCADO, 1);
	TextDrawSetProportional(TXTMERCADO, 1);
	TextDrawSetShadow(TXTMERCADO, 2);

	FUNDOFECHAR = TextDrawCreate(603.487915, 21.906679, "box");
	TextDrawLetterSize(FUNDOFECHAR, 0.000000, 0.971000);
	TextDrawTextSize(FUNDOFECHAR, 614.277709, 0.000000);
	TextDrawAlignment(FUNDOFECHAR, 1);
	TextDrawColor(FUNDOFECHAR, -1);
	TextDrawUseBox(FUNDOFECHAR, 1);
	TextDrawBoxColor(FUNDOFECHAR, -2147483393);
	TextDrawSetShadow(FUNDOFECHAR, 0);
	TextDrawSetOutline(FUNDOFECHAR, 0);
	TextDrawBackgroundColor(FUNDOFECHAR, 255);
	TextDrawFont(FUNDOFECHAR, 1);
	TextDrawSetProportional(FUNDOFECHAR, 1);
	TextDrawSetShadow(FUNDOFECHAR, 0);

	BTNFECHAR = TextDrawCreate(609.098937, 17.566654, "X");
	TextDrawLetterSize(BTNFECHAR, 0.441999, 1.769999);
	TextDrawAlignment(BTNFECHAR, 2);
	TextDrawColor(BTNFECHAR, -1);
	TextDrawSetShadow(BTNFECHAR, 0);
	TextDrawSetOutline(BTNFECHAR, 1);
	TextDrawBackgroundColor(BTNFECHAR, 255);
	TextDrawFont(BTNFECHAR, 2);
	TextDrawSetProportional(BTNFECHAR, 1);
	TextDrawSetShadow(BTNFECHAR, 0);
	TextDrawSetSelectable(BTNFECHAR, true);
	TextDrawTextSize(BTNFECHAR, 20, 30);

//TelaDeBan
    FUNDOBAN1 = TextDrawCreate(208.997924, 69.867088, "box");
	TextDrawLetterSize(FUNDOBAN1, 0.000000, 6.980008);
	TextDrawTextSize(FUNDOBAN1, 427.553466, 0.000000);
	TextDrawAlignment(FUNDOBAN1, 1);
	TextDrawColor(FUNDOBAN1, -1);
	TextDrawUseBox(FUNDOBAN1, 1);
	TextDrawBoxColor(FUNDOBAN1, 255);
	TextDrawSetShadow(FUNDOBAN1, 0);
	TextDrawSetOutline(FUNDOBAN1, 0);
	TextDrawBackgroundColor(FUNDOBAN1, 255);
	TextDrawFont(FUNDOBAN1, 1);
	TextDrawSetProportional(FUNDOBAN1, 1);
	TextDrawSetShadow(FUNDOBAN1, 0);

	FUNDOBAN2 = TextDrawCreate(211.599960, 72.026687, "box");
	TextDrawLetterSize(FUNDOBAN2, 0.000000, 6.440001);
	TextDrawTextSize(FUNDOBAN2, 425.299682, 0.000000);
	TextDrawAlignment(FUNDOBAN2, 1);
	TextDrawColor(FUNDOBAN2, -1);
	TextDrawUseBox(FUNDOBAN2, 1);
	TextDrawBoxColor(FUNDOBAN2, -1523963137);
	TextDrawSetShadow(FUNDOBAN2, 0);
	TextDrawSetOutline(FUNDOBAN2, 0);
	TextDrawBackgroundColor(FUNDOBAN2, 255);
	TextDrawFont(FUNDOBAN2, 1);
	TextDrawSetProportional(FUNDOBAN2, 1);
	TextDrawSetShadow(FUNDOBAN2, 0);

	FUNDOBAN3 = TextDrawCreate(213.199966, 73.520011, "box");
	TextDrawLetterSize(FUNDOBAN3, 0.000000, 6.129994);
	TextDrawTextSize(FUNDOBAN3, 423.699829, 0.000000);
	TextDrawAlignment(FUNDOBAN3, 1);
	TextDrawColor(FUNDOBAN3, -1);
	TextDrawUseBox(FUNDOBAN3, 1);
	TextDrawBoxColor(FUNDOBAN3, 255);
	TextDrawSetShadow(FUNDOBAN3, 0);
	TextDrawSetOutline(FUNDOBAN3, 0);
	TextDrawBackgroundColor(FUNDOBAN3, 255);
	TextDrawFont(FUNDOBAN3, 1);
	TextDrawSetProportional(FUNDOBAN3, 1);
	TextDrawSetShadow(FUNDOBAN3, 0);

	TXTBANIDO = TextDrawCreate(292.399902, 74.773307, "Jogador~n~_______BANIDO");
	TextDrawLetterSize(TXTBANIDO, 1.007547, 2.609998);
	TextDrawAlignment(TXTBANIDO, 2);
	TextDrawColor(TXTBANIDO, -16776961);
	TextDrawSetShadow(TXTBANIDO, 2);
	TextDrawSetOutline(TXTBANIDO, 0);
	TextDrawBackgroundColor(TXTBANIDO, -2147483393);
	TextDrawFont(TXTBANIDO, 1);
	TextDrawSetProportional(TXTBANIDO, 1);
	TextDrawSetShadow(TXTBANIDO, 2);

	FUNDOBAN4 = TextDrawCreate(209.199981, 142.213226, "box");
	TextDrawLetterSize(FUNDOBAN4, 0.000000, 25.045015);
	TextDrawTextSize(FUNDOBAN4, 427.648376, 0.000000);
	TextDrawAlignment(FUNDOBAN4, 1);
	TextDrawColor(FUNDOBAN4, -1);
	TextDrawUseBox(FUNDOBAN4, 1);
	TextDrawBoxColor(FUNDOBAN4, 255);
	TextDrawSetShadow(FUNDOBAN4, 0);
	TextDrawSetOutline(FUNDOBAN4, 0);
	TextDrawBackgroundColor(FUNDOBAN4, 255);
	TextDrawFont(FUNDOBAN4, 1);
	TextDrawSetProportional(FUNDOBAN4, 1);
	TextDrawSetShadow(FUNDOBAN4, 0);

	FUNDOBAN5 = TextDrawCreate(212.000000, 144.746505, "box");
	TextDrawLetterSize(FUNDOBAN5, 0.000000, 24.509889);
	TextDrawTextSize(FUNDOBAN5, 425.549743, 0.000000);
	TextDrawAlignment(FUNDOBAN5, 1);
	TextDrawColor(FUNDOBAN5, -1);
	TextDrawUseBox(FUNDOBAN5, 1);
	TextDrawBoxColor(FUNDOBAN5, -1523963137);
	TextDrawSetShadow(FUNDOBAN5, 0);
	TextDrawSetOutline(FUNDOBAN5, 0);
	TextDrawBackgroundColor(FUNDOBAN5, 255);
	TextDrawFont(FUNDOBAN5, 1);
	TextDrawSetProportional(FUNDOBAN5, 1);
	TextDrawSetShadow(FUNDOBAN5, 0);

	FUNDOBAN6 = TextDrawCreate(213.299880, 146.293243, "box");
	TextDrawLetterSize(FUNDOBAN6, 0.000000, 24.194946);
	TextDrawTextSize(FUNDOBAN6, 423.499633, 0.000000);
	TextDrawAlignment(FUNDOBAN6, 1);
	TextDrawColor(FUNDOBAN6, -1);
	TextDrawUseBox(FUNDOBAN6, 1);
	TextDrawBoxColor(FUNDOBAN6, 255);
	TextDrawSetShadow(FUNDOBAN6, 0);
	TextDrawSetOutline(FUNDOBAN6, 0);
	TextDrawBackgroundColor(FUNDOBAN6, 255);
	TextDrawFont(FUNDOBAN6, 1);
	TextDrawSetProportional(FUNDOBAN6, 1);
	TextDrawSetShadow(FUNDOBAN6, 0);

	TXTMOTIVO = TextDrawCreate(318.800048, 197.409759, "MOTIVO");
	TextDrawLetterSize(TXTMOTIVO, 0.544997, 1.740000);
	TextDrawAlignment(TXTMOTIVO, 2);
	TextDrawColor(TXTMOTIVO, -1);
	TextDrawSetShadow(TXTMOTIVO, 0);
	TextDrawSetOutline(TXTMOTIVO, 1);
	TextDrawBackgroundColor(TXTMOTIVO, -2147483393);
	TextDrawFont(TXTMOTIVO, 1);
	TextDrawSetProportional(TXTMOTIVO, 1);
	TextDrawSetShadow(TXTMOTIVO, 0);

	NOMEBAN = TextDrawCreate(318.000885, 168.199966, "%s");
	TextDrawLetterSize(NOMEBAN, 0.349999, 1.320000);
	TextDrawAlignment(NOMEBAN, 2);
	TextDrawColor(NOMEBAN, -1);
	TextDrawSetShadow(NOMEBAN, 0);
	TextDrawSetOutline(NOMEBAN, 1);
	TextDrawBackgroundColor(NOMEBAN, 255);
	TextDrawFont(NOMEBAN, 1);
	TextDrawSetProportional(NOMEBAN, 1);
	TextDrawSetShadow(NOMEBAN, 0);

	TXTJUST = TextDrawCreate(319.344329, 269.333038, "Se_acredita_ter_sido_banido~n~injustamente,_poste_uma_revisao~n~em_nosso_forum:");
	TextDrawLetterSize(TXTJUST, 0.377999, 1.480000);
	TextDrawAlignment(TXTJUST, 2);
	TextDrawColor(TXTJUST, -16776961);
	TextDrawSetShadow(TXTJUST, 0);
	TextDrawSetOutline(TXTJUST, 1);
	TextDrawBackgroundColor(TXTJUST, 255);
	TextDrawFont(TXTJUST, 1);
	TextDrawSetProportional(TXTJUST, 1);
	TextDrawSetShadow(TXTJUST, 0);

	TXTASS = TextDrawCreate(318.698944, 350.973327, "Atenciosamente,_Brasil_San_Royale.");
	TextDrawLetterSize(TXTASS, 0.346399, 1.481466);
	TextDrawAlignment(TXTASS, 2);
	TextDrawColor(TXTASS, -1523963137);
	TextDrawSetShadow(TXTASS, 0);
	TextDrawSetOutline(TXTASS, 1);
	TextDrawBackgroundColor(TXTASS, 255);
	TextDrawFont(TXTASS, 1);
	TextDrawSetProportional(TXTASS, 1);
	TextDrawSetShadow(TXTASS, 0);

	DIV1 = TextDrawCreate(213.199935, 269.843322, "box");
	TextDrawLetterSize(DIV1, 0.000000, -0.799997);
	TextDrawTextSize(DIV1, 424.000000, 0.000000);
	TextDrawAlignment(DIV1, 1);
	TextDrawColor(DIV1, -1);
	TextDrawUseBox(DIV1, 1);
	TextDrawBoxColor(DIV1, -1523963137);
	TextDrawSetShadow(DIV1, 0);
	TextDrawSetOutline(DIV1, 0);
	TextDrawBackgroundColor(DIV1, 255);
	TextDrawFont(DIV1, 1);
	TextDrawSetProportional(DIV1, 1);
	TextDrawSetShadow(DIV1, 0);

	TXTSITE = TextDrawCreate(235.599975, 321.719482, "www.nossoforum.com.br");
	TextDrawLetterSize(TXTSITE, 0.400000, 1.600000);
	TextDrawAlignment(TXTSITE, 1);
	TextDrawColor(TXTSITE, -1);
	TextDrawSetShadow(TXTSITE, 0);
	TextDrawSetOutline(TXTSITE, 0);
	TextDrawBackgroundColor(TXTSITE, 255);
	TextDrawFont(TXTSITE, 1);
	TextDrawSetProportional(TXTSITE, 1);
	TextDrawSetShadow(TXTSITE, 0);

	DIV2 = TextDrawCreate(213.199935, 195.838806, "box");
	TextDrawLetterSize(DIV2, 0.000000, -0.799997);
	TextDrawTextSize(DIV2, 424.000000, 0.000000);
	TextDrawAlignment(DIV2, 1);
	TextDrawColor(DIV2, -1);
	TextDrawUseBox(DIV2, 1);
	TextDrawBoxColor(DIV2, -1523963137);
	TextDrawSetShadow(DIV2, 0);
	TextDrawSetOutline(DIV2, 0);
	TextDrawBackgroundColor(DIV2, 255);
	TextDrawFont(DIV2, 1);
	TextDrawSetProportional(DIV2, 1);
	TextDrawSetShadow(DIV2, 0);

	TXTNOMEBAN = TextDrawCreate(318.800048, 146.506652, "NOME");
	TextDrawLetterSize(TXTNOMEBAN, 0.544997, 1.740000);
	TextDrawAlignment(TXTNOMEBAN, 2);
	TextDrawColor(TXTNOMEBAN, -1);
	TextDrawSetShadow(TXTNOMEBAN, 0);
	TextDrawSetOutline(TXTNOMEBAN, 1);
	TextDrawBackgroundColor(TXTNOMEBAN, -2147483393);
	TextDrawFont(TXTNOMEBAN, 1);
	TextDrawSetProportional(TXTNOMEBAN, 1);
	TextDrawSetShadow(TXTNOMEBAN, 0);

	MOTIVOBAN = TextDrawCreate(319.300872, 220.020187, "%s");
	TextDrawLetterSize(MOTIVOBAN, 0.349999, 1.320000);
	TextDrawAlignment(MOTIVOBAN, 2);
	TextDrawColor(MOTIVOBAN, -1);
	TextDrawSetShadow(MOTIVOBAN, 0);
	TextDrawSetOutline(MOTIVOBAN, 1);
	TextDrawBackgroundColor(MOTIVOBAN, 255);
	TextDrawFont(MOTIVOBAN, 1);
	TextDrawSetProportional(MOTIVOBAN, 1);
	TextDrawSetShadow(MOTIVOBAN, 0);

//TelaDeVotacao
    FUNDOVOTE1 = TextDrawCreate(37.400009, 137.119934, "box");
	TextDrawLetterSize(FUNDOVOTE1, 0.000000, 8.159997);
	TextDrawTextSize(FUNDOVOTE1, 209.000000, 0.000000);
	TextDrawAlignment(FUNDOVOTE1, 1);
	TextDrawColor(FUNDOVOTE1, -1);
	TextDrawUseBox(FUNDOVOTE1, 1);
	TextDrawBoxColor(FUNDOVOTE1, -2147483393);
	TextDrawSetShadow(FUNDOVOTE1, 0);
	TextDrawSetOutline(FUNDOVOTE1, 0);
	TextDrawBackgroundColor(FUNDOVOTE1, -1061109505);
	TextDrawFont(FUNDOVOTE1, 1);
	TextDrawSetProportional(FUNDOVOTE1, 1);
	TextDrawSetShadow(FUNDOVOTE1, 0);

	FUNDOVOTE2 = TextDrawCreate(39.599956, 140.226608, "box");
	TextDrawLetterSize(FUNDOVOTE2, 0.000000, 7.554987);
	TextDrawTextSize(FUNDOVOTE2, 206.549697, 0.000000);
	TextDrawAlignment(FUNDOVOTE2, 1);
	TextDrawColor(FUNDOVOTE2, -1);
	TextDrawUseBox(FUNDOVOTE2, 1);
	TextDrawBoxColor(FUNDOVOTE2, -1);
	TextDrawSetShadow(FUNDOVOTE2, 0);
	TextDrawSetOutline(FUNDOVOTE2, 0);
	TextDrawBackgroundColor(FUNDOVOTE2, 255);
	TextDrawFont(FUNDOVOTE2, 1);
	TextDrawSetProportional(FUNDOVOTE2, 1);
	TextDrawSetShadow(FUNDOVOTE2, 0);

	FUNDOVOTE3 = TextDrawCreate(41.199993, 142.213333, "box");
	TextDrawLetterSize(FUNDOVOTE3, 0.000000, 6.960000);
	TextDrawTextSize(FUNDOVOTE3, 204.918945, 0.000000);
	TextDrawAlignment(FUNDOVOTE3, 1);
	TextDrawColor(FUNDOVOTE3, -1);
	TextDrawUseBox(FUNDOVOTE3, 1);
	TextDrawBoxColor(FUNDOVOTE3, -1523963137);
	TextDrawSetShadow(FUNDOVOTE3, 0);
	TextDrawSetOutline(FUNDOVOTE3, 0);
	TextDrawBackgroundColor(FUNDOVOTE3, 255);
	TextDrawFont(FUNDOVOTE3, 1);
	TextDrawSetProportional(FUNDOVOTE3, 1);
	TextDrawSetShadow(FUNDOVOTE3, 0);

	TXTVOTACAO3 = TextDrawCreate(123.099670, 139.526535, "-_VOTACAO_INICIADA_-");
	TextDrawLetterSize(TXTVOTACAO3, 0.359199, 1.398399);
	TextDrawAlignment(TXTVOTACAO3, 2);
	TextDrawColor(TXTVOTACAO3, -1);
	TextDrawSetShadow(TXTVOTACAO3, 0);
	TextDrawSetOutline(TXTVOTACAO3, 1);
	TextDrawBackgroundColor(TXTVOTACAO3, 255);
	TextDrawFont(TXTVOTACAO3, 2);
	TextDrawSetProportional(TXTVOTACAO3, 1);
	TextDrawSetShadow(TXTVOTACAO3, 0);

	TXTVOTACAO1 = TextDrawCreate(122.699829, 153.966659, "Kickar__Jogador:");
	TextDrawLetterSize(TXTVOTACAO1, 0.320001, 1.250000);
	TextDrawAlignment(TXTVOTACAO1, 2);
	TextDrawColor(TXTVOTACAO1, -1);
	TextDrawSetShadow(TXTVOTACAO1, 0);
	TextDrawSetOutline(TXTVOTACAO1, 1);
	TextDrawBackgroundColor(TXTVOTACAO1, 255);
	TextDrawFont(TXTVOTACAO1, 2);
	TextDrawSetProportional(TXTVOTACAO1, 1);
	TextDrawSetShadow(TXTVOTACAO1, 0);

	NICKVOTE = TextDrawCreate(113.200027, 173.153717, "%s");
	TextDrawLetterSize(NICKVOTE, 0.362000, 1.250000);
	TextDrawAlignment(NICKVOTE, 2);
	TextDrawColor(NICKVOTE, -1);
	TextDrawSetShadow(NICKVOTE, 0);
	TextDrawSetOutline(NICKVOTE, 0);
	TextDrawBackgroundColor(NICKVOTE, 255);
	TextDrawFont(NICKVOTE, 1);
	TextDrawSetProportional(NICKVOTE, 1);
	TextDrawSetShadow(NICKVOTE, 0);

	TXTVOTACAO2 = TextDrawCreate(122.599937, 195.253707, "/sim_____ou_____/nao");
	TextDrawLetterSize(TXTVOTACAO2, 0.313001, 1.120000);
	TextDrawAlignment(TXTVOTACAO2, 2);
	TextDrawColor(TXTVOTACAO2, -1);
	TextDrawSetShadow(TXTVOTACAO2, 0);
	TextDrawSetOutline(TXTVOTACAO2, 1);
	TextDrawBackgroundColor(TXTVOTACAO2, 255);
	TextDrawFont(TXTVOTACAO2, 2);
	TextDrawSetProportional(TXTVOTACAO2, 1);
	TextDrawSetShadow(TXTVOTACAO2, 0);

//TelaDeDerrota
    FUNDODERROTA1 = TextDrawCreate(12.500000, 12.666743, "box");
	TextDrawLetterSize(FUNDODERROTA1, 0.000000, 46.562500);
	TextDrawTextSize(FUNDODERROTA1, 624.000000, 0.000000);
	TextDrawAlignment(FUNDODERROTA1, 1);
	TextDrawColor(FUNDODERROTA1, -1);
	TextDrawUseBox(FUNDODERROTA1, 1);
	TextDrawBoxColor(FUNDODERROTA1, 255);
	TextDrawSetShadow(FUNDODERROTA1, 0);
	TextDrawSetOutline(FUNDODERROTA1, 0);
	TextDrawBackgroundColor(FUNDODERROTA1, 255);
	TextDrawFont(FUNDODERROTA1, 1);
	TextDrawSetProportional(FUNDODERROTA1, 1);
	TextDrawSetShadow(FUNDODERROTA1, 0);

	FUNDODERROTA2 = TextDrawCreate(16.250000, 17.333248, "box");
	TextDrawLetterSize(FUNDODERROTA2, 0.000000, 45.562500);
	TextDrawTextSize(FUNDODERROTA2, 619.000000, 0.000000);
	TextDrawAlignment(FUNDODERROTA2, 1);
	TextDrawColor(FUNDODERROTA2, -1);
	TextDrawUseBox(FUNDODERROTA2, 1);
	TextDrawBoxColor(FUNDODERROTA2, -2147483393);
	TextDrawSetShadow(FUNDODERROTA2, 0);
	TextDrawSetOutline(FUNDODERROTA2, 0);
	TextDrawBackgroundColor(FUNDODERROTA2, 255);
	TextDrawFont(FUNDODERROTA2, 1);
	TextDrawSetProportional(FUNDODERROTA2, 1);
	TextDrawSetShadow(FUNDODERROTA2, 0);

	FUNDODERROTA3 = TextDrawCreate(18.200008, 19.083370, "box");
	TextDrawLetterSize(FUNDODERROTA3, 0.000000, 45.187500);
	TextDrawTextSize(FUNDODERROTA3, 616.899536, 0.000000);
	TextDrawAlignment(FUNDODERROTA3, 1);
	TextDrawColor(FUNDODERROTA3, -1);
	TextDrawUseBox(FUNDODERROTA3, 1);
	TextDrawBoxColor(FUNDODERROTA3, 255);
	TextDrawSetShadow(FUNDODERROTA3, 0);
	TextDrawSetOutline(FUNDODERROTA3, 0);
	TextDrawBackgroundColor(FUNDODERROTA3, 255);
	TextDrawFont(FUNDODERROTA3, 1);
	TextDrawSetProportional(FUNDODERROTA3, 1);
	TextDrawSetShadow(FUNDODERROTA3, 0);

	MSGDERROTA1 = TextDrawCreate(319.200195, 28.440006, "Voce_Perdeu_Desta_Vez!");
	TextDrawLetterSize(MSGDERROTA1, 1.000000, 3.009998);
	TextDrawAlignment(MSGDERROTA1, 2);
	TextDrawColor(MSGDERROTA1, -16776961);
	TextDrawSetShadow(MSGDERROTA1, 0);
	TextDrawSetOutline(MSGDERROTA1, 1);
	TextDrawBackgroundColor(MSGDERROTA1, -2147483393);
	TextDrawFont(MSGDERROTA1, 2);
	TextDrawSetProportional(MSGDERROTA1, 1);
	TextDrawSetShadow(MSGDERROTA1, 0);

	MSGDERROTA2 = TextDrawCreate(325.999298, 403.033813, "Mais_sorte_na_proxima!");
	TextDrawLetterSize(MSGDERROTA2, 0.500998, 1.909999);
	TextDrawAlignment(MSGDERROTA2, 2);
	TextDrawColor(MSGDERROTA2, -65281);
	TextDrawSetShadow(MSGDERROTA2, 0);
	TextDrawSetOutline(MSGDERROTA2, 1);
	TextDrawBackgroundColor(MSGDERROTA2, 255);
	TextDrawFont(MSGDERROTA2, 2);
	TextDrawSetProportional(MSGDERROTA2, 1);
	TextDrawSetShadow(MSGDERROTA2, 0);

	TXTRANKDERROTA = TextDrawCreate(322.803924, 78.953224, "]_%d|]");
	TextDrawLetterSize(TXTRANKDERROTA, 0.713403, 2.406533);
	TextDrawAlignment(TXTRANKDERROTA, 2);
	TextDrawColor(TXTRANKDERROTA, 65535);
	TextDrawSetShadow(TXTRANKDERROTA, 0);
	TextDrawSetOutline(TXTRANKDERROTA, 1);
	TextDrawBackgroundColor(TXTRANKDERROTA, 255);
	TextDrawFont(TXTRANKDERROTA, 2);
	TextDrawSetProportional(TXTRANKDERROTA, 1);
	TextDrawSetShadow(TXTRANKDERROTA, 0);

	TXTQUEMMATOU = TextDrawCreate(326.304077, 118.099304, "]_morto_por:_%s_]");
	TextDrawLetterSize(TXTQUEMMATOU, 0.477406, 2.086534);
	TextDrawAlignment(TXTQUEMMATOU, 2);
	TextDrawColor(TXTQUEMMATOU, 65535);
	TextDrawSetShadow(TXTQUEMMATOU, 0);
	TextDrawSetOutline(TXTQUEMMATOU, 1);
	TextDrawBackgroundColor(TXTQUEMMATOU, 255);
	TextDrawFont(TXTQUEMMATOU, 2);
	TextDrawSetProportional(TXTQUEMMATOU, 1);
	TextDrawSetShadow(TXTQUEMMATOU, 0);

	SKINGALINHA = TextDrawCreate(218.599960, 150.519958, "");
	TextDrawLetterSize(SKINGALINHA, 0.000000, 0.000000);
	TextDrawTextSize(SKINGALINHA, 201.000000, 177.000000);
	TextDrawAlignment(SKINGALINHA, 1);
	TextDrawColor(SKINGALINHA, -1);
	TextDrawSetShadow(SKINGALINHA, 0);
	TextDrawSetOutline(SKINGALINHA, 0);
	TextDrawBackgroundColor(SKINGALINHA, 255);
	TextDrawFont(SKINGALINHA, 5);
	TextDrawSetProportional(SKINGALINHA, 0);
	TextDrawSetShadow(SKINGALINHA, 0);
	TextDrawSetPreviewModel(SKINGALINHA, 167);
	TextDrawSetPreviewRot(SKINGALINHA, 0.000000, 0.000000, 0.000000, 1.000000);
 	//ApplyAnimation(167, "PED", "WALK_DRUNK", 4.1, 1, 0, 0, 0, 0, 0);

	FUNDOBTNMENUDER1 = TextDrawCreate(231.099960, 358.000152, "box");
	TextDrawLetterSize(FUNDOBTNMENUDER1, 0.000000, 3.340007);
	TextDrawTextSize(FUNDOBTNMENUDER1, 421.000000, 0.000000);
	TextDrawAlignment(FUNDOBTNMENUDER1, 1);
	TextDrawColor(FUNDOBTNMENUDER1, -1);
	TextDrawUseBox(FUNDOBTNMENUDER1, 1);
	TextDrawBoxColor(FUNDOBTNMENUDER1, -1523963137);
	TextDrawSetShadow(FUNDOBTNMENUDER1, 0);
	TextDrawSetOutline(FUNDOBTNMENUDER1, 0);
	TextDrawBackgroundColor(FUNDOBTNMENUDER1, 255);
	TextDrawFont(FUNDOBTNMENUDER1, 1);
	TextDrawSetProportional(FUNDOBTNMENUDER1, 1);
	TextDrawSetShadow(FUNDOBTNMENUDER1, 0);

	FUNDOBTNMENUDER2 = TextDrawCreate(232.799743, 359.733093, "box");
	TextDrawLetterSize(FUNDOBTNMENUDER2, 0.000000, 2.865971);
	TextDrawTextSize(FUNDOBTNMENUDER2, 419.470855, 0.000000);
	TextDrawAlignment(FUNDOBTNMENUDER2, 1);
	TextDrawColor(FUNDOBTNMENUDER2, 255);
	TextDrawUseBox(FUNDOBTNMENUDER2, 1);
	TextDrawBoxColor(FUNDOBTNMENUDER2, 255);
	TextDrawSetShadow(FUNDOBTNMENUDER2, 0);
	TextDrawSetOutline(FUNDOBTNMENUDER2, 0);
	TextDrawBackgroundColor(FUNDOBTNMENUDER2, 255);
	TextDrawFont(FUNDOBTNMENUDER2, 1);
	TextDrawSetProportional(FUNDOBTNMENUDER2, 1);
	TextDrawSetShadow(FUNDOBTNMENUDER2, 0);

	BTNMENUDER = TextDrawCreate(325.102111, 358.466217, "MENU");
	TextDrawLetterSize(BTNMENUDER, 1.000999, 2.837732);
	TextDrawAlignment(BTNMENUDER, 2);
	TextDrawColor(BTNMENUDER, 65535);
	TextDrawSetShadow(BTNMENUDER, 0);
	TextDrawSetOutline(BTNMENUDER, 1);
	TextDrawBackgroundColor(BTNMENUDER, 255);
	TextDrawFont(BTNMENUDER, 1);
	TextDrawSetProportional(BTNMENUDER, 1);
	TextDrawSetShadow(BTNMENUDER, 0);
	TextDrawSetSelectable(BTNMENUDER, true);
	TextDrawTextSize(BTNMENUDER, 40, 50);

//TelaDeVitoria
    FUNDOVITORIA1 = TextDrawCreate(12.500000, 12.666743, "box");
	TextDrawLetterSize(FUNDOVITORIA1, 0.000000, 46.562500);
	TextDrawTextSize(FUNDOVITORIA1, 624.000000, 0.000000);
	TextDrawAlignment(FUNDOVITORIA1, 1);
	TextDrawColor(FUNDOVITORIA1, -1);
	TextDrawUseBox(FUNDOVITORIA1, 1);
	TextDrawBoxColor(FUNDOVITORIA1, 255);
	TextDrawSetShadow(FUNDOVITORIA1, 0);
	TextDrawSetOutline(FUNDOVITORIA1, 0);
	TextDrawBackgroundColor(FUNDOVITORIA1, 255);
	TextDrawFont(FUNDOVITORIA1, 1);
	TextDrawSetProportional(FUNDOVITORIA1, 1);
	TextDrawSetShadow(FUNDOVITORIA1, 0);

	FUNDOVITORIA2 = TextDrawCreate(16.250000, 17.333248, "box");
	TextDrawLetterSize(FUNDOVITORIA2, 0.000000, 45.562500);
	TextDrawTextSize(FUNDOVITORIA2, 619.000000, 0.000000);
	TextDrawAlignment(FUNDOVITORIA2, 1);
	TextDrawColor(FUNDOVITORIA2, -1);
	TextDrawUseBox(FUNDOVITORIA2, 1);
	TextDrawBoxColor(FUNDOVITORIA2, -2147483393);
	TextDrawSetShadow(FUNDOVITORIA2, 0);
	TextDrawSetOutline(FUNDOVITORIA2, 0);
	TextDrawBackgroundColor(FUNDOVITORIA2, 255);
	TextDrawFont(FUNDOVITORIA2, 1);
	TextDrawSetProportional(FUNDOVITORIA2, 1);
	TextDrawSetShadow(FUNDOVITORIA2, 0);

	FUNDOVITORIA3 = TextDrawCreate(18.200008, 19.083370, "box");
	TextDrawLetterSize(FUNDOVITORIA3, 0.000000, 45.187500);
	TextDrawTextSize(FUNDOVITORIA3, 616.899536, 0.000000);
	TextDrawAlignment(FUNDOVITORIA3, 1);
	TextDrawColor(FUNDOVITORIA3, -1);
	TextDrawUseBox(FUNDOVITORIA3, 1);
	TextDrawBoxColor(FUNDOVITORIA3, 255);
	TextDrawSetShadow(FUNDOVITORIA3, 0);
	TextDrawSetOutline(FUNDOVITORIA3, 0);
	TextDrawBackgroundColor(FUNDOVITORIA3, 255);
	TextDrawFont(FUNDOVITORIA3, 1);
	TextDrawSetProportional(FUNDOVITORIA3, 1);
	TextDrawSetShadow(FUNDOVITORIA3, 0);

	MSGVITORIA1 = TextDrawCreate(319.200195, 28.440006, "]_VITORIA_]");
	TextDrawLetterSize(MSGVITORIA1, 1.000000, 3.009998);
	TextDrawAlignment(MSGVITORIA1, 2);
	TextDrawColor(MSGVITORIA1, 16711935);
	TextDrawSetShadow(MSGVITORIA1, 0);
	TextDrawSetOutline(MSGVITORIA1, 1);
	TextDrawBackgroundColor(MSGVITORIA1, 8388863);
	TextDrawFont(MSGVITORIA1, 2);
	TextDrawSetProportional(MSGVITORIA1, 1);
	TextDrawSetShadow(MSGVITORIA1, 0);

	MSGVITORIA2 = TextDrawCreate(325.999298, 403.033813, "WINNER_WINNER_CHICKEN_DINNER!");
	TextDrawLetterSize(MSGVITORIA2, 0.500998, 1.909999);
	TextDrawAlignment(MSGVITORIA2, 2);
	TextDrawColor(MSGVITORIA2, -65281);
	TextDrawSetShadow(MSGVITORIA2, 0);
	TextDrawSetOutline(MSGVITORIA2, 1);
	TextDrawBackgroundColor(MSGVITORIA2, 255);
	TextDrawFont(MSGVITORIA2, 2);
	TextDrawSetProportional(MSGVITORIA2, 1);
	TextDrawSetShadow(MSGVITORIA2, 0);

	TXTRANKVITORIA = TextDrawCreate(323.599975, 71.280014, "]_%d|_]");
	TextDrawLetterSize(TXTRANKVITORIA, 0.834400, 2.585598);
	TextDrawAlignment(TXTRANKVITORIA, 2);
	TextDrawColor(TXTRANKVITORIA, 16711935);
	TextDrawSetShadow(TXTRANKVITORIA, 0);
	TextDrawSetOutline(TXTRANKVITORIA, 1);
	TextDrawBackgroundColor(TXTRANKVITORIA, 255);
	TextDrawFont(TXTRANKVITORIA, 2);
	TextDrawSetProportional(TXTRANKVITORIA, 1);
	TextDrawSetShadow(TXTRANKVITORIA, 0);

	SKINGALINHA2 = TextDrawCreate(218.599960, 150.519958, "");
	TextDrawLetterSize(SKINGALINHA2, 0.000000, 0.000000);
	TextDrawTextSize(SKINGALINHA2, 201.000000, 177.000000);
	TextDrawAlignment(SKINGALINHA2, 1);
	TextDrawColor(SKINGALINHA2, -1);
	TextDrawSetShadow(SKINGALINHA2, 0);
	TextDrawSetOutline(SKINGALINHA2, 0);
	TextDrawBackgroundColor(SKINGALINHA2, 255);
	TextDrawFont(SKINGALINHA2, 5);
	TextDrawSetProportional(SKINGALINHA2, 0);
	TextDrawSetShadow(SKINGALINHA2, 0);
	TextDrawSetPreviewModel(SKINGALINHA2, 167);
	TextDrawSetPreviewRot(SKINGALINHA2, 0.000000, 0.000000, 0.000000, 1.000000);

	FUNDOBTNMENUVIT1 = TextDrawCreate(231.099960, 358.000152, "box");
	TextDrawLetterSize(FUNDOBTNMENUVIT1, 0.000000, 3.340007);
	TextDrawTextSize(FUNDOBTNMENUVIT1, 421.000000, 0.000000);
	TextDrawAlignment(FUNDOBTNMENUVIT1, 1);
	TextDrawColor(FUNDOBTNMENUVIT1, -1);
	TextDrawUseBox(FUNDOBTNMENUVIT1, 1);
	TextDrawBoxColor(FUNDOBTNMENUVIT1, -1523963137);
	TextDrawSetShadow(FUNDOBTNMENUVIT1, 0);
	TextDrawSetOutline(FUNDOBTNMENUVIT1, 0);
	TextDrawBackgroundColor(FUNDOBTNMENUVIT1, 255);
	TextDrawFont(FUNDOBTNMENUVIT1, 1);
	TextDrawSetProportional(FUNDOBTNMENUVIT1, 1);
	TextDrawSetShadow(FUNDOBTNMENUVIT1, 0);

	FUNDOBTNMENUVIT2 = TextDrawCreate(232.799743, 359.733093, "box");
	TextDrawLetterSize(FUNDOBTNMENUVIT2, 0.000000, 2.865971);
	TextDrawTextSize(FUNDOBTNMENUVIT2, 419.470855, 0.000000);
	TextDrawAlignment(FUNDOBTNMENUVIT2, 1);
	TextDrawColor(FUNDOBTNMENUVIT2, 255);
	TextDrawUseBox(FUNDOBTNMENUVIT2, 1);
	TextDrawBoxColor(FUNDOBTNMENUVIT2, 255);
	TextDrawSetShadow(FUNDOBTNMENUVIT2, 0);
	TextDrawSetOutline(FUNDOBTNMENUVIT2, 0);
	TextDrawBackgroundColor(FUNDOBTNMENUVIT2, 255);
	TextDrawFont(FUNDOBTNMENUVIT2, 1);
	TextDrawSetProportional(FUNDOBTNMENUVIT2, 1);
	TextDrawSetShadow(FUNDOBTNMENUVIT2, 0);

	BTNMENUVIT = TextDrawCreate(325.102111, 358.466217, "MENU");
	TextDrawLetterSize(BTNMENUVIT, 1.000998, 2.837732);
	TextDrawAlignment(BTNMENUVIT, 2);
	TextDrawColor(BTNMENUVIT, 16711935);
	TextDrawSetShadow(BTNMENUVIT, 0);
	TextDrawSetOutline(BTNMENUVIT, 1);
	TextDrawBackgroundColor(BTNMENUVIT, 255);
	TextDrawFont(BTNMENUVIT, 1);
	TextDrawSetProportional(BTNMENUVIT, 1);
	TextDrawSetShadow(BTNMENUVIT, 0);
	TextDrawSetSelectable(BTNMENUVIT, true);
	TextDrawTextSize(BTNMENUVIT, 40.0, 50.0);

//Mapa
    MAPA = TextDrawCreate(33.600025, 31.066709, "samaps:map");
	TextDrawLetterSize(MAPA, 0.000000, 0.000000);
	TextDrawTextSize(MAPA, 573.426513, 374.168701);
	TextDrawAlignment(MAPA, 1);
	TextDrawColor(MAPA, 255);
	TextDrawSetShadow(MAPA, 0);
	TextDrawSetOutline(MAPA, 0);
	TextDrawBackgroundColor(MAPA, 255);
	TextDrawFont(MAPA, 4);
	TextDrawSetProportional(MAPA, 0);
	TextDrawSetShadow(MAPA, 0);

	FECHARMAPA = TextDrawCreate(596.199829, 27.726675, "x");
	TextDrawLetterSize(FECHARMAPA, 0.396800, 1.663600);
	TextDrawAlignment(FECHARMAPA, 1);
	TextDrawColor(FECHARMAPA, -16776961);
	TextDrawSetShadow(FECHARMAPA, 0);
	TextDrawSetOutline(FECHARMAPA, 1);
	TextDrawBackgroundColor(FECHARMAPA, 255);
	TextDrawFont(FECHARMAPA, 2);
	TextDrawSetProportional(FECHARMAPA, 1);
	TextDrawSetShadow(FECHARMAPA, 0);
	TextDrawSetSelectable(FECHARMAPA, true);
	TextDrawTextSize(MAPA, 40.0, 50.0);

    /*MAPA = TextDrawCreate(320.0, 224.0, "samaps:gtasamapbit4");
	TextDrawColor(MAPA, 0xFFFFFFFF);
	TextDrawFont(MAPA, 4);
	TextDrawTextSize(MAPA, 400.0, 400.0);*/

	MensagemDesligou = 0;
	return 1;
}

public OnGameModeExit()
{
    for(new i = 0; i < MAX_PLAYERS; i++) SalvarInfos(i); // Realizamos um loop na função Função SalvarDados para q salve todas as contas numa posivel queda do servidor
    mysql_close(IDConexao); // Aqui fechamos a conexão com o host

	if(!MensagemDesligou)
	{
		SendClientMessageToAll(COLOR_ADMIN,"[STAFF] {FFFFFF}Servidor desligado manualmente!");
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	bloquear_chat = false;
	TogglePlayerSpectating(playerid, true);
	PlayerInfo[playerid][pJogando] = false;
	return 1;
}

public OnPlayerConnect(playerid)
{
    if(!IsPlayerNPC(playerid))
    {
	    PlayerInfo[playerid][pLogado] = false;
	    GetPlayerName(playerid, PlayerInfo[playerid][pNome], 24); // Pegamos o nome do player somente uma vez quando se conectar e formatamos na variavel.
	    GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 26); // Mesma coisa no IP

	    new Query[90]; // criamos uma variavel com 90 celulas
	    mysql_format(IDConexao, Query, sizeof(Query), "SELECT `Senha`, `ID` FROM `Contas` WHERE `Nome`='%s'", PlayerInfo[playerid][pNome]); // formatamos a Query selecionando SENHA e ID referente a tabela Contas Linha (NOME)
	    mysql_tquery(IDConexao, Query, "VerificarContas", "i", playerid); // Faremos a consulta se a linha "Nome" existe sim ou não
	    // Usaremos mysql_tquery para realizar a consulta na tabela e enviar o resultado para a callback.
	    // o resultado sera enviado para callback VerificarContas

	    ResetVariables(playerid);
	    for(new i = 0; i < 10; i++)
	   	RemovePlayerAttachedObject(playerid, i);
	    pInventory[playerid][invSelectedSlot] = -1;
	    pCharacter[playerid][charSelectedSlot] = -1;
	   	LoadPlayerTextDraws(playerid);
	}
	else
	{
	    //SpawnPlayer(playerid);
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    SalvarDados(playerid); // Chamamos a função para salvar a conta do player que desconectar

    if(Player[playerid][MessageInventory])
    KillTimer(Player[playerid][MessageInventoryTimer]);
    ResetVariables(playerid);
    TextDrawHideForPlayer(playerid, Data);
	TextDrawHideForPlayer(playerid, Hora);
	return 1;
}

public OnPlayerSpawn(playerid)
{
 	if(!IsPlayerNPC(playerid))
 	{
		PlayerInfo[playerid][pJogando] = true;
		bloquear_chat = false;
		TogglePlayerSpectating(playerid, false);
		TogglePlayerControllable(playerid,1);


        
		//SetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);
		//SetPlayerInterior(playerid, 10);
		//SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		SetPlayerHealth(playerid, 99999);
		//TimerPartida[playerid] = SetTimerEx("Partida", segundos(10), false, "i", playerid);
		//SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você entrou em uma partida, aguarde 10 segundos para começar!");
		TextDrawHideForPlayer(playerid, CARREGANDO1);
		TextDrawHideForPlayer(playerid, CARREGANDO2);
	    //SetPlayerPos(playerid, 1153.5963,-1734.2294,13.7734);
		//SetPlayerInterior(playerid,0);
		//SetPlayerVirtualWorld(playerid, 0);
		//SetCameraBehindPlayer(playerid);
		//SetPlayerFacingAngle(playerid, 91.2492);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		StopAudioStreamForPlayer(playerid);

		TextDrawHideForPlayer(playerid, ImagemEntrada);
		TextDrawShowForPlayer(playerid, Data);
		TextDrawShowForPlayer(playerid, Hora);
	    TextDrawHideForPlayer(playerid, FUNDO1);
		TextDrawHideForPlayer(playerid, FUNDO2);
		TextDrawHideForPlayer(playerid, FUNDO3);
		TextDrawHideForPlayer(playerid, FUNDOPLAY1);
		TextDrawHideForPlayer(playerid, FUNDOPLAY2);
		TextDrawHideForPlayer(playerid, PLAYSOLO);
		TextDrawHideForPlayer(playerid, FUNDOSKIN1);
		TextDrawHideForPlayer(playerid, FUNDOSKIN2);
		TextDrawHideForPlayer(playerid, SKIN);
		TextDrawHideForPlayer(playerid, TXTNOME);
		TextDrawHideForPlayer(playerid, TXTNIVEL);
		TextDrawHideForPlayer(playerid, TXTKILLS);
		TextDrawHideForPlayer(playerid, TXTDEATHS);
		TextDrawHideForPlayer(playerid, TXTWINS);
		TextDrawHideForPlayer(playerid, FUNDODUO1);
		TextDrawHideForPlayer(playerid, FUNDODUO2);
		TextDrawHideForPlayer(playerid, PLAYDUO);
		TextDrawHideForPlayer(playerid, FUNDOSQUAD1);
		TextDrawHideForPlayer(playerid, FUNDOSQUAD2);
		TextDrawHideForPlayer(playerid, PLAYSQUAD);
		TextDrawHideForPlayer(playerid, GTA);
		TextDrawHideForPlayer(playerid, SANROYALE);
		TextDrawHideForPlayer(playerid, TXTVERSION);
		TextDrawHideForPlayer(playerid, TCCPROJECT);
		TextDrawHideForPlayer(playerid, TXTDINHEIRO);
		TextDrawHideForPlayer(playerid, FUNDOLOJA1);
		TextDrawHideForPlayer(playerid, FUNDOLOJA2);
		TextDrawHideForPlayer(playerid, BTNLOJA);
		TextDrawHideForPlayer(playerid, TXTLOJA);
		CancelSelectTextDraw(playerid);
		
		
	
		
  		
	}
	else
	{
		//TimerPartida[playerid] = SetTimerEx("Partida", segundos(8), false, "i", playerid);
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	for(new i=0; i < 30; i++)
	{
	    SendClientMessage(playerid, -1, " ");
	}
    PlayerInfo[playerid][pJogando] = false;
	bloquear_chat = false;
	TogglePlayerSpectating(playerid, true);
	TogglePlayerControllable(playerid,0);
    TextDrawHideForPlayer(playerid, VIVOS);



	fina[playerid] = SetTimerEx("Fina", segundos(10), false, "i", playerid);
	
	

	TextDrawHideForPlayer(playerid, Data);
	TextDrawHideForPlayer(playerid, Hora);
    TextDrawShowForPlayer(playerid, ImagemEntrada);
	TextDrawShowForPlayer(playerid, FUNDODERROTA1);
	TextDrawShowForPlayer(playerid, FUNDODERROTA2);
	TextDrawShowForPlayer(playerid, FUNDODERROTA3);
	TextDrawShowForPlayer(playerid, MSGDERROTA1);
	TextDrawShowForPlayer(playerid, MSGDERROTA2);
	TextDrawShowForPlayer(playerid, TXTRANKDERROTA);
	TextDrawShowForPlayer(playerid, TXTQUEMMATOU);
	TextDrawShowForPlayer(playerid, SKINGALINHA);
	TextDrawShowForPlayer(playerid, FUNDOBTNMENUDER1);
	TextDrawShowForPlayer(playerid, FUNDOBTNMENUDER2);
	TextDrawShowForPlayer(playerid, BTNMENUDER);
	SelectTextDraw(playerid, 0xFFFF00FF);
	//format(Str1, sizeof(Str1),"]_%d|]", PlayerInfo[playerid][pRankPartida]);
	//format(Str2, sizeof(Str2),"]_morto_por:_%s_]", PlayerInfo[killerid][pNome]);
	//TextDrawSetString(TXTRANKDERROTA, Str1);
	//TextDrawSetString(TXTQUEMMATOU, Str2);

    
    PlayerInfo[playerid][pMorreu]++; // se o player morrer ira acrescentar +1 na variavel de morte
    PlayerInfo[killerid][pMatou]++; // se o player matar ira acrescentar +1 ...
    GivePlayerMoney(playerid, -2);
    GivePlayerMoney(playerid, 2);

    


    
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(bloquear_chat == true)
		return 0;

	if(PlayerInfo[playerid][pLogado] == false)
	    return 0;

	new Str[128];
	format(Str, sizeof(Str), "%s:{FFFFFF} %s", PlayerInfo[playerid][pNome], text);
	MessageToPlayers(GetPlayerColor(playerid), Str);

    AntiFlood[playerid]++;
    if(AntiFlood[playerid] == 1) SetTimerEx("ZerarAntiFlood", segundos(1), false, "i", playerid); // Inicia timer pra zerar o antiflood
    if(AntiFlood[playerid] == 2) SendClientMessage(playerid, COLOR_LIGHTBLUE,"[ANTI FLOOD] NÃO COMETA FLOOD!"); // Mensagem caso ele não pare
    if(AntiFlood[playerid] == 3) SendClientMessage(playerid, COLOR_LIGHTBLUE,"[ANTI FLOOD] PARE OU SERÁ PUNIDO!");
    if(AntiFlood[playerid] == 4)
    {
        new str[100];
        SendClientMessage(playerid, COLOR_LIGHTBLUE,"[ANTI FLOOD] VOCÊ FOI KICKADO POR FLOOD!"); // Manda mensagem
        format(str,sizeof(str), "[STAFF] O JOGADOR %s FOI KICKADO!  |  MOTIVO: FLOOD.",PlayerInfo[playerid][pNome]);
        SendClientMessageToAll(COLOR_LIGHTRED, str);
        Kick(playerid); // Kick o jogador que fez o flood
    }
	return 0;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
		if(clickedid == Text:PLAYSOLO){
		    ConnectNPC("PilotoDoAviao","npc");
		    TogglePlayerSpectating(playerid, 1);
			TextDrawShowForPlayer(playerid, CARREGANDO1);
			new rand = random(14), str[30];
			format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
			TextDrawSetString(CARREGANDO2, str);
			TextDrawShowForPlayer(playerid, CARREGANDO2);

			TextDrawHideForPlayer(playerid, ImagemEntrada);
			TextDrawShowForPlayer(playerid, Data);
			TextDrawShowForPlayer(playerid, Hora);
		    TextDrawHideForPlayer(playerid, FUNDO1);
			TextDrawHideForPlayer(playerid, FUNDO2);
			TextDrawHideForPlayer(playerid, FUNDO3);
			TextDrawHideForPlayer(playerid, FUNDOPLAY1);
			TextDrawHideForPlayer(playerid, FUNDOPLAY2);
			TextDrawHideForPlayer(playerid, PLAYSOLO);
			TextDrawHideForPlayer(playerid, FUNDOSKIN1);
			TextDrawHideForPlayer(playerid, FUNDOSKIN2);
			TextDrawHideForPlayer(playerid, SKIN);
			TextDrawHideForPlayer(playerid, TXTNOME);
			TextDrawHideForPlayer(playerid, TXTNIVEL);
			TextDrawHideForPlayer(playerid, TXTKILLS);
			TextDrawHideForPlayer(playerid, TXTDEATHS);
			TextDrawHideForPlayer(playerid, TXTWINS);
			TextDrawHideForPlayer(playerid, FUNDODUO1);
			TextDrawHideForPlayer(playerid, FUNDODUO2);
			TextDrawHideForPlayer(playerid, PLAYDUO);
			TextDrawHideForPlayer(playerid, FUNDOSQUAD1);
			TextDrawHideForPlayer(playerid, FUNDOSQUAD2);
			TextDrawHideForPlayer(playerid, PLAYSQUAD);
			TextDrawHideForPlayer(playerid, GTA);
			TextDrawHideForPlayer(playerid, SANROYALE);
			TextDrawHideForPlayer(playerid, TXTVERSION);
			TextDrawHideForPlayer(playerid, TCCPROJECT);
			TextDrawHideForPlayer(playerid, TXTDINHEIRO);
			TextDrawHideForPlayer(playerid, FUNDOLOJA1);
			TextDrawHideForPlayer(playerid, FUNDOLOJA2);
			TextDrawHideForPlayer(playerid, BTNLOJA);
			TextDrawHideForPlayer(playerid, TXTLOJA);
			CancelSelectTextDraw(playerid);
			//finalizarjogo--;
			/*
			for(new i;i < 50;i++)
			{
			if(!IsPlayerInMeio4(i))
			{
			KillTimer(gz[i]);
    		KillTimer(dano[i]);
    		//KillTimer(finalizar[i]);
			GZ_ShapeHideForPlayer(i, GZS1);
			GZ_ShapeHideForPlayer(i, GZS2);
			}
			}*/
			//TimerCarregar[playerid] = SetTimerEx("CarregarPartida",segundos(10),false, "i",playerid);
			js++;
			SetSpawnInfo(playerid,0,0,-2317.4500,-1626.7667,483.9585,0,0,0,0,0,0,0); //-2317.4500,-1626.7667,483.9585
            //1592.5006,-1517.4813,13.5852
			SpawnPlayer(playerid);


			SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 players para o jogo iniciar");
			
			//if(jogoini == 0)
			//{
			
   			if(js >= 2)
    		{
    		    finalizarjogo = 0;
    		    tempo = 10;
  				msginiciar[playerid] = SetTimerEx("MsgIniciar", segundos(1), true, "i", playerid);
				for(new i;i < 50;i++)
				{
				iniciar[playerid] = SetTimerEx("Iniciar", segundos(10), false, "i", i);
  				}
  				//spawnaritens[playerid] = SetTimer("SpawnarItens", 1, true);
				finalizarjogo = js;
				//jogoini++;
  			}
  			//}

            
          

			}
		if(clickedid == Text:FECHARMAPA){
			TextDrawHideForPlayer(playerid, MAPA);
			TextDrawHideForPlayer(playerid, FECHARMAPA);
			TextDrawShowForPlayer(playerid, Hora);
			CancelSelectTextDraw(playerid);
		}
		if(clickedid == Text:BTNMENUVIT){
		    TextDrawHideForPlayer(playerid, ImagemEntrada);
			TextDrawHideForPlayer(playerid, FUNDOVITORIA1);
			TextDrawHideForPlayer(playerid, FUNDOVITORIA2);
			TextDrawHideForPlayer(playerid, FUNDOVITORIA3);
			TextDrawHideForPlayer(playerid, MSGVITORIA1);
			TextDrawHideForPlayer(playerid, MSGVITORIA2);
			TextDrawHideForPlayer(playerid, TXTRANKVITORIA);
			TextDrawHideForPlayer(playerid, SKINGALINHA);
			TextDrawHideForPlayer(playerid, FUNDOBTNMENUVIT1);
			TextDrawHideForPlayer(playerid, FUNDOBTNMENUVIT2);
			TextDrawHideForPlayer(playerid, BTNMENUVIT);
			TextDrawShowForPlayer(playerid, CARREGANDO1);
			new rand = random(14), str[30];
			format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
			TextDrawSetString(CARREGANDO2, str);
			TextDrawShowForPlayer(playerid, CARREGANDO2);
   			TimerLoading[playerid] = SetTimerEx("Loading",segundos(5),false, "i",playerid);
		}
		if(clickedid == Text:BTNMENUDER){
			TextDrawHideForPlayer(playerid, ImagemEntrada);
		    TextDrawHideForPlayer(playerid, FUNDODERROTA1);
			TextDrawHideForPlayer(playerid, FUNDODERROTA2);
			TextDrawHideForPlayer(playerid, FUNDODERROTA3);
			TextDrawHideForPlayer(playerid, MSGDERROTA1);
			TextDrawHideForPlayer(playerid, MSGDERROTA2);
			TextDrawHideForPlayer(playerid, TXTRANKDERROTA);
			TextDrawHideForPlayer(playerid, TXTQUEMMATOU);
			TextDrawHideForPlayer(playerid, SKINGALINHA);
			TextDrawHideForPlayer(playerid, FUNDOBTNMENUDER1);
			TextDrawHideForPlayer(playerid, FUNDOBTNMENUDER2);
			TextDrawHideForPlayer(playerid, BTNMENUDER);
		    TextDrawShowForPlayer(playerid, CARREGANDO1);
		    new rand = random(14), str[30];
			format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
			TextDrawSetString(CARREGANDO2, str);
			TextDrawShowForPlayer(playerid, CARREGANDO2);
   			TimerLoading[playerid] = SetTimerEx("Loading",segundos(5),false, "i",playerid);
		}
		if(clickedid == Text:BTNLOJA){
		    TextDrawShowForPlayer(playerid,	FUNDOMERCADO1);
			TextDrawShowForPlayer(playerid,	FUNDOMERCADO2);
			TextDrawShowForPlayer(playerid,	FUNDOMERCADO3);
			TextDrawShowForPlayer(playerid,	FUNDOTITULO1);
			TextDrawShowForPlayer(playerid,	FUNDOTITULO2);
			TextDrawShowForPlayer(playerid,	FUNDOTITULO3);
			TextDrawShowForPlayer(playerid,	TXTMERCADO);
			TextDrawShowForPlayer(playerid,	FUNDOFECHAR);
			TextDrawShowForPlayer(playerid,	BTNFECHAR);
			TextDrawHideForPlayer(playerid, BTNLOJA);
			SelectTextDraw(playerid, 0xFFFF00FF);
		}
		if(clickedid == Text:BTNFECHAR){
			TextDrawHideForPlayer(playerid,	FUNDOMERCADO1);
			TextDrawHideForPlayer(playerid,	FUNDOMERCADO2);
			TextDrawHideForPlayer(playerid,	FUNDOMERCADO3);
			TextDrawHideForPlayer(playerid,	FUNDOTITULO1);
			TextDrawHideForPlayer(playerid,	FUNDOTITULO2);
			TextDrawHideForPlayer(playerid,	FUNDOTITULO3);
			TextDrawHideForPlayer(playerid,	TXTMERCADO);
			TextDrawHideForPlayer(playerid,	FUNDOFECHAR);
			TextDrawHideForPlayer(playerid,	BTNFECHAR);
			TextDrawShowForPlayer(playerid, BTNLOJA);
		}
		if(clickedid == Text:INVALID_TEXT_DRAW)
		{
 			if(Player[playerid][inInventory])
 				HideInventory(playerid);
		}
 		else if(clickedid == inventario_close[0])
    	{
        	HideInventory(playerid);
    	}
    	else if(clickedid == inventario_usar)
    	{
    		if(pInventory[playerid][invSelectedSlot] == -1)
   			return 0;

			new slot = pInventory[playerid][invSelectedSlot];

			pInventory[playerid][invSelectedSlot] = -1;
        	UseItem(playerid, slot, Itens[pInventory[playerid][invSlot][slot]][item_id]);
    	}
    	else if(clickedid == inventario_split[0])
    	{
        	if(pInventory[playerid][invSelectedSlot] == -1)
            return 0;

        	if(InventoryFull(playerid))
            return ShowMessageInventory(playerid, "~r~ERRO: ~w~Seu inventário está cheio.");

        	new slot = pInventory[playerid][invSelectedSlot];

			if(pInventory[playerid][invSlotAmount][slot] <= 1)
            return ShowMessageInventory(playerid, "~r~ERRO: ~w~Você não pode dividir esse item.");

        	SplitItem(playerid, pInventory[playerid][invSelectedSlot]);
    	}
    	else if(clickedid == inventario_drop[0])
    	{
        	if(pInventory[playerid][invSelectedSlot] == -1)
            return 0;

        	new slot = pInventory[playerid][invSelectedSlot];
        	new itemid = pInventory[playerid][invSlot][slot];
        	new amount = pInventory[playerid][invSlotAmount][slot];
        	new Float:armourstatus = pInventory[playerid][invArmourStatus][slot];
			new Float:pos[3];

			if(!Itens[itemid][item_canbedropped])
			return ShowMessageInventory(playerid, "~r~ERRO: ~w~Você não pode dropar esse item.");

			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

			if(itemid == 4 || itemid == 5 || itemid == 6)
			DropItem(pos[0], pos[1], pos[2], itemid, amount, armourstatus);
			else
	    	DropItem(pos[0], pos[1], pos[2], itemid, amount);

			RemoveItemFromInventory(playerid, slot);

	   		for(new a = 0; a < 4; a++)
		   	PlayerTextDrawHide(playerid, inventario_description[playerid][a]);

			TextDrawHideForPlayer(playerid, inventario_backgrounds[4]);

			pInventory[playerid][invSelectedSlot] = -1;

    	}
    	else if(clickedid == inventario_remover)
    	{
        	if(pCharacter[playerid][charSelectedSlot] == -1)
            	return 0;

			if(InventoryFull(playerid))
	        	return ShowMessageInventory(playerid, "~r~ERRO: ~w~Seu inventário está cheio.");

        	new selected = pCharacter[playerid][charSelectedSlot];

			if(selected == 2)
        		if(SlotsInUse(playerid) > 5)
       				return ShowMessageInventory(playerid,"~r~ERRO: ~w~Esvazie os itens de sua mochila.");

  			if(selected == 2)
        		if(SlotsInUse(playerid) >= 5)
        			return ShowMessageInventory(playerid,"~r~ERRO: ~w~Não tem espaço no seu inventário.");

			if(selected == 1)
            	AddItem(playerid, pCharacter[playerid][charSlot][selected], 1, pCharacter[playerid][charArmourStatus]);
       	 	else if(Itens[pCharacter[playerid][charSlot][selected]][item_id] == 5 || Itens[pCharacter[playerid][charSlot][selected]][item_id] == 17)
        	{
	        	new weapons[13][2];

	        	for (new s = 0; s <= 12; s++)
			    	GetPlayerWeaponData(playerid, s, weapons[s][0], weapons[s][1]);

            	AddItem(playerid, pCharacter[playerid][charSlot][selected], weapons[8][1]);
			}
    		else
   				AddItem(playerid, pCharacter[playerid][charSlot][selected], 1);

        	RemoveItemFromCharacter(playerid, selected);

			pCharacter[playerid][charSelectedSlot] = -1;
    	}

		return 1;
}
//Relogio
public Relogio()
{
	new string[128], string2[128];

	new minuto, hora, segundo, dia, mes, ano;

	getdate(ano, mes, dia);
 	gettime(hora, minuto, segundo);

	new convertermes[20];

	if(mes == 1) { convertermes = "1"; }
	else if(mes == 2) { convertermes = "2"; }
	else if(mes == 3) { convertermes = "3"; }
	else if(mes == 4) { convertermes = "4"; }
	else if(mes == 5) { convertermes = "5"; }
	else if(mes == 6) { convertermes = "6"; }
	else if(mes == 7) { convertermes = "7"; }
	else if(mes == 8) { convertermes = "8"; }
	else if(mes == 9) { convertermes = "9"; }
	else if(mes == 10) { convertermes = "10"; }
	else if(mes == 11) { convertermes = "11"; }
	else if(mes == 12) { convertermes = "12"; }

	format(string, sizeof(string), "%d/%s/%d", dia, convertermes, ano);
	TextDrawSetString(Data, string);
	format(string2, sizeof(string2), "%02d:%02d:%02d", hora, minuto, segundo);
	TextDrawSetString(Hora, string2);

	if(hora == 6) {
		SetWorldTime(8);
	}
    else if(hora == 9) {
		SetWorldTime(10);
	}
    else if(hora == 12) {
		SetWorldTime(12);
	}
    else if(hora == 13) {
		SetWorldTime(15);
	}
    else if(hora == 14) {
		SetWorldTime(16);
	}
    else if(hora == 15) {
		SetWorldTime(18);
	}
    else if(hora == 17) {
		SetWorldTime(19);
	}
    else if(hora == 17) {
		SetWorldTime(20);
	}
    else if(hora == 18) {
		SetWorldTime(21);
	}
    else if(hora == 19) {
		SetWorldTime(23);
	}
    else if(hora == 20) {
		SetWorldTime(0);
	}
    else if(hora == 22) {
		SetWorldTime(0);
	}
    else if(hora == 0) {
		SetWorldTime(3);
	}
    else if(hora == 5) {
		SetWorldTime(5);
	}

	return 1;
}
//-------
static stock ChecarVeiculo(Float:radi, playerid, vehicleid)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radi, x, y, z))
	    return 1;
	return 0;
}
//===== COMANDOS =====
new JogadorAlvoDaVotacao;
CMD:votekick(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff])
	{
 		if(!votacao[iniciada])
		{
 			if(sscanf(params,"u", JogadorAlvoDaVotacao)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /votekick [id]");
			if(IsPlayerConnected(JogadorAlvoDaVotacao))
			{
				if(!IsPlayerNPC(JogadorAlvoDaVotacao) && JogadorAlvoDaVotacao != INVALID_PLAYER_ID)
				{
				    if(PlayerInfo[JogadorAlvoDaVotacao][pStaff] <= 1)
				    {
						new string[128], Str1[128];
						SendClientMessageToAll(-1, "_____________________________________________");
						format(string, sizeof string, ">>> || [VOTAÇÃO INICIADA POR %s] ||", PlayerInfo[playerid][pNome]);
						SendClientMessageToAll(COR_VERDE, string);
						SendClientMessageToAll(-1, "_____________________________________________");

						TextDrawShowForAll(FUNDOVOTE1);
						TextDrawShowForAll(FUNDOVOTE2);
						TextDrawShowForAll(FUNDOVOTE3);
						TextDrawShowForAll(TXTVOTACAO1);
						TextDrawShowForAll(TXTVOTACAO2);
						TextDrawShowForAll(TXTVOTACAO3);
						TextDrawShowForAll(NICKVOTE);
						format(Str1,sizeof(Str1),"%s",PlayerInfo[JogadorAlvoDaVotacao][pNome]);
						TextDrawSetString(NICKVOTE,Str1);


						votacao[iniciada] = true;
						votacao[sim] = 0;
						votacao[nao] = 0;
						for(new i; i < MAX_PLAYERS; i++)
						{
							votou[i] = false;
						}
						SetTimer("Votacao", minutos(1), false);
					}
					else
					{
						SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Você não pode kickar um membro da Staff!");
					}
				}
				else
				{
					SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Jogador NPC ou id invalido!");
				}
			}
			else
			{
				SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Jogador não conectado!");
			}
		}
		else
		{
			SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Já existe uma votação em andamento!");
		}
	}
	else
	{
		SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Você não pode executar este comando!");
	}
	return true;
}
/*CMD:encerrar(playerid)
{
    if(PlayerInfo[playerid][pStaff] >= 0)
    {
    	if(votacao[iniciada])
		{
		    new string[128];
		    SendClientMessageToAll(-1, "__________________________________________________________________________");
			SendClientMessageToAll(0xFFFFFFAA, "|| [VOTAÇÃO ENCERRADA] ||");
			format(string, sizeof string, "[SIM] %d || %d [NÃO]", votacao[sim], votacao[nao]);
			SendClientMessageToAll(COLOR_LIGHTBLUE,string);
			if(votacao[sim] == votacao[nao])
			{
				SendClientMessageToAll(0xFF0000AA, ">>>[RESULTADO] Houve um empate na votação!");
			}
			else if(votacao[sim] > votacao[nao])
			{
				SendClientMessageToAll(COLOR_YELLOW, ">>>[RESULTADO] A maioria votou em SIM, jogador será kickado!");
				Kick(id);
			}
			else if(votacao[sim] < votacao[nao])
			{
				SendClientMessageToAll(COLOR_YELLOW, ">>>[RESULTADO] A maioria votou em NÃO, jogador não será kickado!");
			}
			SendClientMessageToAll(-1, "__________________________________________________________________________");
			votacao[iniciada] = false;
			votacao[sim] = 0;
			votacao[nao] = 0;

			for(new i; i < MAX_PLAYERS; i++)
			{
				votou[i] = false;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Nenhuma votação criada!");
		}
	}
	else
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
	}
	return true;
}*/
CMD:sim(playerid)
{
	if(votacao[iniciada] && !votou[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Você votou em SIM para kickar o jogador!");
		votacao[sim]++;
		votou[playerid] = true;
	}
	return true;
}
CMD:nao(playerid)
{
	if(votacao[iniciada] && !votou[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Você votou em NÃO para kickar o jogador!");
		votacao[nao]++;
		votou[playerid] = true;
	}
	return true;
}
CMD:gmx(playerid, params[])
{
    if (IsPlayerAdmin(playerid) || PlayerInfo[playerid][pStaff] == 5) // Checka se esta logado na RCON e se é admin Dono
    {
		 		MensagemDesligou = 1;
  				new Str1[128], Str2[128];
				format(Str1, sizeof(Str1), "[STAFF] [%s] ATIVOU O GMX MANUAL!", PlayerInfo[playerid][pNome]);
				format(Str2, sizeof(Str2), "[STAFF] SERVIDOR IRÁ REINICIAR DENTRO DE 5 SEGUNDOS!");
				MessageToAdmins(COLOR_LIGHTRED, Str1);
				SendClientMessageToAll(COLOR_LIGHTRED, Str2);
				SetTimer("TimeToGMX",5000, false);
	}
	else
	{
		SendClientMessage(playerid,COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
	}
	return true;
}
CMD:av(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] < 3)
	{
	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
	    return 1;
	}

	else if(PlayerInfo[playerid][pStaff] == 3)
	{
	    new texto[128];
		if(sscanf(params,"s[128]", texto)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /av [texto]");
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-= [AVISO DA STAFF] =-=-=-=-=-=-=-=-=-=");
		format(texto, sizeof(texto), "{0000FF}%s{00FF00} »» {FFFF00}%s",PlayerInfo[playerid][pNome], texto);
		SendClientMessageToAll(-1, texto);
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
	}
	else if(PlayerInfo[playerid][pStaff] == 4)
	{
	    new texto[128];
		if(sscanf(params,"s[128]", texto)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /av [texto]");
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-= [AVISO DA STAFF] =-=-=-=-=-=-=-=-=-=");
		format(texto, sizeof(texto), "{FF00FF}%s{00FF00} »» {FFFF00}%s",PlayerInfo[playerid][pNome], texto);
		SendClientMessageToAll(-1, texto);
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
	}
	else if(PlayerInfo[playerid][pStaff] == 5)
	{
	    new texto[128];
		if(sscanf(params,"s[128]", texto)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /av [texto]");
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-= [AVISO DA STAFF] =-=-=-=-=-=-=-=-=-=");
		format(texto, sizeof(texto), "{FF0000}%s{00FF00} »» {FFFF00}%s",PlayerInfo[playerid][pNome], texto);
		SendClientMessageToAll(-1, texto);
		SendClientMessageToAll(-1, "{FF0080}=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
	}
	return true;
}
CMD:setinha(playerid, params[])
{
 	SelectTextDraw(playerid, 0xFFFF00FF);
	return true;
}
CMD:deixarpartida(playerid, params[])
{
	if(PlayerInfo[playerid][pJogando] == true)
	{
		new Str[128];
		TogglePlayerSpectating(playerid, 1);
		KillTimer(TimerPartida[playerid]);
		TextDrawShowForPlayer(playerid, CARREGANDO1);
 		new rand = random(14), str[30];
		format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
		TextDrawSetString(CARREGANDO2, str);
		TextDrawShowForPlayer(playerid, CARREGANDO2);
		SetTimerEx("Loading", segundos(1), false, "i", playerid);
		format(Str, sizeof(Str), "**[AVISO] O jogador %s deixou a partida!", PlayerInfo[playerid][pNome]);
		SendClientMessageInRange(30.0, playerid, Str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pJogando] = false;
	}
	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não esta em uma partida!");}
	return true;
}
CMD:aerols(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    SetPlayerPos(playerid, 1959.2947,-2365.4194,13.5469);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você foi até o aeroporto de Los Santos!");
		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
  	}
	return true;
}
CMD:aerodeserto(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    SetPlayerPos(playerid, 173.5013,2531.5947,16.7647);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você foi até o aeroporto do Deserto!");
		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
  	}
	return true;
}
CMD:aerolv(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    SetPlayerPos(playerid, 1517.6667,1300.3564,10.8740);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você foi até o aeroporto de Las Venturas!");
		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
  	}
	return true;
}
CMD:aerosf(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    SetPlayerPos(playerid, -1318.5043,97.9726,14.1484);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você foi até o aeroporto de San Fierro!");
		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
  	}
	return true;
}
CMD:veh(playerid, params[])
{
	if (PlayerInfo[playerid][pStaff] < 5)
		return SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Você não pode executar este comando!");
	{
		new car, COLOR1, COLOR2;
		if(sscanf(params, "ddd", car, COLOR1, COLOR2))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /veh [IDCARRO] [COR1] [COR2]");
			return true;
		}
  		new string[128];
    	if(car < 400 || car > 611) { SendClientMessage(playerid, -1, "   Modelo Do Carro Tem Que Ser Entre 411 e 600 !"); return true; }
   		if(COLOR1 < 0 || COLOR1 > 236) { SendClientMessage(playerid, -1, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
		if(COLOR2 < 0 || COLOR2 > 236) { SendClientMessage(playerid, -1, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
		new intir = GetPlayerInterior(playerid);
		new carid = CreateVehicle(car, X,Y+2,Z, 0.0, COLOR1, COLOR2, 60000);
		new mot, lu, alar, por, cap, porma, ob;
		GetVehicleParamsEx(carid, mot, lu, alar, por, cap, porma, ob);
		SetVehicleParamsEx(carid, VEHICLE_PARAMS_ON, lu, alar, por, cap, porma, ob);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "AdmCmd: O admin %s criou um veículo de [ID: %d e Modelo: %d]", sendername,carid, car);
  		MessageToAdmins(COLOR_LIGHTGREEN, string);
		format(string, sizeof(string), "%s criou um carro id: %d no servidor ",sendername, car);
		LinkVehicleToInterior(carid, intir);
		}
	return true;
}
CMD:destruirid(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] < 5)
		return SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Você não pode executar este comando!");
	{
  	new testcar;
   	if(sscanf(params, "d", testcar))
	{
		new counter = 0;
		new result;
		new plyName[MAX_PLAYER_NAME];
		GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
		for(new i; i != MAX_VEHICLES; i++)
		{
			new dist = ChecarVeiculo(5, playerid, i);
			if(dist)
			{
				result = i;
				counter++;
			}
		}
		switch(counter)
		{
			case 0:
			{
				SendClientMessage(playerid, -1, "   Não há nenhum carro nesse raio!");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Caso queira por id use /destruirid [id carro]");

			}
			case 1:
			{
 	    		new string[128];
				new name[MAX_PLAYER_NAME];
    			GetPlayerName(playerid, name, sizeof(name));
				DestroyVehicle(result);
    			format(string, sizeof(string), "AdmCmd: O admin %s destruiu o veículo de [ID: %d]", name,result);
    			MessageToAdmins(COLOR_LIGHTGREEN,string);
				}
				default:
				{
					SendClientMessage(playerid, -1, "   Foram encontrados mais de um carro nesse raio");
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Caso queira por id use /destruirid [id carro]");
				}
			}
		return true;
		}
	new string[128];
	DestroyVehicle(testcar);
	format(string, sizeof(string), "AdmCmd: O admin %s destruiu o veículo de [ID: %d]", PlayerInfo[playerid][pNome],testcar);
	MessageToAdmins(COLOR_LIGHTGREEN,string);
	return 1;
	}
}
CMD:spawn(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1243.8229,-1722.2317,13.5469);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
 			SetPlayerPos(playerid, 1153.5963,-1734.2294,13.7734);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerFacingAngle(playerid, 91.2492);
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|AVISO| Você foi até o spawn!");
	}
	else
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
	}
	return 1;
}
CMD:ir(playerid, params[])
{
	new id, string[128];
	new Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    GetPlayerPos(id, x, y, z);
	    SetPlayerPos(playerid, x, y, z);
		format(string, sizeof(string), "*** [STAFF] %s foi até o jogador %s", PlayerInfo[playerid][pNome], PlayerInfo[id][pNome]);
		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "*** [STAFF] %s veio até o jogador %s", PlayerInfo[playerid][pNome], PlayerInfo[id][pNome]);
		SendClientMessageInRange(30.0, id, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
 	}

	return true;
}
CMD:trazer(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
		return 1;
	}
	new id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazer [id/nick]");
		return 1;
	}
	new Float:X,Float:Y,Float:Z;
	new string[128];
	if (IsPlayerConnected(id))
	{
		if(PlayerInfo[id][pStaff] >= 5)
		{
		SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir em um Admin Dono !");
		return true;
		}
		if(id != INVALID_PLAYER_ID)
 		{
			if (PlayerInfo[playerid][pStaff] >= 4 )
			{
				GetPlayerPos(playerid, X, Y, Z);
				if (GetPlayerState(id) == 2)
				{
					SetPlayerInterior(id,GetPlayerInterior(playerid));
 					SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
					new tmpcar = GetPlayerVehicleID(id);
					SetVehiclePos(tmpcar, X, Y+4, Z);
				}
				else
				{
	 				SetPlayerInterior(id,GetPlayerInterior(playerid));
   					SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
					SetPlayerPos(id, X, Y+2, Z);
				}
				if(PlayerInfo[playerid][pStaff] > 3)
				{
	 				format(string, sizeof(string), "*[STAFF] O Admin %s levou %s.", PlayerInfo[playerid][pNome],PlayerInfo[id][pNome]);
     				SendClientMessageInRange(30.0, id, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		  			format(string, sizeof(string), "*[STAFF] O Admin %s trouxe %s.", PlayerInfo[playerid][pNome],PlayerInfo[id][pNome]);
 		 			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
			else
			{
				SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
			}
		}
	}
	else
	{
		format(string, sizeof(string), "|ERRO| %d não esta conectado", id);
		SendClientMessage(playerid, COLOR_GRAD1, string);
	}
	return 1;
}
CMD:deus(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pStaff] >= 3)
	{
		SetPlayerHealth(playerid,99999);//acho q é cinco '9' pra ficar imortal...
		SendClientMessage(playerid, COR_VERDE,"|SUCESSO| Agora estas imortal!");
		format(string, sizeof(string), "AdmCmd: O admin %s esta no modo Deus!", PlayerInfo[playerid][pNome]);
		MessageToAdmins(COLOR_LIGHTGREEN, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
	}

	return 1;
}
CMD:pv(playerid, params[])
{
	new id, texto[128];
	if(!PlayerInfo[playerid][pLogado] == false)
	{
 		new Str[128];
		if(sscanf(params, "us[128]", id, texto)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /pv [id] [msg]");
  		if(IsPlayerConnected(id))
  		{
  			if(PlayerInfo[id][pJogando] == false)
	        {
				format(Str, sizeof(Str), "[P.V] (%s) %s", PlayerInfo[playerid][pNome], texto);
				SendClientMessage(id, 0xFF8000FF, Str);
				SendClientMessage(playerid, 0xFF8040FF, "[P.V] Mensagem Particular Enviada!");
			}
			else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Jogador em partida, espere um pouco para enviar!");}
		}
		else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Jogador não esta conectado!");}
	}
	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você ainda não fez login!");}
	return true;
}
CMD:a(playerid, params[])
{
    if(PlayerInfo[playerid][pStaff] >= 3)
    {
        if(PlayerInfo[playerid][pStaff] == 3)
        {
        	new texto[128], Str[128];
        	if(sscanf(params, "s[128]", texto)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /a [TEXTO]");
        	format(Str, sizeof(Str), "[CHAT] [{0000FF}%s{FF00FF}]:{FF00FF} %s", PlayerInfo[playerid][pNome], texto);
        	MessageToAdmins(0xFF00FFFF, Str);
       	}
       	else if(PlayerInfo[playerid][pStaff] == 4)
        {
        	new texto[128], Str[128];
        	if(sscanf(params, "s[128]", texto)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /a [TEXTO]");
        	format(Str, sizeof(Str), "[CHAT] [{FF0080}%s{FF00FF}]:{FF00FF} %s", PlayerInfo[playerid][pNome], texto);
        	MessageToAdmins(0xFF00FFFF, Str);
       	}
       	else if(PlayerInfo[playerid][pStaff] == 5)
        {
        	new texto[128], Str[128];
        	if(sscanf(params, "s[128]", texto)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /a [TEXTO]");
        	format(Str, sizeof(Str), "[CHAT] [{FF0000}%s{FF00FF}]:{FF00FF} %s", PlayerInfo[playerid][pNome], texto);
        	MessageToAdmins(0xFF00FFFF, Str);
       	}
    }
	else
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
        return 1;

	}
    return 1;
}
CMD:h(playerid, params[])
{
    if(PlayerInfo[playerid][pStaff] == 2)
    {
        	new texto[128], Str[128];
        	if(sscanf(params, "s[128]", texto)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /a [TEXTO]");
        	format(Str, sizeof(Str), "[CHAT] [{FFFFFF}%s{00FF80}]:{00FF80} %s", PlayerInfo[playerid][pNome], texto);
        	MessageToHelpers(0x00FF80FF, Str);
    }
	else
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
        return 1;

	}
    return 1;
}
CMD:dargrana(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 4 || IsPlayerAdmin(playerid))
	{
		new id, quantia, motivo[50];
		if(sscanf(params, "uds[128]", id, quantia, motivo))return SendClientMessage(playerid, COR_AMARELO, "|USE| /dargrana [ID] [QUANTIDADE] [MOTIVO]");
		{
			if(quantia > 1 || quantia < 10000)
			{
  				if(id != INVALID_PLAYER_ID || IsPlayerConnected(id))
    			{
   					new string[128];
					format(string, sizeof string, "[STAFF]Você deu $%d reais para %s  |MOTIVO| %s", quantia, PlayerInfo[id][pNome], motivo);
					SendClientMessage(playerid, COR_VERDE, string);
					format(string, sizeof string, "[STAFF]O admin %s te deu $%d reais  |MOTIVO| %s", PlayerInfo[playerid][pNome], quantia, motivo);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					GivePlayerMoney(id, quantia);
					format(string, 128, "[STAFF]: %s deu $%d reais para %s  |MOTIVO| %s",PlayerInfo[playerid][pNome], quantia, PlayerInfo[id][pNome], motivo);
     				MessageToAdmins(COLOR_LIGHTGREEN,string);
					SalvarDinheiro(id);
				}else{
				    SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Id inválido ou jogador não esta online!");
				    return 1;}
			}else{
				SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Quantia deve ser entre 1 e 10000!");
			    return 1;}
		}
	}else{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
		return 1;}
	return 1;
}
CMD:additem(playerid, params[])
{
    new
	    id, item, amount;

	if(sscanf(params, "uii", id, item, amount))
		return SendClientMessage(playerid, -1, "/additem <id/nick> <id do item> <quantidade>");

   	AddItem(id, item, amount);

	format(String, sizeof(String), "ITEM ADICIONADO (%d) (%d) (%d)", id, item, amount);
	SendClientMessage(playerid, -1, String);
	return true;
}
CMD:regras(playerid, params[])
{
    MEGAString[0] = EOS;
    if(PlayerInfo[playerid][pStaff] >= 0)
    {
        strcat(MEGAString, "{FF0080}1. {FFFFFF}É proibido o uso de qualquer cheat ou modificação que de vantagem ao jogador.\n");
        strcat(MEGAString, "{FF0080}2. {FFFFFF}É proibido qualquer tipo de desrespeito para com os membros da Staff.\n");
        strcat(MEGAString, "{FF0080}3. {FFFFFF}É proibido cometer flood ou spam em qualquer chat ou meio de comunicação do servidor.\n");
        strcat(MEGAString, "{FF0080}4. {FFFFFF}É proibido suborno ou qualquer outro tipo de corrupção em nosso servidor.\n");
        strcat(MEGAString, "{FF0080}5. {FFFFFF}É proibido qualquer tipo de preconceito dentro e fora do servidor.\n");
        strcat(MEGAString, "{FF0080}6. {FFFFFF}É proibido qualquer tipo de comportamento anti-jogo dentro e fora do servidor.\n");
        strcat(MEGAString, "{FF0080}7. {FFFFFF}É proibido a divulgação de outros servidores que não são nossos parceiros.\n");
        strcat(MEGAString, "{FF0080}8. {FFFFFF}É proibido realizar qualquer tipo de transação com membros da Staff não Fundadores.\n");
        strcat(MEGAString, "{FF0080}9. {FFFFFF}É proibido qualquer tipo de pornografia ou similares dentro e fora do servidor.\n");
        strcat(MEGAString, "{FF0080}10. {FFFFFF}É proibido a divulgação de redes sociais por questões de segurança.\n\n");

        strcat(MEGAString, "{FF0080}Obs: O descumprimento das regras poderá resultar em punições para com o jogador.\n");
    }
    ShowPlayerDialog(playerid, 10, DIALOG_STYLE_MSGBOX, "REGRAS DO SERVIDOR", MEGAString, "ENTENDI", "");

	return true;
}
CMD:ajuda(playerid,params[])
{
    MEGAString[0] = EOS;
    if(PlayerInfo[playerid][pStaff] == 0)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS JOGADOR] |<>|\n\n");


        strcat(MEGAString, "/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n");
	}
	else if(PlayerInfo[playerid][pStaff] == 1)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS TESTADOR] |<>|\n\n");


        strcat(MEGAString, "{0080FF}/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "{0080FF}/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "{0080FF}/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n");

        strcat(MEGAString, "{0080FF}");
	}
	else if(PlayerInfo[playerid][pStaff] == 2)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS AJUDANTE] |<>|\n\n");


        strcat(MEGAString, "{0080FF}/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "{0080FF}/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "{0080FF}/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n\n");

        strcat(MEGAString, "{0080FF}/h  {FFFFFF}-- > {FF0080}Usa o chat dos Ajudantes.\n");
	}
    else if(PlayerInfo[playerid][pStaff] == 3)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS MODERADOR] |<>|\n\n");


        strcat(MEGAString, "{0080FF}/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "{0080FF}/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "{0080FF}/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n\n");

        strcat(MEGAString, "{0080FF}/kick  {FFFFFF}-- > {FF0080}Kicka o jogador alvo para fora do servidor (só use no caso de quebra de regras).\n");
        strcat(MEGAString, "{0080FF}/jetpack  {FFFFFF}--> {FF0080}Pega uma jetpack para se locomover facilmente pelo mapa.\n");
        strcat(MEGAString, "{0080FF}/a  {FFFFFF}--> {FF0080}Usa o chat da Staff.\n\n");

        strcat(MEGAString, "{0080FF}/aerols  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LS.\n");
        strcat(MEGAString, "{0080FF}/aerolv  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LV.\n");
        strcat(MEGAString, "{0080FF}/aerosf  {FFFFFF}-- > {FF0080}Vai até o aeroporto de SF.\n\n");

        strcat(MEGAString, "{0080FF}/aerodeserto  {FFFFFF}-- > {FF0080}Vai até o aeroporto do Deserto.\n");

	}
    else if(PlayerInfo[playerid][pStaff] == 4)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS ADMINISTRADOR] |<>|\n\n");


        strcat(MEGAString, "{0080FF}/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "{0080FF}/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "{0080FF}/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n\n");

        strcat(MEGAString, "{0080FF}/kick  {FFFFFF}-- > {FF0080}Kicka o jogador alvo para fora do servidor (só use no caso de quebra de regras).\n");
        strcat(MEGAString, "{0080FF}/ban  {FFFFFF}-- > {FF0080}Bane o jogador alvo do servidor (só use no caso de cheaters ou abusos de regras).\n");
        strcat(MEGAString, "{0080FF}/jetpack  {FFFFFF}--> {FF0080}Pega uma jetpack para se locomover facilmente pelo mapa.\n\n");

        strcat(MEGAString, "{0080FF}/dargrana  {FFFFFF}--> {FF0080}Da dinheiro ao jogador (só use em caso de bugs com conta).\n");
        strcat(MEGAString, "{0080FF}/spawn  {FFFFFF}--> {FF0080}Retorna para ponto de nascimento.\n");
        strcat(MEGAString, "{0080FF}/a  {FFFFFF}--> {FF0080}Usa o chat da Staff.\n\n");

        strcat(MEGAString, "{0080FF}/aerols  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LS.\n");
        strcat(MEGAString, "{0080FF}/aerolv  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LV.\n");
        strcat(MEGAString, "{0080FF}/aerosf  {FFFFFF}-- > {FF0080}Vai até o aeroporto de SF.\n\n");

        strcat(MEGAString, "{0080FF}/aerodeserto  {FFFFFF}-- > {FF0080}Vai até o aeroporto do Deserto.\n");
        strcat(MEGAString, "{0080FF}/deus  {FFFFFF}-- > {FF0080}Entra no modo imortal.\n");
	}
    else if(PlayerInfo[playerid][pStaff] == 5)
    {
        strcat(MEGAString, "{FF0080}|<>| [COMANDOS FUNDADOR] |<>|\n\n");


        strcat(MEGAString, "{0080FF}/staff  {FFFFFF}-- > {FF0080}Mostra todos os membros da Staff que estão online.\n");
        strcat(MEGAString, "{0080FF}/pv  {FFFFFF}-- > {FF0080}Envia mensagem particular a jogador alvo.\n");
        strcat(MEGAString, "{0080FF}/regras  {FFFFFF}-- > {FF0080}Mostra algumas das regras mais importantes do servidor.\n\n");

        strcat(MEGAString, "{0080FF}/kick  {FFFFFF}-- > {FF0080}Kicka o jogador alvo para fora do servidor (só use no caso de quebra de regras).\n");
        strcat(MEGAString, "{0080FF}/ban  {FFFFFF}-- > {FF0080}Bane o jogador alvo do servidor (só use no caso de cheaters ou abusos de regras).\n");
        strcat(MEGAString, "{0080FF}/gmx  {FFFFFF}-- > {FF0080}Força uma reinicialização do servidor (só use no caso de hackers ou bugs extremos).\n\n");

        strcat(MEGAString, "{0080FF}/jetpack  {FFFFFF}--> {FF0080}Pega uma jetpack para se locomover facilmente pelo mapa.\n");
		strcat(MEGAString, "{0080FF}/dargrana  {FFFFFF}--> {FF0080}Da dinheiro ao jogador (só use em caso de bugs com conta).\n");
	 	strcat(MEGAString, "{0080FF}/spawn  {FFFFFF}--> {FF0080}Retorna para ponto de nascimento.\n\n");

	 	strcat(MEGAString, "{0080FF}/a  {FFFFFF}--> {FF0080}Usa o chat da Staff.\n");
	 	strcat(MEGAString, "{0080FF}/deus  {FFFFFF}-- > {FF0080}Entra no modo imortal.\n");
	 	strcat(MEGAString, "{0080FF}/veh  {FFFFFF}-- > {FF0080}Cria um veiculo.\n\n");

	 	strcat(MEGAString, "{0080FF}/aerols  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LS.\n");
        strcat(MEGAString, "{0080FF}/aerolv  {FFFFFF}-- > {FF0080}Vai até o aeroporto de LV.\n");
        strcat(MEGAString, "{0080FF}/aerosf  {FFFFFF}-- > {FF0080}Vai até o aeroporto de SF.\n\n");

        strcat(MEGAString, "{0080FF}/aerodeserto  {FFFFFF}-- > {FF0080}Vai até o aeroporto do Deserto.\n");
        strcat(MEGAString, "{0080FF}/destruirid  {FFFFFF}-- > {FF0080}Destroi um veiculo criado.\n");
	}

	ShowPlayerDialog(playerid, 10, DIALOG_STYLE_MSGBOX, "COMANDOS", MEGAString, "ENTENDI", "");
	return true;
}
CMD:jetpack(playerid,params[])
{
    if(PlayerInfo[playerid][pStaff] >= 3)
	{
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	    SendClientMessage(playerid, COR_VERDE, "|SUCESSO| Voce pegou seu Jetpack!");
	}
	else
 	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
		return 1;
	}
	return 1;
}
CMD:limparchat(playerid,params[])
{
	new str[100];
	if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pStaff] >=4)
	{
		for(new i=0;i < 50; i++)
		{
			format(str, sizeof(str), " ");
			SendClientMessageToAll(COLOR_GRAD1,str);
		}
		format(str,sizeof(str),"[STAFF] [%s] %s limpou o chat!",PlayerInfo[playerid][pCargo],PlayerInfo[playerid][pNome]);
		SendClientMessageToAll(COLOR_LIGHTGREEN, str);
	}
	else
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");
		return 1;
	}
	return 1;
}
CMD:matar(playerid, params[])
{
	new id, motivo[50];
	if(sscanf(params,"us[50]",id,motivo)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /matar [ID do Player] [motivo]");
	else if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_VERMELHO,"|ERRO| Jogador não conectado!");
	else
	{
	    if(PlayerInfo[playerid][pStaff] >= 4 || IsPlayerAdmin(playerid) == 1)
	    {
	    new str[100];
	    format(str,sizeof(str),"[STAFF][%s] %s MATOU O JOGADOR %s  |  MOTIVO: %s",PlayerInfo[playerid][pCargo],PlayerInfo[playerid][pNome],PlayerInfo[id][pNome], motivo);
		SendClientMessageToAll(COLOR_LIGHTRED,str);
		SetPlayerHealth(id, 0);
		}
	}
	return true;
}
CMD:kick(playerid,params[])
{
    new id, motivo[50];
    if(sscanf(params,"us[50]", id, motivo)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /kick [ID do Player] [motivo]");
    else if(!IsPlayerConnected(id))  return SendClientMessage(playerid,	COR_VERMELHO,"|ERRO| Jogador não conectado!");
    else
    {
        if(PlayerInfo[playerid][pStaff] >= 3 || IsPlayerAdmin(playerid) == 1)
        {
        	if(PlayerInfo[id][pStaff] != 5 || PlayerInfo[id][pStaff] != 4)
        	{
				new str[100];
        		format(str,sizeof(str),"[STAFF] %s KICKOU O JOGADOR %s  |  MOTIVO: %s",PlayerInfo[playerid][pNome],PlayerInfo[id][pNome], motivo);
        		SendClientMessageToAll(COLOR_LIGHTRED, str);
        		Kick(id);
        	}
        	else
        	{
				SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode banir este nivel de Staff!");
				return 1;
			}
    	}
   	}
    return true;
}
CMD:criarstaff(playerid, params[])
{
	new id, cargo, funcao[64], Query[90];
 	if(sscanf(params, "uds[64]", id, cargo, funcao)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /criarstaff [id] [3 - 5] [funcao]");
 	else if(!IsPlayerConnected(id))  return SendClientMessage(playerid,	COR_VERMELHO,"|ERRO| Jogador não conectado!.");
 	else
 	{
 		if(PlayerInfo[playerid][pStaff] == 5 || IsPlayerAdmin(playerid))
 		{
 		    if(cargo >= 3 && cargo <= 5)
 		    {
 		        new str[100];
 		        PlayerInfo[id][pStaff] = cargo;
 		        PlayerInfo[id][pCargo] = funcao;
 		        mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Staff`=%d, `Cargo`='%s' WHERE `Nome`='%s'",PlayerInfo[id][pStaff],PlayerInfo[id][pCargo], PlayerInfo[id][pNome]);
				format(str,sizeof(str), "AdmCmd: O Fundador %s deu nivel %d de staff para %s", PlayerInfo[playerid][pNome],cargo,PlayerInfo[id][pNome]);
				MessageToAdmins(COLOR_LIGHTGREEN, str);
			}
       		else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode criar um staff -3 ou +5!");}
 		}
 		else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");}
	}
	return true;
}
CMD:removerstaff(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] == 5)
	{
		new id, motivo, Query[140];
		if(sscanf(params, "us[128]", id, motivo))	return SendClientMessage(playerid, COR_AMARELO, "|USE| /removerstaff [id] [motivo]");
		GetPlayerName(id, PlayerInfo[id][pNome], 24);
		mysql_format(IDConexao, Query, sizeof(Query), "SELECT `Senha`, `ID` FROM `Contas` WHERE `Nome`='%s'", PlayerInfo[id][pNome]);
		mysql_tquery(IDConexao, Query, "RemoverStaff", "i", id);
	}
	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");}
	return true;
}
CMD:ban(playerid,params[])
{
	new id, motivo[128];
	if(sscanf(params, "us[128]", id, motivo)) return SendClientMessage(playerid,COR_AMARELO,"|USE| /ban [ID do Player] [motivo]");
	else if(!IsPlayerConnected(id))  return SendClientMessage(playerid,	COR_VERMELHO,"|ERRO| Jogador não conectado!.");
	else
	{
	    if(PlayerInfo[playerid][pStaff] >= 4 || IsPlayerAdmin(playerid))
	    {
			if(PlayerInfo[id][pStaff] != 5)
	    	{
			    new str[128], Query[128];
			    format(str,sizeof(str),"[STAFF] %s BANIU O JOGADOR %s  |  MOTIVO: %s",PlayerInfo[playerid][pNome],PlayerInfo[id][pNome], motivo);
			    SendClientMessageToAll(COLOR_LIGHTRED, str);
				PlayerInfo[id][pBanido] = 1;
				mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Motivo`='%s',`Banido`=%d WHERE `Nome`='%s'", motivo,PlayerInfo[id][pBanido],PlayerInfo[id][pNome]);
				Ban(id);
	    	}
	    	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode banir este nivel de Staff!");}
 		}
 		else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");}
	}
	return true;
}
CMD:desban(playerid, params[])
{
	if(PlayerInfo[playerid][pStaff] >= 4)
	{
	    new id;
		if(sscanf(params, "ss[50]", id)) return SendClientMessage(playerid, COR_AMARELO, "|USE| /desban [Nome do Player]");
	    GetPlayerName(id, PlayerInfo[id][pNome], 24);
	    new Query[90];

	    mysql_format(IDConexao, Query, sizeof(Query), "SELECT `Banido` FROM `Contas` WHERE `Nome`='%s'", PlayerInfo[id][pNome]);
		mysql_tquery(IDConexao, Query, "DesbanirConta", "i", playerid);
	}
	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Você não pode executar este comando!");}
	return true;
}
CMD:staff(playerid, params[])
{
	SendClientMessage(playerid, COLOR_ADMIN, "STAFF ONLINE:");
	foreach(Player, i)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new string[200];
		if(IsPlayerAdmin(playerid))
		format(string, 128, "{9ACD32}[STAFF] {FFFFFF}%s {9ACD32}| CARGO: {FFFFFF}ADMIN RCON{9ACD32}|",sendername);
		else if(PlayerInfo[playerid][pStaff] == 3)
		format(string, 128, "{00FF7F}[STAFF] {FFFFFF}%s {00FF7F}| CARGO: {7F00FF}MODERADOR{00FF7F}| FUNÇÃO: {FFFFFF}%s{00FF7F}|", sendername, PlayerInfo[playerid][pCargo]);
		else if(PlayerInfo[playerid][pStaff] == 4)
		format(string, 128, "{00FF7F}[STAFF] {FFFFFF}%s {00FF7F}| CARGO: {FF1CAE}ADMINISTRADOR{00FF7F}| FUNÇÃO: {FFFFFF}%s{00FF7F}|", sendername, PlayerInfo[playerid][pCargo]);
		else if(PlayerInfo[playerid][pStaff] == 5)
		format(string, 128, "{00FF7F}[STAFF] {FFFFFF}%s {00FF7F}| CARGO: {FF0000}FUNDADOR{00FF7F}| FUNÇÃO: {FFFFFF}%s{00FF7F}|", sendername, PlayerInfo[playerid][pCargo]);
		SendClientMessage(playerid,COLOR_GRAD1,string);
	}
	return true;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
 	return SendClientMessage(playerid, 0xD50000FF,"|ERRO| Este comando não existe! Use: /ajuda.");
	return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 0;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == KEY_NO){
	    if(!PlayerInfo[playerid][pJogando] == false)
	    {
			TextDrawShowForPlayer(playerid, MAPA);
			TextDrawShowForPlayer(playerid, FECHARMAPA);
			TextDrawHideForPlayer(playerid, Hora);
			SelectTextDraw(playerid, 0xFFFF00FF);
		}
	}

    if(newkeys == KEY_YES)
	    if(!Player[playerid][inInventory])
		    ShowInventory(playerid);

    if(newkeys == KEY_WALK)
        for(new i = 0; i < MAX_ITENS_WORLD; i++)
        {
            if(ItensWorld[i][world_active])
            {
                if(IsPlayerInRangeOfPoint(playerid, 2.0, ItensWorld[i][world_position][0], ItensWorld[i][world_position][1], ItensWorld[i][world_position][2]))
                {
                    new bool:sucess = false;

					if(!InventoryFull(playerid))
    				{
       					AddItem(playerid, ItensWorld[i][world_itemid], ItensWorld[i][world_amount], ItensWorld[i][world_armourstatus]);
       					DeleteItemWorld(i);
           				sucess = true;
					}
					if(!sucess)
    					for(new a = 0; a < GetSlotsInventory(playerid); a ++)
							if(pInventory[playerid][invSlot][a] == ItensWorld[i][world_itemid])
     							if(Itens[ItensWorld[i][world_itemid]][item_limite] >= ItensWorld[i][world_amount]+pInventory[playerid][invSlotAmount][a])
								{
	    							AddItem(playerid, ItensWorld[i][world_itemid], ItensWorld[i][world_amount], ItensWorld[i][world_armourstatus]);
     								DeleteItemWorld(i);
      								sucess = true;
           							break;
								}
					if(!sucess)
						ShowMessageInventory(playerid, "~r~ERRO: ~w~Seu inventário está cheio.");

					break;
				}
            }
        }

	return true;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID )
        if(bodypart == 9)
            if(weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 34)
	  			if(pCharacter[playerid][charSlot][0] != 0)
				    RemoveItemFromCharacter(playerid, 0);
				else
					SetPlayerHealth(playerid, 0.0);

 	return true;
}
public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
    new bool:have_fuzil = false;
    for(new s = 3; s < 7; s ++)
    {
	    if(pCharacter[playerid][charSlot][s] == 3 || pCharacter[playerid][charSlot][s] == 9)
		{
		    new weaponid = GetWeaponIDFromModel(Itens[pCharacter[playerid][charSlot][s]][item_modelo]);

		    if(GetPlayerWeapon(playerid) != weaponid)
		        SetPlayerAttachedObject(playerid, 3, Itens[pCharacter[playerid][charSlot][s]][item_modelo], 1, 0.015999,-0.125999,-0.153000,0.000000,-22.700004,0.400000,1.000000,1.000000,1.000000);
		    else
		        RemovePlayerAttachedObject(playerid, 3);

			have_fuzil = true;
		}
    	if(!have_fuzil && pCharacter[playerid][charSlot][s] == 16)
		{
	        new weaponid = GetWeaponIDFromModel(Itens[pCharacter[playerid][charSlot][s]][item_modelo]);

		    if(GetPlayerWeapon(playerid) != weaponid)
		        SetPlayerAttachedObject(playerid, 3, Itens[pCharacter[playerid][charSlot][s]][item_modelo], 1, 0.015999,-0.125999,-0.153000,0.000000,-22.700004,0.400000,1.000000,1.000000,1.000000);
		    else
		        RemovePlayerAttachedObject(playerid, 3);
		}
		if(pCharacter[playerid][charSlot][s] == 10)
		{
		    new weaponid = GetWeaponIDFromModel(Itens[pCharacter[playerid][charSlot][s]][item_modelo]);

		    if(GetPlayerWeapon(playerid) != weaponid)
		    	SetPlayerAttachedObject(playerid, 4, Itens[pCharacter[playerid][charSlot][s]][item_modelo],1,-0.032000,-0.127000,0.000999,20.600004,29.900007,-2.599998,1.000000,1.000000,1.000000);
		    else
		        RemovePlayerAttachedObject(playerid, 4);
  		}
		if(pCharacter[playerid][charSlot][s] == 2)
		{
		    new weaponid = GetWeaponIDFromModel(Itens[pCharacter[playerid][charSlot][s]][item_modelo]);

		    if(GetPlayerWeapon(playerid) != weaponid)
				SetPlayerAttachedObject(playerid, 5, Itens[pCharacter[playerid][charSlot][s]][item_modelo],1,-0.053999,0.005999,-0.207000,67.899978,-177.600006,-0.400004,1.000000,1.000000,1.000000);
            else
		        RemovePlayerAttachedObject(playerid, 5);
		}
		new itemid = pCharacter[playerid][charSlot][s];
		if(Itens[itemid][item_tipo] == ITEM_TYPE_MELEEWEAPON)
		{
		    new weaponid = GetWeaponIDFromModel(Itens[pCharacter[playerid][charSlot][s]][item_modelo]);

		    if(GetPlayerWeapon(playerid) != weaponid)
                SetPlayerAttachedObject(playerid,6,Itens[pCharacter[playerid][charSlot][s]][item_modelo],1,-0.226999,-0.034999,0.211999,-97.999916,-88.000083,3.600018,1.000000,1.000000,1.000000);
			else
		        RemovePlayerAttachedObject(playerid, 6);
		}

	}
	return true;
}
//----------------------------------------------------
@TimerOneSecond()
{
	for(new i = 0; i < MAX_ITENS_WORLD; i++)
	    if(ItensWorld[i][world_active])
   		{
     		ItensWorld[i][world_timer]--;

  			if(ItensWorld[i][world_timer] == 0)
				DeleteItemWorld(i);
		}
	for(new playerid=0; playerid < MAX_PLAYERS; playerid++)
    {
        new weapons[13][2];

        for (new s = 0; s <= 12; s++)
		    GetPlayerWeaponData(playerid, s, weapons[s][0], weapons[s][1]);

        for(new s = 3; s < 7; s ++)
	        if(pCharacter[playerid][charSlot][s] == 5)
			    if(weapons[8][0] == 18 && weapons[8][1] == 0)
			        RemoveItemFromCharacter(playerid, s);
		for(new s = 3; s < 7; s ++)
	        if(pCharacter[playerid][charSlot][s] == 17)
			    if(weapons[8][0] == 16 && weapons[8][1] == 0)
			        RemoveItemFromCharacter(playerid, s);

		if(pCharacter[playerid][charSlot][1] != 0)
		    if(GetPlayerArmourEx(playerid) > 0.0)
			    pCharacter[playerid][charArmourStatus] = GetPlayerArmourEx(playerid);
			else
			    RemoveItemFromCharacter(playerid, 1);
	}
}
//---------------------------------------------------
stock AddItem(playerid, itemid, amount, Float:armorstatus = 100.0)
{
	new bool:sucess = false;

	for(new i = 0; i < MAX_INVENTORY_SLOTS; i ++)
    {
		if(pInventory[playerid][invSlot][i] == itemid && Itens[pInventory[playerid][invSlot][i]][item_limite] > 1 && pInventory[playerid][invSlotAmount][i] != Itens[pInventory[playerid][invSlot][i]][item_limite])
        {
            new check = amount + pInventory[playerid][invSlotAmount][i];

			if(check > Itens[pInventory[playerid][invSlot][i]][item_limite])
			{
                pInventory[playerid][invSlotAmount][i] = Itens[itemid][item_limite];

                for(new a = 0; a < MAX_INVENTORY_SLOTS; a ++)
                {
                	if(pInventory[playerid][invSlot][a] == 0)
                	{
                    	pInventory[playerid][invSlot][a] = itemid;
						new resto = Itens[itemid][item_limite] - check;
                    	pInventory[playerid][invSlotAmount][a] = resto*-1;

                    	if(Player[playerid][inInventory])
						{
	                    	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][a], Itens[itemid][item_modelo]);
	 						PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][a], Itens[itemid][item_previewrot][0], Itens[itemid][item_previewrot][1], Itens[itemid][item_previewrot][2], Itens[itemid][item_previewrot][3]);

							PlayerTextDrawHide(playerid, inventario_index[playerid][a]);
	            			PlayerTextDrawShow(playerid, inventario_index[playerid][a]);
						}

						break;
					}
				}
			}
			else
			{
            	pInventory[playerid][invSlotAmount][i] += amount;

            	if(Player[playerid][inInventory])
				{
				    if(pInventory[playerid][invSelectedSlot] == i)
					{
						if(pInventory[playerid][invSlotAmount][i] > 1)
							format(String, sizeof(String), "Quantidade: %d", pInventory[playerid][invSlotAmount][i]);
						else
							String = " ";

						PlayerTextDrawSetString(playerid, inventario_description[playerid][3], String);

					    PlayerTextDrawHide(playerid, inventario_description[playerid][3]);
					    PlayerTextDrawShow(playerid, inventario_description[playerid][3]);
					}
				}
			}
			sucess = true;
         	break;
		}
	}
	if(sucess)
	    return true;

	for(new i = 0; i < MAX_INVENTORY_SLOTS; i ++)
 	{
		if(pInventory[playerid][invSlot][i] == 0)
	    {
		    pInventory[playerid][invSlot][i] = itemid;
	        pInventory[playerid][invSlotAmount][i] = amount;

	        if(itemid == 4 || itemid == 5 || itemid == 6)
	        	pInventory[playerid][invArmourStatus][i] = armorstatus;

	        if(Player[playerid][inInventory])
			{
			    PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][i], Itens[itemid][item_modelo]);
				PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][i], Itens[itemid][item_previewrot][0], Itens[itemid][item_previewrot][1], Itens[itemid][item_previewrot][2], Itens[itemid][item_previewrot][3]);

	            PlayerTextDrawHide(playerid, inventario_index[playerid][i]);
	            PlayerTextDrawShow(playerid, inventario_index[playerid][i]);
			}

			break;
		}
	}

	return true;
}
//------------------------------------------------------
stock SplitItem(playerid, slot)
{
    new result = pInventory[playerid][invSlotAmount][slot]/2;

	for(new i = 0; i < MAX_INVENTORY_SLOTS; i ++)
        if(pInventory[playerid][invSlot][i] == 0)
        {
            pInventory[playerid][invSlotAmount][slot] = pInventory[playerid][invSlotAmount][slot]/2;

            pInventory[playerid][invSlot][i] = pInventory[playerid][invSlot][slot];
            pInventory[playerid][invSlotAmount][i] = result;

    		PlayerTextDrawHide(playerid, inventario_index[playerid][i]);
    		PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_modelo]);
 			PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_previewrot][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][1], Itens[pInventory[playerid][invSlot][i]][item_previewrot][2], Itens[pInventory[playerid][invSlot][i]][item_previewrot][3]);
       		PlayerTextDrawShow(playerid, inventario_index[playerid][i]);

			if(pInventory[playerid][invSlotAmount][slot] > 1)
				format(String, sizeof(String), "Quantidade: %d", pInventory[playerid][invSlotAmount][slot]);
			else
				String = " ";

			PlayerTextDrawSetString(playerid, inventario_description[playerid][3], String);

       		PlayerTextDrawHide(playerid, inventario_description[playerid][3]);
       		PlayerTextDrawShow(playerid, inventario_description[playerid][3]);
    		break;
        }
}
//-------------------------------------------------------
stock UseItem(playerid, slot, item)
{
	if(Itens[item][item_tipo] == ITEM_TYPE_HELMET)
	{
		if(pCharacter[playerid][charSlot][0] == 0)
		{
		    AddItemCharacter(playerid, 0, item);
		    RemoveItemFromInventory(playerid, slot);
		}
		else
		{
		    RemoveItemFromInventory(playerid, slot);
		    AddItem(playerid, pCharacter[playerid][charSlot][0], 1);
		    RemoveItemFromCharacter(playerid, 0);
		    AddItemCharacter(playerid, 0, item);
		}
	}
	else if(Itens[item][item_tipo] == ITEM_TYPE_WEAPON || Itens[item][item_tipo] == ITEM_TYPE_MELEEWEAPON)
	{
	    if(GetAmmunation(playerid) <= 0 && Itens[item][item_tipo] == ITEM_TYPE_WEAPON)
	    {
	        if(item != 19 && item != 24)
	        {
		        pInventory[playerid][invSelectedSlot] = slot;
		        return ShowMessageInventory(playerid, "~r~ERRO: ~w~Você não tem munição.");
			}
	    }

	    new weapons[13][2];

		for (new i = 0; i <= 12; i++)
		    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);

		new weaponid = GetWeaponIDFromModel(Itens[item][item_modelo]);
		new weaponslot = GetWeaponSlot(weaponid);

		if(weapons[weaponslot][0] != 0 && weapons[weaponslot][1] > 0)
		{
		    pInventory[playerid][invSelectedSlot] = slot;
		    return ShowMessageInventory(playerid, "~r~ERRO: ~w~Não é possivel equipar duas armas do mesmo estilo.");
		}

	    new bool:have_slot;

	    for(new i = 3; i < 7; i ++)
	    {
	        if(pCharacter[playerid][charSlot][i] == item)
			{
			    pInventory[playerid][invSelectedSlot] = slot;
                ShowMessageInventory(playerid, "~r~ERRO: ~w~Não é possivel equipar duas armas iguais.");
			    have_slot = true;
			    break;
			}

	    	if(pCharacter[playerid][charSlot][i] == 0)
			{
			    AddItemCharacter(playerid, i, item, pInventory[playerid][invSlotAmount][slot]);
			    RemoveItemFromInventory(playerid, slot);
		    	have_slot = true;
                break;
			}
		}

		if(!have_slot)
		{
		    pInventory[playerid][invSelectedSlot] = slot;
		    ShowMessageInventory(playerid, "~r~ERRO: ~w~Não é possivel equipar mais armas.");
		    return true;
		}
	}
	else if(Itens[item][item_tipo] == ITEM_TYPE_BODY)
	{
	    if(pCharacter[playerid][charSlot][1] == 0)
		{
	    	AddItemCharacter(playerid, 1, item, 0, pInventory[playerid][invArmourStatus][slot]);
			RemoveItemFromInventory(playerid, slot);
		}
		else
		{
		    RemoveItemFromInventory(playerid, slot);
		    AddItem(playerid, pCharacter[playerid][charSlot][1], 1);
		    RemoveItemFromCharacter(playerid, 1);
		    AddItemCharacter(playerid, 1, item);
		}
	}
	else if(Itens[item][item_tipo] == ITEM_TYPE_BACKPACK)
	{
	    if(pCharacter[playerid][charSlot][2] == 0)
		{
		    AddItemCharacter(playerid, 2, item);
			RemoveItemFromInventory(playerid, slot);
		}
		else
		{
		    RemoveItemFromInventory(playerid, slot);
		    AddItem(playerid, pCharacter[playerid][charSlot][2], 1);
		    RemoveItemFromCharacter(playerid, 2);
		    AddItemCharacter(playerid, 2, item);
		}

		OrganizeInventory(playerid);

		for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	    	PlayerTextDrawHide(playerid, inventario_index[playerid][i]);

        for(new i = 0; i < GetSlotsInventory(playerid); i++)
		{
			PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_modelo]);
	 		PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_previewrot][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][1], Itens[pInventory[playerid][invSlot][i]][item_previewrot][2], Itens[pInventory[playerid][invSlot][i]][item_previewrot][3]);
	        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][i], 96);

			PlayerTextDrawShow(playerid, inventario_index[playerid][i]);
		}
	}
	else if(Itens[item][item_tipo] == ITEM_TYPE_AMMO)
	{
        pInventory[playerid][invSelectedSlot] = slot;
        return true;
	}
	else if(Itens[item][item_tipo] == ITEM_TYPE_NORMAL)
	{
	    if(item == 18) // Kit Médico
	    {
	        SetPlayerHealth(playerid, 100.0);
	        RemoveItemFromInventory(playerid, slot, 1);
	    }
	}

	if(Player[playerid][inInventory])
	{
	   	for(new a = 0; a < 4; a++)
		   	PlayerTextDrawHide(playerid, inventario_description[playerid][a]);

		TextDrawHideForPlayer(playerid, inventario_backgrounds[4]);

		TextDrawHideForPlayer(playerid, inventario_usar);
		TextDrawHideForPlayer(playerid, inventario_split[0]);
		TextDrawHideForPlayer(playerid, inventario_split[1]);
		TextDrawHideForPlayer(playerid, inventario_drop[0]);
		TextDrawHideForPlayer(playerid, inventario_drop[1]);
		PlayerTextDrawHide(playerid, inventario_textos[playerid][9]);
	}

	return true;
}
//-------------------------------------------------------
stock AddItemCharacter(playerid, slot, itemid, quantidade = 0, Float:armourstatus = 0.0)
{
    pCharacter[playerid][charSlot][slot] = itemid;

	if(itemid == 1)
	{
	    switch(GetPlayerSkin(playerid))
		{
		    #define HelmetAttach1{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, 0, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
			case 0, 65, 74, 149, 208, 273:  HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 7, 10: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 9: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 11..13: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 15: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 17..21: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 40: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 50, 100..103, 148, 150..189, 222: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 51..54: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 59..62: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 77: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 85, 88, 89: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 90..97: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 132: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 144..146: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 220: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 223, 246: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 224..245: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 294: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 295: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 296..298: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 299..306: HelmetAttach1{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
		}
	}
	if(itemid == 2)
	{
		switch(GetPlayerSkin(playerid))
		{
   			#define HelmetAttach2{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, 0, 19514, 2, (%0), (%1), (%2), (%3), (%4), (%5));
			case 0, 65, 74, 149, 208, 273:  HelmetAttach2{0.115999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
			case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: HelmetAttach2{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
			case 7, 10: HelmetAttach2{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 9: HelmetAttach2{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 11..13: HelmetAttach2{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 15: HelmetAttach2{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 17..21: HelmetAttach2{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: HelmetAttach2{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 40: HelmetAttach2{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 50, 100..103, 148, 150..189, 222: HelmetAttach2{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 51..54: HelmetAttach2{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: HelmetAttach2{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 59..62: HelmetAttach2{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 77: HelmetAttach2{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
			case 85, 88, 89: HelmetAttach2{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 90..97: HelmetAttach2{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 132: HelmetAttach2{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 144..146: HelmetAttach2{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 220: HelmetAttach2{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 223, 246: HelmetAttach2{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 224..245: HelmetAttach2{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 294: HelmetAttach2{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
			case 295: HelmetAttach2{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
			case 296..298: HelmetAttach2{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 299..306: HelmetAttach2{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		}
	}
	if(itemid == 3)
	{
		switch(GetPlayerSkin(playerid))
		{
            #define HelmetAttach3{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, 0, 19101, 2, (%0), (%1), (%2), (%3), (%4), (%5));
			case 0, 65, 74, 149, 208, 273:  HelmetAttach3{0.148000, 0.020000, -0.001999, 0.000000, 0.000000, 0.000000}
			case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: HelmetAttach3{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
			case 7, 10: HelmetAttach3{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 9: HelmetAttach3{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 11..13: HelmetAttach3{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
			case 15: HelmetAttach3{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 17..21: HelmetAttach3{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: HelmetAttach3{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 40: HelmetAttach3{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 50, 100..103, 148, 150..189, 222: HelmetAttach3{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 51..54: HelmetAttach3{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: HelmetAttach3{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 59..62: HelmetAttach3{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 77: HelmetAttach3{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
			case 85, 88, 89: HelmetAttach3{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 90..97: HelmetAttach3{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 132: HelmetAttach3{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 144..146: HelmetAttach3{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 220: HelmetAttach3{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 223, 246: HelmetAttach3{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
			case 224..245: HelmetAttach3{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 294: HelmetAttach3{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
			case 295: HelmetAttach3{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
			case 296..298: HelmetAttach3{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
			case 299..306: HelmetAttach3{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		}
	}
	else if(Itens[itemid][item_tipo] == ITEM_TYPE_WEAPON || Itens[itemid][item_tipo] == ITEM_TYPE_MELEEWEAPON)
	{
	    new modelid = Itens[itemid][item_modelo];

	    if(itemid == 19 || itemid == 20)
	        GivePlayerWeapon(playerid, GetWeaponIDFromModel(modelid), quantidade);
	    else
		    GivePlayerWeapon(playerid, GetWeaponIDFromModel(modelid), GetAmmunation(playerid));
	}
	else if(itemid == 6)
	{
	    SetPlayerArmour(playerid, armourstatus);
	    pCharacter[playerid][charArmourStatus] = armourstatus;

        switch(GetPlayerSkin(playerid))
		{
		    case 0:
				SetPlayerAttachedObject(playerid, 1, 19515, 1, 0.103000,0.046000,-0.002000,0.299998,-2.500003,-0.099999,1.000000,1.114000,1.000000);
		}
	}
	else if(itemid == 5)
	{
	    SetPlayerArmour(playerid, armourstatus);
	    pCharacter[playerid][charArmourStatus] = armourstatus;

        switch(GetPlayerSkin(playerid))
		{
		    case 0:
				SetPlayerAttachedObject(playerid, 1, 19142, 1, 0.103999,0.034999,0.001000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
		}
	}
	else if(itemid == 4)
	{
	    SetPlayerArmour(playerid, armourstatus);
	    pCharacter[playerid][charArmourStatus] = armourstatus;

        switch(GetPlayerSkin(playerid))
		{
		    case 0:
				SetPlayerAttachedObject(playerid, 1, 19904, 1, 0.088000,0.047999,-0.005999,1.600005,88.599884,169.699905,1.000000,1.151003,1.000000);
		}
	}
	else if(itemid == 7)
	{
	    switch(GetPlayerSkin(playerid))
		{
		    case 0:
		        SetPlayerAttachedObject(playerid, 2, 19559,1, 0.124999,-0.037999,-0.009000,0.000000,88.799964,0.000000,1.000000,1.000000,1.000000);
		}
	}
	else if(itemid == 8)
	{
	    switch(GetPlayerSkin(playerid))
	    {
			case 0:
				SetPlayerAttachedObject(playerid, 2, 3026,1, -0.122999,-0.051999,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
		}
	}
	else if(itemid == 9)
	{
        switch(GetPlayerSkin(playerid))
	    {
			case 0:
                SetPlayerAttachedObject(playerid, 2, 371,1, 0.078000,-0.129999,0.000000,3.299999,90.099990,0.000000,1.000000,1.000000,1.000000);
		}
	}

	PlayerPlaySound(playerid,1052,0.0,0.0,0.0);

    if(Player[playerid][inInventory])
	{
	    PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][slot], Itens[itemid][item_modelo]);
		PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][slot], Itens[itemid][item_previewrot][0], Itens[itemid][item_previewrot][1], Itens[itemid][item_previewrot][2], Itens[itemid][item_previewrot][3]);

	    PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][slot]);
	   	PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][slot]);
	}
}
//--------------------------------------------------------
stock RemoveItemFromInventory(playerid, slot, amount = 0)
{

    if(amount == 0)
    {
        pInventory[playerid][invSlot][slot] = 0;
		pInventory[playerid][invSlotAmount][slot] = 0;
	}
	else
	{
	    pInventory[playerid][invSlotAmount][slot] -= amount;

	    if(pInventory[playerid][invSlotAmount][slot] == 0)
	        pInventory[playerid][invSlot][slot] = 0;

	}

	if(Player[playerid][inInventory])
	{
	    PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][slot], Itens[pInventory[playerid][invSlot][slot]][item_modelo]);
 		PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][slot], Itens[pInventory[playerid][invSlot][slot]][item_previewrot][0], Itens[pInventory[playerid][invSlot][slot]][item_previewrot][1], Itens[pInventory[playerid][invSlot][slot]][item_previewrot][2], Itens[pInventory[playerid][invSlot][slot]][item_previewrot][3]);
        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][slot], 96);

		PlayerTextDrawHide(playerid, inventario_index[playerid][slot]);
		PlayerTextDrawShow(playerid, inventario_index[playerid][slot]);
	}
}
//--------------------------------------------------------
stock RemoveItemFromCharacter(playerid, slot)
{
	if(Itens[pCharacter[playerid][charSlot][slot]][item_tipo] == ITEM_TYPE_WEAPON)
	{
	    new modelid = Itens[pCharacter[playerid][charSlot][slot]][item_modelo];
	    SetPlayerAmmo(playerid, GetWeaponIDFromModel(modelid), 0);

        new itemid = Itens[pCharacter[playerid][charSlot][slot]][item_id];

        pCharacter[playerid][charSlot][slot] = 0;

	    if(itemid == 12 || itemid == 13)
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
     			RemovePlayerAttachedObject(playerid, 3);

        if(itemid == 15 || itemid == 16)
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
      			RemovePlayerAttachedObject(playerid, 4);

      	if(itemid == 10 || itemid == 11)
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, 5))
      			RemovePlayerAttachedObject(playerid, 5);

	}
	else if(Itens[pCharacter[playerid][charSlot][slot]][item_tipo] == ITEM_TYPE_MELEEWEAPON)
	{
	    new modelid = Itens[pCharacter[playerid][charSlot][slot]][item_modelo];
	    RemovePlayerWeapon(playerid, GetWeaponIDFromModel(modelid));

	    if(IsPlayerAttachedObjectSlotUsed(playerid, 6))
      		RemovePlayerAttachedObject(playerid, 6);
	}

	if(slot == 0) // Helmet
	{
	    RemovePlayerAttachedObject(playerid, 0);
	}
	else if(slot == 1) // Armour
	{
	    RemovePlayerAttachedObject(playerid, 1);
	    SetPlayerArmour(playerid, 0);
	    pCharacter[playerid][charArmourStatus] = 0.0;
	}
	else if(slot == 2) // Backpack
	{
	    RemovePlayerAttachedObject(playerid, 2);
	    pCharacter[playerid][charSlot][slot] = 0;

	    for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	    	PlayerTextDrawHide(playerid, inventario_index[playerid][i]);

        for(new i = 0; i < GetSlotsInventory(playerid); i++)
		{
			PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_modelo]);
	 		PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_previewrot][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][1], Itens[pInventory[playerid][invSlot][i]][item_previewrot][2], Itens[pInventory[playerid][invSlot][i]][item_previewrot][3]);
	        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][i], 96);

			PlayerTextDrawShow(playerid, inventario_index[playerid][i]);
		}
	}

    pCharacter[playerid][charSlot][slot] = 0;
    PlayerPlaySound(playerid,1053,0.0,0.0,0.0);

    if(Player[playerid][inInventory])
	{
	    PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][slot], Itens[0][item_modelo]);
	 	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][slot], Itens[0][item_previewrot][0], Itens[0][item_previewrot][1], Itens[0][item_previewrot][2], Itens[0][item_previewrot][3]);
		PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][slot], 96);

	    PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][slot]);
	   	PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][slot]);

	   	PlayerTextDrawHide(playerid, inventario_textos[playerid][10]);
		TextDrawHideForPlayer(playerid, inventario_remover);
	}
}
//----------------------------------------------------------
stock DropItem(Float:x, Float:y, Float:z, itemid, amount, Float:armourstatus = 0.0)
{
    ItensWorld[LastItemID][world_timer] = TIMER_ITEM_WORLD;
	ItensWorld[LastItemID][world_itemid] = itemid;
	ItensWorld[LastItemID][world_model] = Itens[itemid][item_modelo];
	ItensWorld[LastItemID][world_amount] = amount;
	ItensWorld[LastItemID][world_position][0] = x;
	ItensWorld[LastItemID][world_position][1] = y;
	ItensWorld[LastItemID][world_position][2] = z;

	if(itemid == 4 || itemid == 5 || itemid == 6)
	    ItensWorld[LastItemID][world_armourstatus] = armourstatus;

    ItensWorld[LastItemID][world_object] = CreateObject(ItensWorld[LastItemID][world_model], x, y, z-0.90, -90,0,0);

	if(amount > 1)
		format(String, sizeof(String), "%s (%d)", Itens[itemid][item_nome], amount);
	else
		format(String, sizeof(String), "%s", Itens[itemid][item_nome]);

	ItensWorld[LastItemID][world_3dtext] = Create3DTextLabel(String, -1, x, y,z-0.90, 5.0, 0, 0);

	ItensWorld[LastItemID][world_active] = true;

	if(LastItemID == MAX_ITENS_WORLD-1)
		LastItemID = 0;
	else
	    LastItemID++;
}
//----------------------------------------------------------
stock DeleteItemWorld(worlditemid)
{
    ItensWorld[worlditemid][world_active] = false;
    DestroyObject(ItensWorld[worlditemid][world_object]);
    Delete3DTextLabel(ItensWorld[worlditemid][world_3dtext]);
}
//----------------------------------------------------------
stock SlotsFree(playerid)
{
	new count = 0;

    for(new i = 0; i < GetSlotsInventory(playerid); i ++)
        if(pInventory[playerid][invSlot][i] == 0)
            count++;

	return count;
}
//-----------------------------------------------------------
stock SlotsInUse(playerid)
{
    new count = 0;

    for(new i = 0; i < GetSlotsInventory(playerid); i ++)
        if(pInventory[playerid][invSlot][i] != 0)
            count++;

	return count;
}
//-----------------------------------------------------------
stock InventoryFull(playerid)
{
    for(new i = 0; i < GetSlotsInventory(playerid); i ++)
        if(pInventory[playerid][invSlot][i] == 0)
            return false;


	return true;
}
//-----------------------------------------------------------
stock GetSlotsInventory(playerid)
{
    new slots;

	if(pCharacter[playerid][charSlot][2] == 0)
	    slots = 5;
	else if(pCharacter[playerid][charSlot][2] == 7)
	    slots = 10;
    else if(pCharacter[playerid][charSlot][2] == 8)
	    slots = 15;

	return slots;
}
//-------------------------------------------------------------
stock GetAmmunation(playerid)
{
	new total;

    for(new i = 0; i < GetSlotsInventory(playerid); i ++)
        if(pInventory[playerid][invSlot][i] == 4)
			total += pInventory[playerid][invSlotAmount][i];

	return total;
}
//-------------------------------------------------------------
stock GetAmmunationSlot(playerid)
{
	new slot = -1;

    for(new i = 0; i < GetSlotsInventory(playerid); i ++)
        if(pInventory[playerid][invSlot][i] == 4)
        {
            slot = i;
            break;
		}

	return slot;
}
//-------------------------------------------------------------
stock OrganizeInventory(playerid)
{
    for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	    if(pInventory[playerid][invSlot][i] != 0)
		    for(new a = 0; a < MAX_INVENTORY_SLOTS; a++)
		        if(pInventory[playerid][invSlot][a] == 0)
		        {
			        pInventory[playerid][invSlot][a] = pInventory[playerid][invSlot][i];
			        pInventory[playerid][invSlotAmount][a] = pInventory[playerid][invSlotAmount][i];
                    pInventory[playerid][invArmourStatus][a] = pInventory[playerid][invArmourStatus][i];
			        pInventory[playerid][invSlot][i] = 0;
			        pInventory[playerid][invSlotAmount][i] = 0;
			        pInventory[playerid][invArmourStatus][i] = 0;
				}
}
//-------------------------------------------------------------
stock GetWeaponSlot(weaponid)
{
	new slot;

	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}

	return slot;
}
//-------------------------------------------------------------
stock ShowInventory(playerid)
{
    Player[playerid][inInventory] = true;
    SelectTextDraw(playerid, 0xFFFFFFFF);

    // Globais

    TextDrawShowForPlayer(playerid, inventario_close[0]);
	TextDrawShowForPlayer(playerid, inventario_close[1]);

	for(new i = 0; i < 5; i++)
	    if(i != 4)
	    	TextDrawShowForPlayer(playerid, inventario_backgrounds[i]);

	// Player

	for(new i = 0; i < GetSlotsInventory(playerid); i++)
	{
		PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_modelo]);
 		PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][i], Itens[pInventory[playerid][invSlot][i]][item_previewrot][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][1], Itens[pInventory[playerid][invSlot][i]][item_previewrot][2], Itens[pInventory[playerid][invSlot][i]][item_previewrot][3]);
        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][i], 96);

		PlayerTextDrawShow(playerid, inventario_index[playerid][i]);
	}

	for(new i = 0; i < 11; i++)
	    if(i != 10 && i != 9)
	    	PlayerTextDrawShow(playerid, inventario_textos[playerid][i]);

	for(new i = 0; i < 7; i++)
	{
	    new char_slot = pCharacter[playerid][charSlot][i];

	    PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][i], Itens[char_slot][item_modelo]);
 		PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][i], Itens[char_slot][item_previewrot][0], Itens[char_slot][item_previewrot][1], Itens[char_slot][item_previewrot][2], Itens[char_slot][item_previewrot][3]);
        PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][i], 96);

	    PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][i]);
	}

	PlayerTextDrawSetPreviewModel(playerid, inventario_skin[playerid], GetPlayerSkin(playerid));
	PlayerTextDrawShow(playerid, inventario_skin[playerid]);
}
//-------------------------------------------------------------
stock HideInventory(playerid)
{
	TextDrawHideForPlayer(playerid, inventario_usar);
	TextDrawHideForPlayer(playerid, inventario_split[0]);
	TextDrawHideForPlayer(playerid, inventario_split[1]);
	TextDrawHideForPlayer(playerid, inventario_drop[0]);
	TextDrawHideForPlayer(playerid, inventario_drop[1]);
	TextDrawHideForPlayer(playerid, inventario_close[0]);
	TextDrawHideForPlayer(playerid, inventario_close[1]);

	for(new i = 0; i < 5; i++)
	    if(i != 4)
	    	TextDrawHideForPlayer(playerid, inventario_backgrounds[i]);

    for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	    PlayerTextDrawHide(playerid, inventario_index[playerid][i]);

    for(new i = 0; i < 11; i++)
	    PlayerTextDrawHide(playerid, inventario_textos[playerid][i]);

	for(new i = 0; i < 7; i++)
	    PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][i]);

	PlayerTextDrawHide(playerid, inventario_skin[playerid]);
	TextDrawHideForPlayer(playerid, inventario_remover);

	TextDrawHideForPlayer(playerid, inventario_backgrounds[4]);

	for(new a = 0; a < 4; a++)
    	PlayerTextDrawHide(playerid, inventario_description[playerid][a]);

    pInventory[playerid][invSelectedSlot] = -1;
    pCharacter[playerid][charSelectedSlot] = -1;
    Player[playerid][inInventory] = false;
    CancelSelectTextDraw(playerid);
}
//-------------------------------------------------------------
stock GetWeaponIDFromModel(modelid)
{
    new idweapon;

    switch(modelid)
	{
       	case 331: idweapon = 1; // Brass Knuckles
       	case 333: idweapon = 2; // Golf Club
       	case 334: idweapon = 3; // Nightstick
      	case 335: idweapon = 4; // Knife
       	case 336: idweapon = 5; // Baseball Bat
       	case 337: idweapon = 6; // Shovel
       	case 338: idweapon = 7; // Pool Cue
       	case 339: idweapon = 8; // Katana
       	case 341: idweapon = 9; // Chainsaw
       	case 321: idweapon = 10; // Double-ended Dildo
       	case 325: idweapon = 14; // Flowers
       	case 326: idweapon = 15; // Cane
       	case 342: idweapon = 16; // Grenade
       	case 343: idweapon = 17; // Tear Gas
       	case 344: idweapon = 18; // Molotov Cocktail
       	case 346: idweapon = 22; // 9mm
       	case 347: idweapon = 23; // Silenced 9mm
       	case 348: idweapon = 24; // Desert Eagle
       	case 349: idweapon = 25; // Shotgun
       	case 350: idweapon = 26; // Sawnoff
       	case 351: idweapon = 27; // Combat Shotgun
       	case 352: idweapon = 28; // Micro SMG/Uzi
       	case 353: idweapon = 29; // MP5
       	case 355: idweapon = 30; // AK-47
       	case 356: idweapon = 31; // M4
       	case 372: idweapon = 32; // Tec-9
       	case 357: idweapon = 33; // Country Rifle
       	case 358: idweapon = 34; // Sniper Rifle
       	case 359: idweapon = 35; // RPG
       	case 360: idweapon = 36; // HS Rocket
       	case 361: idweapon = 37; // Flamethrower
       	case 362: idweapon = 38; // Minigun
       	case 363: idweapon = 39;// Satchel Charge + Detonator
       	case 365: idweapon = 41; // Spraycan
       	case 366: idweapon = 42; // Fire Extinguisher
	}

	return idweapon;
}
//-------------------------------------------------------------
stock RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12];
	new plyAmmo[12];

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
}
//-------------------------------------------------------------
public Float:GetPlayerArmourEx(playerid)
{
	new Float:pColete;
	GetPlayerArmour(playerid, pColete);
	return Float:pColete;
}
//-------------------------------------------------------------
stock ShowMessageInventory(playerid, string[], time = 5000)
{
	if (Player[playerid][MessageInventory])
	{
	    PlayerTextDrawHide(playerid, inventario_mensagem[playerid]);
	    KillTimer(Player[playerid][MessageInventoryTimer]);
	}

	PlayerTextDrawSetString(playerid, inventario_mensagem[playerid], ConvertToGameText(string));
	PlayerTextDrawShow(playerid, inventario_mensagem[playerid]);

	Player[playerid][MessageInventory] = true;
	Player[playerid][MessageInventoryTimer] = SetTimerEx("HideMessageInventory", time, false, "d", playerid);
	return true;
}
//--------------------------------------------------------------
public HideMessageInventory(playerid)
{
	if (!Player[playerid][MessageInventory])
	    return 0;

	Player[playerid][MessageInventory] = false;
	return PlayerTextDrawHide(playerid, inventario_mensagem[playerid]);
}
//--------------------------------------------------------------
stock ConvertToGameText(in[])
{
    new string[256];
    for(new i = 0; in[i]; ++i)
    {
        string[i] = in[i];
        switch(string[i])
        {
            case 0xC0 .. 0xC3: string[i] -= 0x40;
            case 0xC7 .. 0xC9: string[i] -= 0x42;
            case 0xD2 .. 0xD5: string[i] -= 0x44;
            case 0xD9 .. 0xDC: string[i] -= 0x47;
            case 0xE0 .. 0xE3: string[i] -= 0x49;
            case 0xE7 .. 0xEF: string[i] -= 0x4B;
            case 0xF2 .. 0xF5: string[i] -= 0x4D;
            case 0xF9 .. 0xFC: string[i] -= 0x50;
            case 0xC4, 0xE4: string[i] = 0x83;
            case 0xC6, 0xE6: string[i] = 0x84;
            case 0xD6, 0xF6: string[i] = 0x91;
            case 0xD1, 0xF1: string[i] = 0xEC;
            case 0xDF: string[i] = 0x96;
            case 0xBF: string[i] = 0xAF;
        }
    }
    return string;
}
//--------------------------------------------------------------
stock ResetVariables(playerid)
{
    // Inventory

    for(new i = 0; i < MAX_INVENTORY_SLOTS; i ++)
    {
        pInventory[playerid][invSlot][i] = 0;
        pInventory[playerid][invSlotAmount][i] = 0;
        pInventory[playerid][invArmourStatus][i] = 0;
	}

	pInventory[playerid][invSelectedSlot] = 0;

	// Character

	for(new i = 0; i < 7; i ++)
        pCharacter[playerid][charSlot][i] = 0;

	pCharacter[playerid][charArmourStatus] = 0;
	pCharacter[playerid][charSelectedSlot] = 0;


	// Player

	for(new enum_Player:i; i < enum_Player; ++i)
	    Player[playerid][i] = 0;
}
//--------------------------------------------------------------
stock LoadTextDraws()
{
    inventario_backgrounds[0] = TextDrawCreate(63.900207, 120.000030, "box");
	TextDrawLetterSize(inventario_backgrounds[0], 0.000000, 28.450004);
	TextDrawTextSize(inventario_backgrounds[0], 308.250335, 0.000000);
	TextDrawAlignment(inventario_backgrounds[0], 1);
	TextDrawColor(inventario_backgrounds[0], -1);
	TextDrawUseBox(inventario_backgrounds[0], 1);
	TextDrawBoxColor(inventario_backgrounds[0], 128);
	TextDrawSetShadow(inventario_backgrounds[0], 0);
	TextDrawSetOutline(inventario_backgrounds[0], 0);
	TextDrawBackgroundColor(inventario_backgrounds[0], 255);
	TextDrawFont(inventario_backgrounds[0], 2);
	TextDrawSetProportional(inventario_backgrounds[0], 1);
	TextDrawSetShadow(inventario_backgrounds[0], 0);

	inventario_backgrounds[1] = TextDrawCreate(313.099792, 120.000030, "box");
	TextDrawLetterSize(inventario_backgrounds[1], 0.000000, 28.450004);
	TextDrawTextSize(inventario_backgrounds[1], 578.247741, 0.000000);
	TextDrawAlignment(inventario_backgrounds[1], 1);
	TextDrawColor(inventario_backgrounds[1], -1);
	TextDrawUseBox(inventario_backgrounds[1], 1);
	TextDrawBoxColor(inventario_backgrounds[1], 128);
	TextDrawSetShadow(inventario_backgrounds[1], 0);
	TextDrawSetOutline(inventario_backgrounds[1], 0);
	TextDrawBackgroundColor(inventario_backgrounds[1], 255);
	TextDrawFont(inventario_backgrounds[1], 1);
	TextDrawSetProportional(inventario_backgrounds[1], 1);
	TextDrawSetShadow(inventario_backgrounds[1], 0);

	inventario_backgrounds[2] = TextDrawCreate(66.100158, 122.233367, "box");
	TextDrawLetterSize(inventario_backgrounds[2], 0.000000, 1.200001);
	TextDrawTextSize(inventario_backgrounds[2], 306.499542, 0.000000);
	TextDrawAlignment(inventario_backgrounds[2], 1);
	TextDrawColor(inventario_backgrounds[2], -1);
	TextDrawUseBox(inventario_backgrounds[2], 1);
	TextDrawBoxColor(inventario_backgrounds[2], 128);
	TextDrawSetShadow(inventario_backgrounds[2], 0);
	TextDrawSetOutline(inventario_backgrounds[2], 0);
	TextDrawBackgroundColor(inventario_backgrounds[2], 255);
	TextDrawFont(inventario_backgrounds[2], 1);
	TextDrawSetProportional(inventario_backgrounds[2], 1);
	TextDrawSetShadow(inventario_backgrounds[2], 0);

	inventario_backgrounds[3] = TextDrawCreate(314.599426, 122.233375, "box");
	TextDrawLetterSize(inventario_backgrounds[3], 0.000000, 1.200001);
	TextDrawTextSize(inventario_backgrounds[3], 576.602294, 0.000000);
	TextDrawAlignment(inventario_backgrounds[3], 1);
	TextDrawColor(inventario_backgrounds[3], -1);
	TextDrawUseBox(inventario_backgrounds[3], 1);
	TextDrawBoxColor(inventario_backgrounds[3], 128);
	TextDrawSetShadow(inventario_backgrounds[3], 0);
	TextDrawSetOutline(inventario_backgrounds[3], 0);
	TextDrawBackgroundColor(inventario_backgrounds[3], 255);
	TextDrawFont(inventario_backgrounds[3], 1);
	TextDrawSetProportional(inventario_backgrounds[3], 1);
	TextDrawSetShadow(inventario_backgrounds[3], 0);

	inventario_backgrounds[4] = TextDrawCreate(317.000000, 314.434112, "box");
	TextDrawLetterSize(inventario_backgrounds[4], 0.000000, 6.285005);
	TextDrawTextSize(inventario_backgrounds[4], 499.247772, 0.000000);
	TextDrawAlignment(inventario_backgrounds[4], 1);
	TextDrawColor(inventario_backgrounds[4], -1);
	TextDrawUseBox(inventario_backgrounds[4], 1);
	TextDrawBoxColor(inventario_backgrounds[4], 128);
	TextDrawSetShadow(inventario_backgrounds[4], 0);
	TextDrawSetOutline(inventario_backgrounds[4], 0);
	TextDrawBackgroundColor(inventario_backgrounds[4], 255);
	TextDrawFont(inventario_backgrounds[4], 1);
	TextDrawSetProportional(inventario_backgrounds[4], 1);
	TextDrawSetShadow(inventario_backgrounds[4], 0);

    inventario_usar = TextDrawCreate(504.388427, 312.249938, "");
	TextDrawLetterSize(inventario_usar, 0.000000, 0.000000);
	TextDrawTextSize(inventario_usar, 71.019790, 18.579967);
	TextDrawAlignment(inventario_usar, 1);
	TextDrawColor(inventario_usar, -1);
	TextDrawSetShadow(inventario_usar, 0);
	TextDrawSetOutline(inventario_usar, 0);
	TextDrawBackgroundColor(inventario_usar, 866792304);
	TextDrawFont(inventario_usar, 5);
	TextDrawSetProportional(inventario_usar, 0);
	TextDrawSetShadow(inventario_usar, 0);
	TextDrawSetPreviewModel(inventario_usar, 19382);
	TextDrawSetPreviewRot(inventario_usar, 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(inventario_usar, true);

    inventario_split[0] = TextDrawCreate(504.593688, 333.316314, "");
	TextDrawLetterSize(inventario_split[0], 0.000000, 0.000000);
	TextDrawTextSize(inventario_split[0], 71.019790, 18.579967);
	TextDrawAlignment(inventario_split[0], 1);
	TextDrawColor(inventario_split[0], -1);
	TextDrawSetShadow(inventario_split[0], 0);
	TextDrawSetOutline(inventario_split[0], 0);
	TextDrawBackgroundColor(inventario_split[0], -65472);
	TextDrawFont(inventario_split[0], 5);
	TextDrawSetProportional(inventario_split[0], 0);
	TextDrawSetShadow(inventario_split[0], 0);
	TextDrawSetSelectable(inventario_split[0], true);
	TextDrawSetPreviewModel(inventario_split[0], 19382);
	TextDrawSetPreviewRot(inventario_split[0], 0.000000, 0.000000, 0.000000, 1.000000);

    inventario_drop[0] = TextDrawCreate(504.793701, 354.617614, "");
	TextDrawLetterSize(inventario_drop[0], 0.000000, 0.000000);
	TextDrawTextSize(inventario_drop[0], 71.019790, 18.579967);
	TextDrawAlignment(inventario_drop[0], 1);
	TextDrawColor(inventario_drop[0], -1);
	TextDrawSetShadow(inventario_drop[0], 0);
	TextDrawSetOutline(inventario_drop[0], 0);
	TextDrawBackgroundColor(inventario_drop[0], 0xAA333370);
	TextDrawFont(inventario_drop[0], 5);
	TextDrawSetProportional(inventario_drop[0], 0);
	TextDrawSetShadow(inventario_drop[0], 0);
	TextDrawSetSelectable(inventario_drop[0], true);
	TextDrawSetPreviewModel(inventario_drop[0], 19382);
	TextDrawSetPreviewRot(inventario_drop[0], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_remover = TextDrawCreate(149.847900, 344.867553, "");
	TextDrawLetterSize(inventario_remover, 0.000000, 0.000000);
	TextDrawTextSize(inventario_remover, 76.040008, 19.899997);
	TextDrawAlignment(inventario_remover, 1);
	TextDrawColor(inventario_remover, -1);
	TextDrawSetShadow(inventario_remover, 0);
	TextDrawSetOutline(inventario_remover, 0);
	TextDrawBackgroundColor(inventario_remover, 0xAA333370);
	TextDrawFont(inventario_remover, 5);
	TextDrawSetProportional(inventario_remover, 0);
	TextDrawSetShadow(inventario_remover, 0);
	TextDrawSetSelectable(inventario_remover, true);
	TextDrawSetPreviewModel(inventario_remover, 19382);
	TextDrawSetPreviewRot(inventario_remover, 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_split[1] = TextDrawCreate(540.294372, 334.449981, "split");
	TextDrawLetterSize(inventario_split[1], 0.400000, 1.600000);
	TextDrawAlignment(inventario_split[1], 2);
	TextDrawColor(inventario_split[1], -1);
	TextDrawSetShadow(inventario_split[1], 0);
	TextDrawSetOutline(inventario_split[1], 0);
	TextDrawBackgroundColor(inventario_split[1], 255);
	TextDrawFont(inventario_split[1], 2);
	TextDrawSetProportional(inventario_split[1], 1);
	TextDrawSetShadow(inventario_split[1], 0);
	TextDrawSetSelectable(inventario_split[1], false);

	inventario_drop[1] = TextDrawCreate(540.762878, 355.451263, "drop");
	TextDrawLetterSize(inventario_drop[1], 0.400000, 1.600000);
	TextDrawAlignment(inventario_drop[1], 2);
	TextDrawColor(inventario_drop[1], -1);
	TextDrawSetShadow(inventario_drop[1], 0);
	TextDrawSetOutline(inventario_drop[1], 0);
	TextDrawBackgroundColor(inventario_drop[1], 255);
	TextDrawFont(inventario_drop[1], 2);
	TextDrawSetProportional(inventario_drop[1], 1);
	TextDrawSetShadow(inventario_drop[1], 0);
	TextDrawSetSelectable(inventario_drop[1], false);

	inventario_close[1] = TextDrawCreate(565.100341, 119.433311, "X");
	TextDrawTextSize(inventario_close[1], 574.999511, 0.000000);
	TextDrawLetterSize(inventario_close[1], 0.400000, 1.600000);
	TextDrawAlignment(inventario_close[1], 1);
	TextDrawColor(inventario_close[1], -1);
	TextDrawSetShadow(inventario_close[1], 0);
	TextDrawSetOutline(inventario_close[1], 0);
	TextDrawBackgroundColor(inventario_close[1], 255);
	TextDrawFont(inventario_close[1], 2);
	TextDrawSetProportional(inventario_close[1], 1);
	TextDrawSetShadow(inventario_close[1], 0);
	TextDrawSetSelectable(inventario_close[1], true);

	inventario_close[0] = TextDrawCreate(564.079284, 120.583320, "");
	TextDrawLetterSize(inventario_close[0], 0.000000, 0.000000);
	TextDrawTextSize(inventario_close[0], 14.000000, 14.000000);
	TextDrawAlignment(inventario_close[0], 1);
	TextDrawColor(inventario_close[0], -1);
	TextDrawSetShadow(inventario_close[0], 0);
	TextDrawSetOutline(inventario_close[0], 0);
	TextDrawBackgroundColor(inventario_close[0], 80);
	TextDrawFont(inventario_close[0], 5);
	TextDrawSetProportional(inventario_close[0], 0);
	TextDrawSetShadow(inventario_close[0], 0);
	TextDrawSetSelectable(inventario_close[0], true);
	TextDrawSetPreviewModel(inventario_close[0], 19382);
	TextDrawSetPreviewRot(inventario_close[0], 0.000000, 0.000000, 0.000000, 1.000000);

}
//-------------------------------------------------------------
LoadPlayerTextDraws(playerid)
{
    inventario_index[playerid][0] = CreatePlayerTextDraw(playerid, 315.500152, 150.692352, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][0], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][0], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][0], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][0], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][0], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][0], 0.000000, -30, 0.000000, 2.2);

	inventario_index[playerid][1] = CreatePlayerTextDraw(playerid, 368.803405, 150.692352, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][1], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][1], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][1], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][1], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][1], 0.000000, -30, 0.000000, 2.2);

    inventario_index[playerid][10] = CreatePlayerTextDraw(playerid, 315.500152, 253.698638, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][10], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][10], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][10], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][10], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][10], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][10], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][10], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][5] = CreatePlayerTextDraw(playerid, 315.500152, 201.795471, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][5], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][5], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][5], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][5], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][5], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][5], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][2] = CreatePlayerTextDraw(playerid, 422.506683, 150.692352, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][2], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][2], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][2], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][2], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][3] = CreatePlayerTextDraw(playerid, 475.509918, 150.692352, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][3], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][3], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][3], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][3], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][3], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][4] = CreatePlayerTextDraw(playerid, 528.508117, 150.692352, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][4], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][4], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][4], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][4], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][4], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][4], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][6] = CreatePlayerTextDraw(playerid, 368.903411, 201.795471, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][6], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][6], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][6], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][6], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][6], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][6], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][7] = CreatePlayerTextDraw(playerid, 422.406677, 201.795471, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][7], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][7], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][7], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][7], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][7], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][7], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][8] = CreatePlayerTextDraw(playerid, 476.009948, 201.795471, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][8], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][8], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][8], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][8], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][8], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][8], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][8], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][9] = CreatePlayerTextDraw(playerid, 528.908020, 201.795471, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][9], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][9], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][9], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][9], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][9], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][9], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][9], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][11] = CreatePlayerTextDraw(playerid, 369.203430, 253.698638, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][11], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][11], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][11], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][11], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][11], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][11], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][11], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][12] = CreatePlayerTextDraw(playerid, 422.806701, 253.698638, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][12] , 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][12] , 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][12] , 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][12] , -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][12] , 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][12] , 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][12], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][12], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][12], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][12], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][12], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][13] = CreatePlayerTextDraw(playerid, 476.209960, 253.698638, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][13], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][13], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][13], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][13], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][13], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][13], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][13], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_index[playerid][14] = CreatePlayerTextDraw(playerid, 529.507873, 253.698638, "");
	PlayerTextDrawLetterSize(playerid, inventario_index[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_index[playerid][14], 46.000000, 45.000000);
	PlayerTextDrawAlignment(playerid, inventario_index[playerid][14], 1);
	PlayerTextDrawColor(playerid, inventario_index[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, inventario_index[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, inventario_index[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][14], 96);
	PlayerTextDrawFont(playerid, inventario_index[playerid][14], 5);
	PlayerTextDrawSetProportional(playerid, inventario_index[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid,inventario_index[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_index[playerid][14], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_index[playerid][14], 19382);
	PlayerTextDrawSetPreviewRot(playerid, inventario_index[playerid][14], 0.000000, 0.000000, 0.000000, 1.000000);

    inventario_skin[playerid] = CreatePlayerTextDraw(playerid, 73.300109, 138.366668, "");
	PlayerTextDrawLetterSize(playerid, inventario_skin[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_skin[playerid], 227.000000, 202.000000);
	PlayerTextDrawAlignment(playerid, inventario_skin[playerid], 1);
	PlayerTextDrawColor(playerid, inventario_skin[playerid], -1);
	PlayerTextDrawSetShadow(playerid, inventario_skin[playerid], 0);
	PlayerTextDrawSetOutline(playerid, inventario_skin[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_skin[playerid], 43520);
	PlayerTextDrawFont(playerid, inventario_skin[playerid], 5);
	PlayerTextDrawSetProportional(playerid, inventario_skin[playerid], 0);
	PlayerTextDrawSetShadow(playerid, inventario_skin[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, inventario_skin[playerid], 0);
	PlayerTextDrawSetPreviewRot(playerid, inventario_skin[playerid], 0.000000, 0.000000, 0.000000, 1.000000);

    inventario_textos[playerid][0] = CreatePlayerTextDraw(playerid, 68.199996, 120.716636, "personagem");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][0], 0.326999, 1.284999);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][0], 1);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][0], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][0], 0);

	inventario_textos[playerid][1] = CreatePlayerTextDraw(playerid, 315.710540, 120.716636, ConvertToGameText("Seu inventário"));
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][1], 0.326999, 1.284999);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][1], 1);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][1], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][1], 0);

	inventario_textos[playerid][2] = CreatePlayerTextDraw(playerid, 248.200164, 144.800033, ConvertToGameText("Cabeça"));
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][2], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][2], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][2], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][2], 0);

	inventario_textos[playerid][3] = CreatePlayerTextDraw(playerid, 247.399932, 189.833389, "mochila");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][3], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][3], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][3], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][3], 0);

	inventario_textos[playerid][4] = CreatePlayerTextDraw(playerid, 128.199707, 180.250152, "corpo");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][4], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][4], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][4], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][4], 0);

	inventario_textos[playerid][5] = CreatePlayerTextDraw(playerid, 127.499824, 232.683532, "arma");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][5], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][5], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][5], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][5], 0);

	inventario_textos[playerid][6] = CreatePlayerTextDraw(playerid, 247.099945, 236.100448, "arma");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][6], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][6], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][6], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][6], 0);

	inventario_textos[playerid][7] = CreatePlayerTextDraw(playerid, 246.600036, 285.667083, "arma");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][7], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][7], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][7], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][7], 0);

	inventario_textos[playerid][8] = CreatePlayerTextDraw(playerid, 127.800155, 284.950317, "arma");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][8], 0.172995, 0.870832);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][8], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][8], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][8], 0);

	inventario_description[playerid][0] = CreatePlayerTextDraw(playerid, 317.699981, 314.833312, "");
	PlayerTextDrawLetterSize(playerid, inventario_description[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_description[playerid][0], 65.000000, 56.000000);
	PlayerTextDrawAlignment(playerid, inventario_description[playerid][0], 1);
	PlayerTextDrawColor(playerid, inventario_description[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, inventario_description[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_description[playerid][0], -208);
	PlayerTextDrawFont(playerid, inventario_description[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, inventario_description[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, inventario_description[playerid][0], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_description[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
    PlayerTextDrawSetSelectable(playerid, inventario_description[playerid][0], true);

	inventario_description[playerid][1] = CreatePlayerTextDraw(playerid, 388.099884, 314.099884, "CAPACETE NV.1");
	PlayerTextDrawLetterSize(playerid, inventario_description[playerid][1], 0.290499, 1.226665);
	PlayerTextDrawAlignment(playerid, inventario_description[playerid][1], 1);
	PlayerTextDrawColor(playerid, inventario_description[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, inventario_description[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_description[playerid][1], 255);
	PlayerTextDrawFont(playerid, inventario_description[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, inventario_description[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][1], 0);

	inventario_description[playerid][2] = CreatePlayerTextDraw(playerid, 388.699920, 330.400878, "PROTEGE_CONTRA_HEADSHOTS");
	PlayerTextDrawLetterSize(playerid, inventario_description[playerid][2], 0.157499, 0.882498);
	PlayerTextDrawAlignment(playerid, inventario_description[playerid][2], 1);
	PlayerTextDrawColor(playerid, inventario_description[playerid][2], -168430192);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, inventario_description[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_description[playerid][2], 255);
	PlayerTextDrawFont(playerid, inventario_description[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, inventario_description[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][2], 0);

	inventario_description[playerid][3] = CreatePlayerTextDraw(playerid, 499.401489, 363.984985, "QUANTIDADE:_1");
	PlayerTextDrawLetterSize(playerid, inventario_description[playerid][3], 0.157499, 0.882498);
	PlayerTextDrawAlignment(playerid, inventario_description[playerid][3], 3);
	PlayerTextDrawColor(playerid, inventario_description[playerid][3], -168430208);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, inventario_description[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_description[playerid][3], 255);
	PlayerTextDrawFont(playerid, inventario_description[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, inventario_description[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, inventario_description[playerid][3], 0);

	inventario_textos[playerid][9] = CreatePlayerTextDraw(playerid, 540.294372, 313.548706, "usar");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][9], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][9], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][9], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_textos[playerid][9], false);

    inventario_personagemindex[playerid][0] = CreatePlayerTextDraw(playerid, 231.000305, 153.250015, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][0], 33.000000, 32.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][0], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][0], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][0], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
    PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][0], true);

	inventario_personagemindex[playerid][1] = CreatePlayerTextDraw(playerid, 110.600074, 189.283264, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][1], 33.000000, 32.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][1], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][1], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][1], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_personagemindex[playerid][2] = CreatePlayerTextDraw(playerid, 230.500000, 198.749984, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][2], 33.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][2], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][2], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][2], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_personagemindex[playerid][3] = CreatePlayerTextDraw(playerid, 110.400032, 242.366851, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][3], 33.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][3], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][3], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][3], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][3], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_personagemindex[playerid][4] = CreatePlayerTextDraw(playerid, 230.405273, 244.750305, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][4], 33.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][4], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][4], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][4], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][4], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][4], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_personagemindex[playerid][5] = CreatePlayerTextDraw(playerid, 230.505279, 294.150360, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][5], 33.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][5], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][5], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][5], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][5], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][5], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_personagemindex[playerid][6] = CreatePlayerTextDraw(playerid, 110.400032, 294.070007, "");
	PlayerTextDrawLetterSize(playerid, inventario_personagemindex[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, inventario_personagemindex[playerid][6], 33.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, inventario_personagemindex[playerid][6], 1);
	PlayerTextDrawColor(playerid, inventario_personagemindex[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, inventario_personagemindex[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][6], 112);
	PlayerTextDrawFont(playerid, inventario_personagemindex[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, inventario_personagemindex[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, inventario_personagemindex[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, inventario_personagemindex[playerid][6], true);
	PlayerTextDrawSetPreviewModel(playerid, inventario_personagemindex[playerid][6], 18645);
	PlayerTextDrawSetPreviewRot(playerid, inventario_personagemindex[playerid][6], 0.000000, 0.000000, 0.000000, 1.000000);

	inventario_textos[playerid][10] = CreatePlayerTextDraw(playerid, 187.721237, 347.616729, "remover");
	PlayerTextDrawLetterSize(playerid, inventario_textos[playerid][10], 0.325504, 1.407498);
	PlayerTextDrawAlignment(playerid, inventario_textos[playerid][10], 2);
	PlayerTextDrawColor(playerid, inventario_textos[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, inventario_textos[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, inventario_textos[playerid][10], 255);
	PlayerTextDrawFont(playerid, inventario_textos[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, inventario_textos[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, inventario_textos[playerid][10], 0);

	inventario_mensagem[playerid] = CreatePlayerTextDraw(playerid, 321.224029, 381.983398, "error_msg");
	PlayerTextDrawLetterSize(playerid, inventario_mensagem[playerid], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, inventario_mensagem[playerid], 2);
	PlayerTextDrawColor(playerid, inventario_mensagem[playerid], -2147483393);
	PlayerTextDrawSetShadow(playerid, inventario_mensagem[playerid], 0);
	PlayerTextDrawSetOutline(playerid, inventario_mensagem[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, inventario_mensagem[playerid], 255);
	PlayerTextDrawFont(playerid, inventario_mensagem[playerid], 2);
	PlayerTextDrawSetProportional(playerid, inventario_mensagem[playerid], 1);
	PlayerTextDrawSetShadow(playerid, inventario_mensagem[playerid], 0);

}
//-------------------------------------------------------------
public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    switch(dialogid) // usaremos um switch para as dialogs
    {
        case DIALOG_REGISTRO:
        {
            if(!response) return Kick(playerid); // se clicar em cancelar na dialog registro ira kickar o jogador

            if(strlen(inputtext) < 4 || strlen(inputtext) > 20) // se a senha tiver menos de 4 ou mais de 20 caracteres ira retornar a dialog
            {
                SendClientMessage(playerid, COR_VERMELHO, "|ERRO| A SENHA DEVE CONTER DE 4 A 20 CARACTERES!");

                new Dialog[240]; // variavel da dialog registro
                format(Dialog, sizeof(Dialog),"{F8F8FF}Bem Vindo(a) Ao Servidor {058AFF}%s{F8F8FF}\n\nVocê não tem uma Conta registrada\n\nDigite uma senha para Registrar\n\nStatus: {058AFF}N/A Registrado{F8F8FF}\n\nIP: {058AFF}%s", PlayerInfo[playerid][pNome], PlayerInfo[playerid][pIP]);
                ShowPlayerDialog(playerid, DIALOG_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", Dialog, "Registrar", "Cancelar");

                } else { // se não conter entre 4 e 20 caracteres ira retornar ao registro

                new Query[100]; // variavel com 100 celulas para inserir as informações de registro na tabela
                mysql_format(IDConexao, Query, sizeof(Query), "INSERT INTO `Contas`(`Nome`, `Senha`) VALUES ('%s', '%s')", PlayerInfo[playerid][pNome], inputtext); // formatamos a query para inserir na tabela do banco de dados
                mysql_tquery(IDConexao, Query, "DadosRegistrados", "i", playerid); // fazemos a consulta e enviamos o resultado para a callback DadosRegistrados
                // enviamos para a callback DadosRegistrados para fazer uma especia de  DEBUG, e tambem para darmos uma ID para a conta no banco de dados
				SendClientMessage(playerid, COR_VERDE, "|SUCESSO| REGISTRO EFETUADO COM SUCESSO !");
                SendClientMessage(playerid, COLOR_GRAD1, "Aguarde por favor...");
				RegistrarDados(playerid);// chamamos a função RegistrarDados para adicionar os valores nas variaveis do player
			}
        }

        case DIALOG_LOGIN:
        {
            if(!response) return Kick(playerid); // se clicar em cancelar na dialog login ira kickar o jogador
            if(!strcmp(PlayerInfo[playerid][pSenha], inputtext, true, 20)) //comparamos a variavel coma senha do player com a senha digitada
            { // se a comparação for correta vamos realizar a consulta para adicionar os valores contidos na tabela para as variaveis do player.

                new Query[70];
                mysql_format(IDConexao, Query, sizeof(Query), "SELECT * FROM `Contas` WHERE `Nome`='%s'", PlayerInfo[playerid][pNome]);
                mysql_tquery(IDConexao, Query, "CarregarContas", "d", playerid);
                // Formatamos a Query realizamos a consulta e enviamos o resultado para a callback CarregarContas
                SendClientMessage(playerid, COR_VERDE, "|SUCESSO| LOGIN EFETUADO COM SUCESSO !");
                } else {
                // comparação sem sucesso ::
                SendClientMessage(playerid, COR_VERMELHO, "|ERRO| SENHA INCORRETA !");
                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Digite sua senha:", "Digite sua senha abaixo para logar-se", "Logar", "Voltar");
            }
        }
    }
	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    for(new i = 0; i < MAX_INVENTORY_SLOTS; i++)
    	if(playertextid == inventario_index[playerid][i])
    	{
    	    if(pInventory[playerid][invSlot][i] == 0)
    	        break;

    	    if(pInventory[playerid][invSelectedSlot] == i)
    	    {
    	        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][i], 96);
    	        pInventory[playerid][invSelectedSlot] = -1;
    	        PlayerTextDrawHide(playerid, inventario_index[playerid][i]);
				PlayerTextDrawShow(playerid, inventario_index[playerid][i]);

				for(new a = 0; a < 4; a++)
		    		PlayerTextDrawHide(playerid, inventario_description[playerid][a]);

                TextDrawHideForPlayer(playerid, inventario_backgrounds[4]);

               	TextDrawHideForPlayer(playerid, inventario_usar);
				TextDrawHideForPlayer(playerid, inventario_split[0]);
				TextDrawHideForPlayer(playerid, inventario_split[1]);
				TextDrawHideForPlayer(playerid, inventario_drop[0]);
				TextDrawHideForPlayer(playerid, inventario_drop[1]);

				PlayerTextDrawHide(playerid, inventario_textos[playerid][9]);

				break;
			}
            else if(pInventory[playerid][invSelectedSlot] != -1)
			{
    	        PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][pInventory[playerid][invSelectedSlot]], 96);
    	        PlayerTextDrawHide(playerid, inventario_index[playerid][pInventory[playerid][invSelectedSlot]]);
				PlayerTextDrawShow(playerid, inventario_index[playerid][pInventory[playerid][invSelectedSlot]]);
			}

            PlayerTextDrawBackgroundColor(playerid, inventario_index[playerid][i], 0xFFFFFF50);

			PlayerTextDrawHide(playerid, inventario_index[playerid][i]);
			PlayerTextDrawShow(playerid, inventario_index[playerid][i]);
  			// Descrição do Item
			PlayerTextDrawSetPreviewModel(playerid, inventario_description[playerid][0], Itens[pInventory[playerid][invSlot][i]][item_modelo]);
            PlayerTextDrawSetPreviewRot(playerid, inventario_description[playerid][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][0], Itens[pInventory[playerid][invSlot][i]][item_previewrot][1], Itens[pInventory[playerid][invSlot][i]][item_previewrot][2], Itens[pInventory[playerid][invSlot][i]][item_previewrot][3]);
            PlayerTextDrawShow(playerid, inventario_description[playerid][0]);

			PlayerTextDrawSetString(playerid, inventario_description[playerid][1], ConvertToGameText(Itens[pInventory[playerid][invSlot][i]][item_nome]));
			PlayerTextDrawSetString(playerid, inventario_description[playerid][2], ConvertToGameText(Itens[pInventory[playerid][invSlot][i]][item_description]));

			if(Itens[pInventory[playerid][invSlot][i]][item_tipo] == ITEM_TYPE_BODY)
			    format(String, sizeof(String), "Durabilidade: %.1f", pInventory[playerid][invArmourStatus][i]);
			else if(pInventory[playerid][invSlotAmount][i] > 1)
				format(String, sizeof(String), "Quantidade: %d", pInventory[playerid][invSlotAmount][i]);
			else
				String = " ";

    		PlayerTextDrawSetString(playerid, inventario_description[playerid][3], String);

			if(pInventory[playerid][invSelectedSlot] == -1)
			{
	            TextDrawShowForPlayer(playerid, inventario_usar);
			    TextDrawShowForPlayer(playerid, inventario_split[0]);
			    TextDrawShowForPlayer(playerid, inventario_split[1]);
			    TextDrawShowForPlayer(playerid, inventario_drop[0]);
			    TextDrawShowForPlayer(playerid, inventario_drop[1]);
			    PlayerTextDrawShow(playerid, inventario_textos[playerid][9]);

			    for(new a = 0; a < 4; a++)
    				PlayerTextDrawShow(playerid, inventario_description[playerid][a]);

                TextDrawShowForPlayer(playerid, inventario_backgrounds[4]);
			}

		    pInventory[playerid][invSelectedSlot] = i;
			break;
    	}
	for(new i = 0; i < 7; i++)
    	if(playertextid == inventario_personagemindex[playerid][i])
		{
		    if(pCharacter[playerid][charSlot][i] == 0)
    	        break;

		    if(pCharacter[playerid][charSelectedSlot] == i)
    	    {
    	        PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][i], 96);
    	        PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][i]);
				PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][i]);
    	        pCharacter[playerid][charSelectedSlot] = -1;

				PlayerTextDrawHide(playerid, inventario_textos[playerid][10]);
				TextDrawHideForPlayer(playerid, inventario_remover);
				break;
    	    }
            else if(pCharacter[playerid][charSelectedSlot] != -1)
    	    {
    	        new char_slot = pCharacter[playerid][charSelectedSlot];
    	        PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][char_slot], 96);
    	        PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][char_slot]);
				PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][char_slot]);
    	    }

		    PlayerTextDrawBackgroundColor(playerid, inventario_personagemindex[playerid][i], 0xFFFFFF50);
			PlayerTextDrawHide(playerid, inventario_personagemindex[playerid][i]);
			PlayerTextDrawShow(playerid, inventario_personagemindex[playerid][i]);
            if(pCharacter[playerid][charSelectedSlot] == -1)
			{
				PlayerTextDrawShow(playerid, inventario_textos[playerid][10]);
				TextDrawShowForPlayer(playerid, inventario_remover);
			}

			pCharacter[playerid][charSelectedSlot] = i;
			break;
		}

	return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new bool:valid_shot = true;

    new ammu_slot = GetAmmunationSlot(playerid);
	if(ammu_slot == -1)
	{
	    for(new s = 3; s < 7; s ++)
    	    if(Itens[pCharacter[playerid][charSlot][s]][item_tipo] != ITEM_TYPE_MELEEWEAPON)
	    	    if(pCharacter[playerid][charSlot][s] != 0)
	    	    {
				    AddItem(playerid, pCharacter[playerid][charSlot][s], 1);
			    	RemoveItemFromCharacter(playerid, s);
				}

		return false;
	}
	pInventory[playerid][invSlotAmount][GetAmmunationSlot(playerid)] --;
	SetPlayerAmmo(playerid, weaponid, GetAmmunation(playerid));

	if(GetAmmunation(playerid) <= 0)
	    for(new s = 3; s < 7; s ++)
    	    if(Itens[pCharacter[playerid][charSlot][s]][item_tipo] != ITEM_TYPE_MELEEWEAPON)
	    	    if(pCharacter[playerid][charSlot][s] != 0)
	    	    {
				    AddItem(playerid, pCharacter[playerid][charSlot][s], 1);
			    	RemoveItemFromCharacter(playerid, s);
			    	valid_shot = false;
				}

	if(pInventory[playerid][invSlotAmount][ammu_slot] <= 0)
		RemoveItemFromInventory(playerid, ammu_slot);

	if(valid_shot == false)
		return false;

	return true;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}
/*public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
		if(PlayerInfo[playerid][pStaff])
		{
			SetPlayerPosFindZ(playerid, fX, fY, fZ);
			return 1;
		}
		else{return 0;}
}*/
//===== CALLBACKS =====
SR::GameModeInitExitFunc()
{
   	foreach(Player, i)
	{
		InterpolateCameraPos(i, 1855.578247, -1356.315795, 106.570388, 828.892395, -1470.234985, 159.147048, 50000);
		InterpolateCameraLookAt(i, 1860.529296, -1355.671020, 106.302513, 833.859008, -1469.715087, 158.897155, 60000);
		SetPlayerInterior(i, 0);
		TogglePlayerControllable(i, 0);
		SetPlayerPos(i, 1416.6915,-1478.7733,125.3672);
	}
	SendClientMessageToAll(COLOR_ADMIN, "==============================================================================================");
	SendClientMessageToAll(COLOR_ADMIN, "Servidor está sendo reiniciado e voltará em alguns segundos! Por Favor, não feche o jogo ainda");
	SendClientMessageToAll(COLOR_ADMIN, "==============================================================================================");
	SetTimer("GameModeExitFunc", 1000, 0);
	return 1;
}
SR::GameModeExitFunc()
{
   	foreach(Player, i)
	{
		GameTextForPlayer(i, "~b~~h~Reiniciando ~r~~h~& ~w~~h~Salvando...", 8000, 3);
		TogglePlayerControllable(i, 0);
	}
	for(new i; i < MAX_TEXT_DRAWS; i++)
	{
	    TextDrawDestroy(Text:i);
	}
	SetTimer("ReiniciarServer", 5000, 0);
}
SR::ReiniciarServer()
{
	//GameModeExit();
	SendRconCommand("gmx");
}
forward Kicka(p); public Kicka(p) {
    #undef Kick
    Kick(p);
    #define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
    return 1;
}
forward Bana(p); public Bana(p) {
    #undef Ban
    Ban(p);
    #define Ban(%0) SetTimerEx("Bana", 100, false, "i", %0)
    return 1;
}
forward CmdTimerOff(playerid);
public CmdTimerOff(playerid)
{
	return DeletePVar(playerid,"CMD");
}
forward TimeToGMX(playerid);
public TimeToGMX(playerid)
{
	GameModeInitExitFunc();
}
forward PartidaCarregada(playerid);
public PartidaCarregada(playerid)
{
	new Str1[128], playersVivos = 0;
	PlayerInfo[playerid][pJogando] = true;
 	SetPlayerHealth(playerid, 100);
 	SetPlayerInterior(playerid, 0);
 	TogglePlayerControllable(playerid,1);
	TextDrawShowForPlayer(playerid, VIVOS);
	TextDrawHideForPlayer(playerid, CARREGANDO1);
	TextDrawHideForPlayer(playerid, CARREGANDO2);
	for(new i; i <MAX_PLAYERS; i++)
	{
		if(PlayerInfo[playerid][pJogando] == true)
		{
			playersVivos++;
		}
	}
	format(Str1,sizeof(Str1),"vivos:_%i", playersVivos);
	TextDrawSetString(VIVOS,Str1);
	PutPlayerInVehicle(playerid,Aviao,1); // Passageiro
	return 1;
}


forward Partida(playerid);
public Partida(playerid)
{
	if(ComecouPartida == true)
	{
		new teste1, teste2;
		teste1 = GZ_ShapeCreate(EMPTY_CIRCLE, 1151.1169,-1704.6332,500.0, -1, 5.0, 0.0, 360.0);
		teste2 = GZ_ShapeCreate(CIRCUMFERENCE, 1151.1169,-1704.6332,498.0, -1, 5.0, 0.0, 360.0);
		GZ_ShapeShowForAll(teste1, 0x0080FFFF99);
		GZ_ShapeShowForAll(teste2, 0x0000FFFF);
	}
	if(IsPlayerNPC(playerid)) //Verifica se o jogador é um NPC.
	{
 		Aviao = CreateVehicle(577, 0.0, 0.0, 5.0, 0.0, 1, 1, 5000);
   		new npcname[MAX_PLAYER_NAME];
    	GetPlayerName(playerid, npcname, sizeof(npcname)); //Obtendo o nome do(s) NPC(s).
	    if(!strcmp(npcname, "PilotoDoAviao", true)) //Checando se o nome do NPC é MeuPrimeiroNPC
	    {
     		PutPlayerInVehicle(playerid, Aviao, 0); //Colocar o NPC dentro do veículo que criamos para isso.
	    }
	    return 1;
	}
	else
	{
 		TogglePlayerControllable(playerid,0);
   		TimerCarregado[playerid] = SetTimerEx("PartidaCarregada",segundos(10),false, "i",playerid);
		TextDrawShowForPlayer(playerid, CARREGANDO1);
		new rand = random(14), str[30];
		format(str, sizeof(str), "loadsc%d:loadsc%d", rand, rand);
		TextDrawSetString(CARREGANDO2, str);
		TextDrawShowForPlayer(playerid, CARREGANDO2);
	}
	return 1;
}

forward Votacao(playerid);
public Votacao(playerid)
{
    new string[128], Str[128];
    SendClientMessageToAll(-1, "__________________________________________________________________________");
	SendClientMessageToAll(COR_VERDE, ">>> || [VOTAÇÃO ENCERRADA] ||");
	format(string, sizeof string, ">>> [SIM]  %d  x  %d  [NÃO]", votacao[sim], votacao[nao]);
	SendClientMessageToAll(COR_VERDE ,string);
	if(votacao[sim] == votacao[nao])
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, ">>> [RESULTADO] Houve um empate na votação!");
	}
	else if(votacao[sim] > votacao[nao])
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, ">>> [RESULTADO] A maioria votou em SIM, o jogador será kickado!");
		format(Str, sizeof(Str), ">>> |STAFF| O JOGADOR  %s  FOI KICKADO  |  Motivo: VOTAÇÃO", PlayerInfo[JogadorAlvoDaVotacao][pNome]);
  		SendClientMessageToAll(COLOR_LIGHTRED, Str);
		Kick(JogadorAlvoDaVotacao);
	}
	else if(votacao[sim] < votacao[nao])
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, ">>> [RESULTADO] A maioria votou em NÃO, o jogador não será kickado!");
	}
	SendClientMessageToAll(-1, "__________________________________________________________________________");

	TextDrawHideForAll(FUNDOVOTE1);
	TextDrawHideForAll(FUNDOVOTE2);
	TextDrawHideForAll(FUNDOVOTE3);
	TextDrawHideForAll(TXTVOTACAO1);
	TextDrawHideForAll(TXTVOTACAO2);
	TextDrawHideForAll(TXTVOTACAO3);
	TextDrawHideForAll(NICKVOTE);

	votacao[iniciada] = false;
	votacao[sim] = 0;
	votacao[nao] = 0;

	for(new i; i < MAX_PLAYERS; i++)
	{
		votou[i] = false;
	}
	return 1;
}
forward CarregarPartida(playerid);
public CarregarPartida(playerid)
{
	//SpawnPlayer(playerid);
	ComecouPartida = true;
	return 1;
}

forward Loading(playerid);
public Loading(playerid)
{
    for(new i=0; i < 100; i++)
	{
		SendClientMessage(playerid, COLOR_GRAD1, " ");
	}
	PlayerInfo[playerid][pDinheiro] = GetPlayerMoney(playerid);
 	PlayerInfo[playerid][pLevel] = GetPlayerScore(playerid);
	TextDrawHideForPlayer(playerid, CARREGANDO1);
	TextDrawHideForPlayer(playerid, CARREGANDO2);
	TextDrawHideForPlayer(playerid, VIVOS);
	new Str1[128], Str2[128], Str3[128], Str4[128];
	new Str5[128], Str6[128];
    TogglePlayerSpectating(playerid, true);
    TogglePlayerControllable(playerid, 0);
	TextDrawShowForPlayer(playerid, Hora);
    TextDrawShowForPlayer(playerid, ImagemEntrada);
	TextDrawShowForPlayer(playerid, FUNDO1);
	TextDrawShowForPlayer(playerid, FUNDO2);
	TextDrawShowForPlayer(playerid, FUNDO3);
	TextDrawShowForPlayer(playerid, FUNDOPLAY1);
	TextDrawShowForPlayer(playerid, FUNDOPLAY2);
	TextDrawShowForPlayer(playerid, PLAYSOLO);
	TextDrawShowForPlayer(playerid, FUNDOSKIN1);
	TextDrawShowForPlayer(playerid, FUNDOSKIN2);
	TextDrawShowForPlayer(playerid, SKIN);
	TextDrawShowForPlayer(playerid, TXTNOME);
	TextDrawShowForPlayer(playerid, TXTDINHEIRO);
 	TextDrawShowForPlayer(playerid, TXTNIVEL);
	TextDrawShowForPlayer(playerid, TXTKILLS);
	TextDrawShowForPlayer(playerid, TXTDEATHS);
	TextDrawShowForPlayer(playerid, TXTWINS);
	TextDrawShowForPlayer(playerid, FUNDODUO1);
	TextDrawShowForPlayer(playerid, FUNDODUO2);
	TextDrawShowForPlayer(playerid, PLAYDUO);
	TextDrawShowForPlayer(playerid, FUNDOSQUAD1);
	TextDrawShowForPlayer(playerid, FUNDOSQUAD2);
	TextDrawShowForPlayer(playerid, PLAYSQUAD);
	TextDrawShowForPlayer(playerid, GTA);
	TextDrawShowForPlayer(playerid, SANROYALE);
	TextDrawShowForPlayer(playerid, TXTVERSION);
	TextDrawShowForPlayer(playerid, TCCPROJECT);
	TextDrawShowForPlayer(playerid, FUNDOLOJA1);
	TextDrawShowForPlayer(playerid, FUNDOLOJA2);
	TextDrawShowForPlayer(playerid, TXTLOJA);
	TextDrawShowForPlayer(playerid, BTNLOJA);
	SelectTextDraw(playerid, 0xFFFF00FF);
    format(Str1,sizeof(Str1),"Nick:______%s",PlayerInfo[playerid][pNome]);
	format(Str2,sizeof(Str2),"Matou:________________%d",PlayerInfo[playerid][pMatou]);
	format(Str3,sizeof(Str3),"Morreu:______________%d",PlayerInfo[playerid][pMorreu]);
	format(Str4,sizeof(Str4),"vitorias:____________%d",PlayerInfo[playerid][pVitorias]);
	format(Str5,sizeof(Str5),"$%d",PlayerInfo[playerid][pDinheiro]);
 	format(Str6,sizeof(Str6),"LEVEL:_________________%d",PlayerInfo[playerid][pLevel]);
	TextDrawSetString(TXTNOME,Str1);
	TextDrawSetString(TXTKILLS,Str2);
	TextDrawSetString(TXTDEATHS,Str3);
	TextDrawSetString(TXTWINS,Str4);
	TextDrawSetString(TXTDINHEIRO,Str5);
	TextDrawSetString(TXTNIVEL,Str6);
	PlayAudioStreamForPlayer(playerid,	"https://dl.dropboxusercontent.com/s/ekk9c5t6hd99a0s/Go%20Go%20Space%20Monkey.mp3?dl=0");
    //PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
	return 1;
}

public ZerarAntiFlood(playerid) AntiFlood[playerid] = 0;

forward DesbanirConta(playerid);
public DesbanirConta(playerid)
{
	if(cache_num_rows() > 0)
	{
	    new id, Query[90];
	    cache_get_value_int(0, "Banido", PlayerInfo[id][pBanido]);
	    if(PlayerInfo[id][pBanido] >= 1)
	    {
			PlayerInfo[id][pBanido] = 0;
			mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Banido`=%d, WHERE `Nome`=%s", PlayerInfo[id][pBanido], PlayerInfo[id][pNome]);
			new str[100];
			format(str,sizeof(str), "[STAFF] %s DESBANIU O JOGADOR %s", PlayerInfo[playerid][pNome],PlayerInfo[id][pNome]);
			SendClientMessageToAll(COLOR_LIGHTRED, str);
		}
	}
	return 1;
}

forward RemoverStaff(playerid);
public RemoverStaff(playerid)
{
	if(cache_num_rows() > 0)
	{
	    new id, Query[90];
        PlayerInfo[id][pStaff] = 0;
		mysql_format(IDConexao, Query, sizeof(Query), "UPDATE `Contas` SET `Staff`=%d, WHERE `Nome`=%s", PlayerInfo[id][pStaff], PlayerInfo[id][pNome]);
        new str1[100], str2[100];
		format(str1,sizeof(str1), "AdmCmd: %s removeu %s da Staff!", PlayerInfo[playerid][pNome],PlayerInfo[id][pNome]);
		format(str2,sizeof(str2), "[AVISO] %s removeu você da Staff!", PlayerInfo[playerid][pNome],PlayerInfo[id][pNome]);
		MessageToAdmins(COLOR_LIGHTGREEN, str1);
		SendClientMessage(id, COLOR_LIGHTBLUE, str2);
	}
	else{SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Conta não registrada no servidor!");}

	if(cache_num_rows() > 1)
	{
		SendClientMessage(playerid, COR_VERMELHO, "|ERRO| Mais de uma conta com o mesmo nome registrada!");
		return 0;
	}
	return 1;
}

forward VerificarContas(playerid);
public VerificarContas(playerid)
{
	if(!IsPlayerNPC(playerid))
	{
	    new Dialog[240]; // Variavel para as dialogs com 240 celulas necessarias

	    if(cache_num_rows() > 0) // aqui o resultado da consulta da OnPlayerConnect
	    	{// Se a linha for maior que 1 "existir" ira chamar a dialog de login
		        cache_get_value(0, "Senha", PlayerInfo[playerid][pSenha], 20); // Pegamos o valor da tabela e setamos a variavel pSenha que sera necessaria para o login

				format(Dialog, sizeof(Dialog),"{F8F8FF}Bem Vindo(a) Ao Servidor {058AFF}%s{F8F8FF}\n\nVocê ja tem uma Conta registrada\n\nDigite sua senha para Logar\n\nStatus: {00FF40}REGISTRADO{F8F8FF}\n\nIP: {058AFF}%s", PlayerInfo[playerid][pNome], PlayerInfo[playerid][pIP]);
		        ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", Dialog, "Logar", "Cancelar");

			}else{ // se a linha não existir sera chamada a dialog de registro

		        format(Dialog, sizeof(Dialog),"{F8F8FF}Bem Vindo(a) Ao Servidor {058AFF}%s{F8F8FF}\n\nVocê não tem uma Conta registrada\n\nDigite uma senha para Registrar\n\nStatus: {FF0000}NÃO REGISTRADO{F8F8FF}\n\nIP: {058AFF}%s", PlayerInfo[playerid][pNome], PlayerInfo[playerid][pIP]);
		        ShowPlayerDialog(playerid, DIALOG_REGISTRO, DIALOG_STYLE_PASSWORD, "Registro", Dialog, "Registrar", "Cancelar");
	       	 	}
	}
	else
	{
	    //SpawnPlayer(playerid);
 	}
    return 1;
}
forward DadosRegistrados(playerid);
public DadosRegistrados(playerid)
{
    PlayerInfo[playerid][pID] = cache_insert_id(); // Adicionamos o ID da conta do player
    printf("-> Nova conta registrada ID: %d", PlayerInfo[playerid][pID]); // Printf no samp server para informar que a conta foi registrada com sucesso
    return 1;
}
forward CarregarContas(playerid);
public CarregarContas(playerid)
{ // Resultado da consulta do login, adicionamos os valores contidos na tabela para as variaveis do player
    cache_get_value_int(0, "ID", PlayerInfo[playerid][pID]);
    cache_get_value_int(0, "Staff", PlayerInfo[playerid][pStaff]);
    cache_get_value_name(0, "Cargo", PlayerInfo[playerid][pCargo], 64);
    cache_get_value_int(0, "Level", PlayerInfo[playerid][pLevel]);
    cache_get_value_int(0, "Matou", PlayerInfo[playerid][pMatou]);
    cache_get_value_int(0, "Morreu", PlayerInfo[playerid][pMorreu]);
    cache_get_value_int(0, "Skin", PlayerInfo[playerid][pSkin]);
    cache_get_value_int(0, "Vitorias", PlayerInfo[playerid][pVitorias]);
    cache_get_value_int(0, "Dinheiro", PlayerInfo[playerid][pDinheiro]);
    cache_get_value_int(0, "Banido", PlayerInfo[playerid][pBanido]);
    cache_get_value_name(0, "Motivo", PlayerInfo[playerid][pMotivo], 64);

    CarregarDados(playerid); // chamamos a função CarregarDados
    return 1;
}
forward DadosSalvos(playerid);
public DadosSalvos(playerid) return printf("-> Conta salva ID: %d", PlayerInfo[playerid][pID]);
// Printf no samp server para informar que a conta foi salva com sucesso






stock IsPlayerInMeio(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1562.0083 && y >= -1563.0608 && x <= 1632.5162 && y <= -1480.9788 ||
	   x >= 1550.1243 && y >= -1553.4775 && x <= 1578.6469 && y <= -1486.3337 ||
	   x >= 1564.1344 && y >= -1489.2480 && x <= 1605.7626 && y <= -1474.5509) return true;
    else return false;
}
stock IsPlayerInMeio2(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1477.9320 && y >= -1850.3679 && x <= 1706.7206 && y <= -1189.1335 ||
	   x >= 1307.6635 && y >= -1718.4222 && x <= 1872.1935 && y <= -1303.0232 ||
	   x >= 1377.7096 && y >= -1794.7800 && x <= 1489.5037 && y <= -1693.5067 ||
	   x >= 1255.5656 && y >= -1633.6880 && x <= 1339.1772 && y <= -1396.6772 ||
	   x >= 1258.4578 && y >= -1674.5132 && x <= 1303.6841 && y <= -1615.5383 ||
	   x >= 1350.2758 && y >= -1789.9604 && x <= 1400.3851 && y <= -1707.6129 ||
	   x >= 1442.2511 && y >= -1841.7125 && x <= 1507.2693 && y <= -1782.8301 ||
	   x >= 1401.1783 && y >= -1819.2565 && x <= 1455.4836 && y <= -1792.7925 ||
	   x >= 1310.7522 && y >= -1758.9353 && x <= 1367.6418 && y <= -1701.3995 ||
	   x >= 1494.5593 && y >= -1869.3936 && x <= 1675.7406 && y <= -1828.7443 ||
	   x >= 1293.1669 && y >= -1723.7937 && x <= 1322.0905 && y <= -1597.8490 ||
	   x >= 1239.6571 && y >= -1595.4434 && x <= 1279.7891 && y <= -1455.8019 ||
	   x >= 1272.0991 && y >= -1421.7406 && x <= 1336.5775 && y <= -1333.8971 ||
	   x >= 1424.6965 && y >= -1330.3105 && x <= 1497.5479 && y <= -1201.8934 ||
	   x >= 1692.3242 && y >= -1332.7697 && x <= 1793.1130 && y <= -1221.9113 ||
	   x >= 1327.8810 && y >= -1329.0127 && x <= 1455.0614 && y <= -1274.6321 ||
       x >= 1496.5029 && y >= -1219.3549 && x <= 1689.3436 && y <= -1171.2523 ||
	   x >= 1356.3721 && y >= -1305.9192 && x <= 1453.3903 && y <= -1249.6017 ||
	   x >= 1702.1093 && y >= -1251.8376 && x <= 1766.8522 && y <= -1196.1078 ||
	   x >= 1384.1315 && y >= -1277.7278 && x <= 1456.7535 && y <= -1221.6676 ||
	   x >= 1776.9990 && y >= -1335.3666 && x <= 1856.6959 && y <= -1278.8862 ||
	   x >= 1772.8395 && y >= -1310.1328 && x <= 1843.1349 && y <= -1247.5261 ||
	   x >= 1680.2830 && y >= -1831.1821 && x <= 1775.4858 && y <= -1689.7455 ||
	   x >= 1759.5334 && y >= -1815.8657 && x <= 1812.9252 && y <= -1693.0555 ||
	   x >= 1857.7864 && y >= -1706.8490 && x <= 1899.7480 && y <= -1341.6830 ||
	   x >= 1795.2761 && y >= -1780.0570 && x <= 1835.9591 && y <= -1694.6494 ||
	   x >= 1891.2517 && y >= -1654.7234 && x <= 1920.2957 && y <= -1380.1552 ||
	   x >= 1821.7098 && y >= -1759.7487 && x <= 1863.3104 && y <= -1697.0804)
	   {
		return true;
	   }
	if(x >= 1903.6646 && y >= -1609.7668 && x <= 1947.3728 && y <= -1437.6010)
	{
	return true;
	}
	return false;


}

stock IsPlayerInMeio3(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 801.0356 && y >= -1713.7017 && x <= 1095.1265 && y <= -1331.1171 ||
	   x >= 875.7060 && y >= -1882.0181 && x <= 1103.1573 && y <= -1711.1998 ||
	   x >= 942.0858 && y >= -1987.5822 && x <= 1090.2537 && y <= -1882.6128 ||
	   x >= 1085.5953 && y >= -2139.2136 && x <= 2098.7532 && y <= -901.4928 ||
	   x >= 886.7217 && y >= -1336.0835 && x <= 1104.8759 && y <= -1140.89878 ||
	   x >= 1032.0007 && y >= -1157.6412 && x <= 1095.9421 && y <= -967.701 ||
	   x >= 849.4100 && y >= -1336.5645 && x <= 893.6925 && y <= -1147.3926 ||
	   x >= 973.3417 && y >= -1155.4065 && x <= 1057.0094 && y <= -965.4058 ||
	   x >= 791.7516 && y >= -1617.8218 && x <= 818.4453 && y <= -1449.7716 ||
	   x >= 843.1517 && y >= -1872.5298 && x <= 900.8062 && y <= -1691.3571 ||
	   x >= 879.6463 && y >= -1990.8441 && x <= 1110.3065 && y <= -1853.4397 ||
	   x >= 814.6425 && y >= -1338.6505 && x <= 864.2493 && y <= -1221.1670 ||
	   x >= 2085.8291 && y >= -2110.9224 && x <= 2202.2539 && y <= -922.4819 ||
	   x >= 973.3417 && y >= -1155.4065 && x <= 1057.0094 && y <= -965.4058 ||
	   x >= 791.7516 && y >= -1617.8218 && x <= 818.4453 && y <= -1449.7716 ||
	   x >= 843.1517 && y >= -1872.5298 && x <= 900.8062 && y <= -1691.3571 ||
       x >= 879.6463 && y >= -1990.8441 && x <= 1110.3065 && y <= -1853.4397 ||
	   x >= 975.3019 && y >= -2101.9299 && x <= 1098.4443 && y <= -1976.8064 ||
	   x >= 921.8496 && y >= -1157.5464 && x <= 990.5436 && y <= -1012.4851 ||
	   x >= 1131.4105 && y >= -921.6474 && x <= 2055.7788 && y <= -790.6258 ||
	   x >= 1317.4611 && y >= -815.6348 && x <= 1870.1343 && y <= -729.3961 ||
	   x >= 2175.4624 && y >= -1986.6145 && x <= 2299.4832 && y <= -1066.3801 ||
	   x >= 1112.9768 && y >= -2201.1902 && x <= 2055.7788 && y <= -790.6258 ||
	   x >= 1234.9468 && y >= -2274.6318 && x <= 1924.6421 && y <= -2165.3052 ||
	   x >= 2277.3069 && y >= -1851.4390 && x <= 2363.7363 && y <= -1190.8448 ||
	   x >= 1394.0062 && y >= -2318.6189 && x <= 1772.0286 && y <= -2253.1611 ||
	   x >= 2346.4004 && y >= -1681.3169 && x <= 2402.5120 && y <= -1376.0316) return true;
    else return false;
}

stock IsPlayerInMeio4(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 60.4012 && y >= -2741.0461 && x <= 2938.0474 && y <= -382.3058 ||
	   x >= 615.0852 && y >= -370.9426 && x <= 2568.6250 && y <= -27.6942) return true;
    else return false;
}

stock PlayerIn8(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 703.2076 && y >= -1306.5847 && x <= 783.9357 && y <= -1218.1761) return true;
    else return false;
}

stock PlayerIn82(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 538.1176 && y >= -1538.4246 && x <= 939.6409 && y <= -962.1368 ||
       x >= 627.3637 && y >= -1608.3086 && x <= 840.5979 && y <= -894.6937 ||
	   x >= 387.5816 && y >= -1355.8953 && x <= 1092.9288 && y <= -1145.7620 ||
	   x >= 466.0190 && y >= -1492.4695 && x <= 1026.0778 && y <= -1027.3822 ||
	   x >= 567.2707 && y >= -1585.9757 && x <= 900.6174 && y <= -925.1136 ||
	   x >= 499.9792 && y >= -1538.9315 && x <= 994.4338 && y <= -972.4264 ||
	   x >= 438.0985 && y >= -1466.1832 && x <= 1058.9193 && y <= -1048.1486 ||
	   x >= 418.3158 && y >= -1433.9061 && x <= 1087.3866 && y <= -1117.4307) return true;
    else return false;
}


stock PlayerIn83(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 128.2053 && y >= -1795.5652 && x <= 1380.9373 && y <= -736.7951 ||
	   x >= 89.1282 && y >= -1737.5315 && x <= 154.8076 && y <= -763.3022 ||
	   x >= 332.7074 && y >= -761.9768 && x <= 1160.5852 && y <= -547.0371 ||
	   x >= 1349.8220 && y >= -1511.4987 && x <= 1525.5118 && y <= -1007.8837 ||
	   x >= 356.9987 && y >= -1975.3049 && x <= 1128.2010 && y <= -1754.4562 ||
	   x >= 1349.5978 && y >= -1599.3772 && x <= 1502.8131 && y <= -1489.0618 ||
	   x >= 1094.4813 && y >= -1889.5269 && x <= 1262.6959 && y <= -1767.7245 ||
	   x >= 228.8148 && y >= -1905.4301 && x <= 378.4044 && y <= -1760.6719 ||
	   x >= 218.0790 && y >= -767.1998 && x <= 371.7750 && y <= -627.5469 ||
	   x >= 1348.3423 && y >= -1698.8888 && x <= 1445.9546 && y <= -1571.4260 ||
	   x >= 1236.1492 && y >= -1836.3326 && x <= 1321.8256 && y <= -1765.7773 ||
	   x >= 1098.1873 && y >= -1933.5592 && x <= 1212.5200 && y <= -1867.5176 ||
	   x >= 530.3121 && y >= -2062.1519 && x <= 964.4749 && y <= -1940.8115 ||
	   x >= 304.7899 && y >= -1956.9586 && x <= 377.9539 && y <= -1870.6499 ||
	   x >= 164.6360 && y >= -1859.2428 && x <= 251.1149 && y <= -1753.4956 ||
	   x >= -57.9942 && y >= -1468.6490 && x <= 123.1377 && y <= -1060.1940 ||
	   x >= 927.2983 && y >= -2002.8602 && x <= 1073.8726 && y <= -1940.9276 ||
	   x >= 415.1458 && y >= -2010.1912 && x <= 556.6647 && y <= -1938.6327 ||
	   x >= 21.5337 && y >= -1644.7806 && x <= 129.4039 && y <= -1420.9703 ||
	   x >= 26.0636 && y >= -1098.9801 && x <= 129.8510 && y <= -883.7344 ||
	   x >= 53.8008 && y >= -1697.2565 && x <= 105.0259 && y <= -1606.1743 ||
	   x >= -9.2062 && y >= -1582.6945 && x <= 38.9305 && y <= -1431.2063 ||
	   x >= -15.2041 && y >= -1099.5071 && x <= 55.4282 && y <= -945.1605 ||
	   x >= 49.5375 && y >= -923.0374 && x <= 111.2218 && y <= -797.2912 ||
	   x >= 163.4491 && y >= -771.6180 && x <= 254.1198 && y <= -673.5643 ||
	   x >= 281.7670 && y >= -663.3154 && x <= 366.3857 && y <= -594.4672 ||
	   x >= 520.5580 && y >= -580.4796 && x <= 982.5368 && y <= -450.4225)
	   {
        return true;
	   }
	if(x >= 1147.1213 && y >= -778.8157 && x <= 1277.5253 && y <= -621.6290 ||
	   x >= 425.7111 && y >= -578.9429 && x <= 563.8292 && y <= -512.2307 ||
	   x >= 968.3313 && y >= -586.4830 && x <= 1066.3801 && y <= -494.5314 ||
	   x >= 1147.0367 && y >= -664.2401 && x <= 1207.2605 && y <= -574.1032 ||
	   x >= 1258.7478 && y >= -778.5591 && x <= 1328.9678 && y <= -661.7903 ||
	   x >= 1352.8129 && y >= -1063.4526 && x <= 1465.3169 && y <= -856.5352 ||
	   x >= 1507.0282 && y >= -1408.7321 && x <= 1546.3732 && y <= -1108.1869 ||
	   x >= 1355.2942 && y >= -895.7371 && x <= 1422.6823 && y <= -788.1764 ||
	   x >= 1448.8322 && y >= -1051.3784 && x <= 1493.6896 && y <= -917.5729)
	{
	  return true;
	}
    return false;
}

stock PlayerInC(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1130.0413 && y >= -2088.9880 && x <= 1219.6470 && y <= -1984.3818) return true;
    else return false;
}
stock PlayerInC2(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 947.3299 && y >= -2324.4878 && x <= 1413.6149 && y <= -1754.7284 ||
	   x >= 836.0055 && y >= -2181.2937 && x <= 1505.0630 && y <= -1872.8113 ||
	   x >= 1055.2240 && y >= -2392.1658 && x <= 1307.4705 && y <= -1692.1644 ||
	   x >= 998.3331 && y >= -2363.9158 && x <= 1363.2520 && y <= -1718.6611 ||
	   x >= 899.3741 && y >= -2289.9390 && x <= 1446.9688 && y <= -1781.8489 ||
	   x >= 862.2658 && y >= -2243.5527 && x <= 1481.8495 && y <= -1831.7509 ||
	   x >= 817.1519 && y >= -2119.3743 && x <= 1528.6467 && y <= -1945.7312)return true;
    else return false;
}

stock PlayerInC3(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 745.3762 && y >= -2296.8169 && x <= 1879.5791 && y <= -1106.9991 ||
	   x >= 600.6522 && y >= -2110.2517 && x <= 2013.4528 && y <= -1289.6212 ||
	   x >= 1077.9695 && y >= -2501.1599 && x <= 1486.5153 && y <= -898.2321 ||
	   x >= 947.0966 && y >= -2465.7651 && x <= 1667.3229 && y <= -941.3907 ||
	   x >= 665.8686 && y >= -2221.8191 && x <= 1948.9203 && y <= -1165.7771 ||
	   x >= 861.0201 && y >= -2404.8984 && x <= 1759.5233 && y <= -1003.7833 ||
	   x >= 569.7726 && y >= -2058.3806 && x <= 2055.3113 && y <= -1341.8513 ||
	   x >= 796.3112 && y >= -2345.2209 && x <= 1820.9286 && y <= -1056.4801 ||
	   x >= 513.5809 && y >= -1898.7279 && x <= 2097.1343 && y <= -1469.7518 ||
	   x >= 549.9633 && y >= -1999.2324 && x <= 2070.5552 && y <= -1406.8885 ||
	   x >= 631.0375 && y >= -2171.7686 && x <= 1997.3601 && y <= -1250.4257)return true;
    else return false;
}

stock PlayerInG(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 2438.9888 && y >= -1711.6444 && x <= 2538.5498 && y <= -1628.0706) return true;
    else return false;
}

stock PlayerInG2(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 2255.7622 && y >= -1946.4161 && x <= 2719.0232 && y <= -1385.4635 ||
	   x >= 2359.4153 && y >= -2012.4126 && x <= 2607.6599 && y <= -1325.9763 ||
	   x >= 2145.3433 && y >= -1814.3752 && x <= 2833.1497 && y <= -1537.9572 ||
	   x >= 2290.1147 && y >= -1977.4207 && x <= 2678.7129 && y <= -1358.9102 ||
	   x >= 2211.4478 && y >= -1911.4237 && x <= 2772.0486 && y <= -1437.2660 ||
	   x >= 2176.4810 && y >= -1866.0992 && x <= 2807.6653 && y <= -1472.3403)return true;
    else return false;
}

stock PlayerInG3(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 1413.1672 && y >= -2087.6077 && x <= 2526.6243 && y <= -882.0527 ||
	   x >= 1180.0242 && y >= -1694.5511 && x <= 2767.9590 && y <= -1244.6543 ||
	   x >= 1780.9348 && y >= -2275.8220 && x <= 2188.8508 && y <= -693.4332 ||
	   x >= 1596.7773 && y >= -2203.7275 && x <= 2362.0283 && y <= -752.6554 ||
	   x >= 1289.6035 && y >= -1927.2017 && x <= 2647.6716 && y <= -1008.7274 ||
	   x >= 1664.1296 && y >= -2239.0679 && x <= 2301.3396 && y <= -722.1900 ||
	   x >= 1490.5466 && y >= -2165.9045 && x <= 2455.6018 && y <= -802.5278 ||
	   x >= 1339.8550 && y >= -2015.9453 && x <= 2593.5796 && y <= -943.4234 ||
	   x >= 1217.5033 && y >= -1848.0415 && x <= 2706.5791 && y <= -1104.1344)return true;
    else return false;
}

stock PlayerInGP(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1927.8168 && y >= -1249.3344 && x <= 2015.5428 && y <= -1153.5156) return true;
    else return false;
}

stock PlayerInGP2(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 1774.0659 && y >= -1507.8289 && x <= 2180.5276 && y <= -893.7357 ||
	   x >= 1625.6775 && y >= -1315.3583 && x <= 2318.3877 && y <= -1088.7583 ||
	   x >= 1831.5344 && y >= -1539.4452 && x <= 2112.1841 && y <= -857.0217 ||
	   x >= 1721.2996 && y >= -1468.6814 && x <= 2225.4067 && y <= -940.0383 ||
	   x >= 1678.6439 && y >= -1413.6244 && x <= 2266.9363 && y <= -982.2275 ||
	   x >= 1649.4271 && y >= -1374.5936 && x <= 2293.7385 && y <= -1026.2484)return true;
    else return false;
}

stock PlayerInGP3(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(x >= 1413.1672 && y >= -2087.6077 && x <= 2526.6243 && y <= -882.0527 ||
	   x >= 1180.0242 && y >= -1694.5511 && x <= 2767.9590 && y <= -1244.6543 ||
	   x >= 1780.9348 && y >= -2275.8220 && x <= 2188.8508 && y <= -693.4332 ||
	   x >= 1596.7773 && y >= -2203.7275 && x <= 2362.0283 && y <= -752.6554 ||
	   x >= 1289.6035 && y >= -1927.2017 && x <= 2647.6716 && y <= -1008.7274 ||
	   x >= 1664.1296 && y >= -2239.0679 && x <= 2301.3396 && y <= -722.1900 ||
	   x >= 1490.5466 && y >= -2165.9045 && x <= 2455.6018 && y <= -802.5278 ||
	   x >= 1339.8550 && y >= -2015.9453 && x <= 2593.5796 && y <= -943.4234 ||
	   x >= 1217.5033 && y >= -1848.0415 && x <= 2706.5791 && y <= -1104.1344)return true;
    else return false;
}
public Iniciar(playerid)
{
    js--;
	SetPlayerPos(playerid, 1592.5006,-1517.4813,13.5852);
    tempodano = 0;
	SetPlayerHealth(playerid, 100);
    SendClientMessage(playerid, COR_VERDE, "Você está na Play Zone");
    if(kk == 0)
	{
	finalizar[playerid] = SetTimer("Finalizar", segundos(1), true);
    GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1590.0454,-1615.4119, 1500, 700, 5.0, 0.0, 360.0);
    if(mododejogo == 0)
    {
    GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 800, 700, 5.0, 0.0, 360.0);
    }
    if(mododejogo == 1)
    {
    GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 800, 700, 5.0, 0.0, 360.0);
    }
    if(mododejogo == 2)
    {
    GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1308.8557,-1697.8099, 800, 700, 5.0, 0.0, 360.0);
    }
    if(mododejogo == 3)
    {
    GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1972.4686,-1481.6407, 800, 700, 5.0, 0.0, 360.0);
    }
    if(mododejogo == 4)
    {
    GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1972.4686,-1481.6407, 800, 700, 5.0, 0.0, 360.0);
    }
    kk++;
    }
    
    if(g < 50)
    {
    GZ_ShapeShowForPlayer(g, GZS1, COR_VERMELHO);
    GZ_ShapeShowForPlayer(g, GZS2, COR_VERDE);
    gz[playerid] = SetTimerEx("CompletarGZ4", segundos(5), false, "i", g);
    dano[playerid] = SetTimerEx("Dano", segundos(1), true, "i", g);
    g++;
    
    }
	
    
    
    
    //gz3 tamanho 800
	//gz2 tamanho 350
	//gz1 tamanho 50
	return true;
}
public CompletarGZ4(playerid)
{
   SendClientMessage(playerid, COR_VERDE, "Você está na Play Zone");
   

   if(jh == 0)
   {
   GZ_ShapeDestroy(GZS1);
   GZ_ShapeDestroy(GZS2);
   GZ_ShapeHideForAll(GZS1);
   GZ_ShapeHideForAll(GZS2);
   if(mododejogo == 0)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 800, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 350, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 1)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 800, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 350, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 2)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1308.8557,-1697.8099, 800, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1174.9805,-2037.0999, 350, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 3)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1972.4686,-1481.6407, 800, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 2487.2124,-1669.1108, 350, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 4)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1972.4686,-1481.6407, 800, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1970.8694,-1198.5863, 350, 700, 5.0, 0.0, 360.0);
   }
   jh++;
   }
   GivePlayerWeapon(playerid, 28, 500);
   if(h < 50)
   {
   GZ_ShapeShowForPlayer(h, GZS1, COR_VERMELHO);
   GZ_ShapeShowForPlayer(h, GZS2, COR_VERDE);
   gz[playerid] = SetTimerEx("CompletarGZ3", segundos(5), false, "i", h);
   h++;
   }
   return true;
}
public CompletarGZ3(playerid)
{
   SendClientMessage(playerid, COR_VERDE, "Você está na Play Zone");
   
   if(jj == 0)
   {
   GZ_ShapeDestroy(GZS1);
   GZ_ShapeHideForAll(GZS1);
   GZ_ShapeDestroy(GZS2);
   GZ_ShapeHideForAll(GZS2);
   if(mododejogo == 0)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 350, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 50, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 1)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 350, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 50, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 2)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1174.9805,-2037.0999, 350, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1174.9805,-2037.0999, 50, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 3)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 2487.2124,-1669.1108, 350, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 2487.2124,-1669.1108, 50, 700, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 4)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1970.8694,-1198.5863, 350, 700, 5.0, 0.0, 360.0);
   GZS2 = GZ_ShapeCreate(CIRCUMFERENCE, 1970.8694,-1198.5863, 50, 700, 5.0, 0.0, 360.0);
   }
   jj++;
   }
  
   GivePlayerWeapon(playerid, 32, 500);
   if(hj < 50)
   {
   GZ_ShapeShowForPlayer(hj, GZS1, COR_VERMELHO);
   GZ_ShapeShowForPlayer(hj, GZS2, COR_VERDE);
   gz[playerid] = SetTimerEx("CompletarGZ2", segundos(5), false, "i", hj);
   hj++;
   }
   return true;
}
public CompletarGZ2(playerid)
{
   SendClientMessage(playerid, COR_VERDE, "Você está na Play Zone");
   
   if(ji == 0)
   {
   GZ_ShapeDestroy(GZS1);
   GZ_ShapeHideForAll(GZS1);
   GZ_ShapeDestroy(GZS2);
   GZ_ShapeHideForAll(GZS2);
   if(mododejogo == 0)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1592.5006,-1517.4813, 50, 1000, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 1)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 743.6083,-1256.6803, 50, 1000, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 2)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1174.9805,-2037.0999, 50, 1000, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 3)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 2487.2124,-1669.1108, 50, 1000, 5.0, 0.0, 360.0);
   }
   if(mododejogo == 4)
   {
   GZS1 = GZ_ShapeCreate(CIRCUMFERENCE, 1970.8694,-1198.5863, 50, 1000, 5.0, 0.0, 360.0);
   }
   ji++;
   }
   if(ll < 50)
   {
   GZ_ShapeShowForPlayer(ll, GZS1, COR_VERMELHO);
   GivePlayerWeapon(playerid, 30, 500);
   ll++;
   }
   return true;
}
public Finalizar(playerid)
{
  if(finalizarjogo <= 1)
  {

	 if(ff < 50)
	 {
	 if(IsPlayerInMeio4(ff))
	 {
     
     KillTimer(gz[ff]);
     KillTimer(dano[ff]);
     KillTimer(finalizar[ff]);

     GZ_ShapeDestroy(GZS1);
     GZ_ShapeHideForAll(GZS1);
     GZ_ShapeDestroy(GZS2);
     GZ_ShapeHideForAll(GZS2);
     jogoini = 0;

 	 new Str1[128];
	 TextDrawHideForPlayer(ff, VIVOS);
	 TextDrawHideForPlayer(ff, Data);
	 TextDrawHideForPlayer(ff, Hora);
     TextDrawShowForPlayer(ff, ImagemEntrada);
	 TextDrawShowForPlayer(ff, FUNDOVITORIA1);
	 TextDrawShowForPlayer(ff, FUNDOVITORIA2);
	 TextDrawShowForPlayer(ff, FUNDOVITORIA3);
	 TextDrawShowForPlayer(ff, MSGVITORIA1);
	 TextDrawShowForPlayer(ff, MSGVITORIA2);
	 TextDrawShowForPlayer(ff, TXTRANKVITORIA);
	 TextDrawShowForPlayer(ff, SKINGALINHA);
	 TextDrawShowForPlayer(ff, FUNDOBTNMENUVIT1);
	 TextDrawShowForPlayer(ff, FUNDOBTNMENUVIT2);
	 TextDrawShowForPlayer(ff, BTNMENUVIT);
	 SelectTextDraw(ff, 0xFFFF00FF);
	 //format(Str1, sizeof(Str1),"]_%d|_]", PlayerInfo[playerid][pRank]);
	 TextDrawSetString(TXTRANKVITORIA, Str1);
	 
	 
     if(mododejogo < 4)
     {
        mododejogo++;
     }
     else
     {
     	mododejogo = 0;
     }

	 }
	 ff++;
     }
     else
     {
     ff = 0;
     }
  }

  return true;
}

public Dano(playerid)
{
    tempodano++;
	if(tempodano >= 0 && tempodano < 5)
	{
	if(!IsPlayerInMeio4(playerid))
	{
	SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone");
    GetPlayerHealth(playerid, health);
    health--;
    SetPlayerHealth(playerid, health);
    return true;
    }
    }

	if(mododejogo == 0)
	{
	  if(tempodano >= 5 && tempodano < 10)
	  {
	  if(!IsPlayerInMeio3(playerid))
	  {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 3");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
	  }
      if(tempodano >= 10 && tempodano < 15)
      {
	  if(!IsPlayerInMeio2(playerid))
      {
      SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 2");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
      }
      if(tempodano >= 15)
      {
	  if(!IsPlayerInMeio(playerid))
      {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone ");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-7);
      return true;
      }
      }
	}

	if(mododejogo == 1)
	{
	  if(tempodano >= 5 && tempodano < 10)
	  {
	  if(!PlayerIn83(playerid))
	  {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 3");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
	  }
      if(tempodano >= 10 && tempodano < 15)
      {
	  if(!PlayerIn82(playerid))
      {
      SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 2");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
      }
      if(tempodano >= 15)
      {
	  if(!PlayerIn8(playerid))
      {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone ");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-7);
      return true;
      }
      }
	}

	if(mododejogo == 2)
	{
	  if(tempodano >= 5 && tempodano < 10)
	  {
	  if(!PlayerInC3(playerid))
	  {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 3");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
	  }
      if(tempodano >= 10 && tempodano < 15)
      {
	  if(!PlayerInC2(playerid))
      {
      SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 2");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
      }
      if(tempodano >= 15)
      {
	  if(!PlayerInC(playerid))
      {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone ");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-7);
      return true;
      }
      }
	}

	if(mododejogo == 3)
	{
	  if(tempodano >= 5 && tempodano < 10)
	  {
	  if(!PlayerInG3(playerid))
	  {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 3");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
	  }
      if(tempodano >= 10 && tempodano < 15)
      {
	  if(!PlayerInG2(playerid))
      {
      SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 2");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
      }
      if(tempodano >= 15)
      {
	  if(!PlayerInG(playerid))
      {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone ");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-7);
      return true;
      }
      }
	}

	if(mododejogo == 4)
	{
	  if(tempodano >= 5 && tempodano < 10)
	  {
	  if(!PlayerInGP3(playerid))
	  {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 3");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
	  }
      if(tempodano >= 10 && tempodano < 15)
      {
	  if(!PlayerInGP2(playerid))
      {
      SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone 2");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-3);
      return true;
      }
      }
      if(tempodano >= 15)
      {
	  if(!PlayerInGP(playerid))
      {
	  SendClientMessage(playerid, COR_AMARELO, "Você está fora da Play Zone ");
      GetPlayerHealth(playerid, health);
      SetPlayerHealth(playerid, health-7);
      return true;
      }
      }
	}

    return true;
}
public MsgIniciar(playerid)
{
   if(tempo == 10)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 10 SEGUNDOS");
	 tempo--;
	 return true;
   }
   if(tempo == 9)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 9 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 8)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 8 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 7)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 7 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 6)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 6 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 5)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 5 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 4)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 4 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 3)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 3 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 2)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 2 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 1)
   {
     SendClientMessageToAll(COLOR_LIGHTRED,  "O JOGO SERÁ INICIADO EM 1 SEGUNDOS");
     tempo--;
     return true;
   }
   if(tempo == 0)
   {
     SendClientMessageToAll(COR_VERDE,  "JOGO INICIADO");
     tempo--;
     KillTimer(msginiciar[playerid]);
     return true;
   }

   return false;
}
public SpawnarItens(playerid)
{
       		new aleatorio = random(sizeof(Itens));
			if(f < 1007)
			{
            DropItem(SpawnItem[f][0], SpawnItem[f][1], SpawnItem[f][2], aleatorio, 1, 0.0);
            DropItem(SpawnItem[f][0], SpawnItem[f][1], SpawnItem[f][2], 24, 30, 0.0);
            f++;
            }
            return true;

}

CMD:m(playerid)
{
	SetPlayerHealth(playerid, 0);
}
CMD:vida(playerid)
{
	SetPlayerHealth(playerid, 100);
}
public Fina(playerid)
{
    finalizarjogo--;


	KillTimer(gz[playerid]);
	KillTimer(dano[playerid]);

    		//KillTimer(finalizar[i]);
	GZ_ShapeHideForPlayer(playerid, GZS1);
	GZ_ShapeHideForPlayer(playerid, GZS2);
	return true;

}

